{"version":3,"file":"index.js","mappingsqlzzvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5DA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvltBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpxtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxtvNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChpQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzvgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzczjvOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzzNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChprxapDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;AEDA;AACA;AACA;AACA","sources":["../webpack://typescript-action/./lib/bootrom.js","../webpack://typescript-action/./lib/execution.js","../webpack://typescript-action/./lib/main.js","../webpack://typescript-action/./lib/memory.js","../webpack://typescript-action/./node_modules/@actions/core/lib/command.js","../webpack://typescript-action/./node_modules/@actions/core/lib/core.js","../webpack://typescript-action/./node_modules/@actions/core/lib/file-command.js","../webpack://typescript-action/./node_modules/@actions/core/lib/oidc-utils.js","../webpack://typescript-action/./node_modules/@actions/core/lib/path-utils.js","../webpack://typescript-action/./node_modules/@actions/core/lib/summary.js","../webpack://typescript-action/./node_modules/@actions/core/lib/utils.js","../webpack://typescript-action/./node_modules/@actions/http-client/lib/auth.js","../webpack://typescript-action/./node_modules/@actions/http-client/lib/index.js","../webpack://typescript-action/./node_modules/@actions/http-client/lib/proxy.js","../webpack://typescript-action/./node_modules/tunnel/index.js","../webpack://typescript-action/./node_modules/tunnel/lib/tunnel.js","../webpack://typescript-action/./node_modules/uf2/dist/cjs/uf2.js","../webpack://typescript-action/./node_modules/uf2/dist/cjs/uf2families.js","../webpack://typescript-action/./node_modules/uuid/dist/index.js","../webpack://typescript-action/./node_modules/uuid/dist/md5.js","../webpack://typescript-action/./node_modules/uuid/dist/nil.js","../webpack://typescript-action/./node_modules/uuid/dist/parse.js","../webpack://typescript-action/./node_modules/uuid/dist/regex.js","../webpack://typescript-action/./node_modules/uuid/dist/rng.js","../webpack://typescript-action/./node_modules/uuid/dist/sha1.js","../webpack://typescript-action/./node_modules/uuid/dist/stringify.js","../webpack://typescript-action/./node_modules/uuid/dist/v1.js","../webpack://typescript-action/./node_modules/uuid/dist/v3.js","../webpack://typescript-action/./node_modules/uuid/dist/v35.js","../webpack://typescript-action/./node_modules/uuid/dist/v4.js","../webpack://typescript-action/./node_modules/uuid/dist/v5.js","../webpack://typescript-action/./node_modules/uuid/dist/validate.js","../webpack://typescript-action/./node_modules/uuid/dist/version.js","../webpack://typescript-action/external node-commonjs \"assert\"","../webpack://typescript-action/external node-commonjs \"crypto\"","../webpack://typescript-action/external node-commonjs \"events\"","../webpack://typescript-action/external node-commonjs \"fs\"","../webpack://typescript-action/external node-commonjs \"http\"","../webpack://typescript-action/external node-commonjs \"https\"","../webpack://typescript-action/external node-commonjs \"net\"","../webpack://typescript-action/external node-commonjs \"os\"","../webpack://typescript-action/external node-commonjs \"path\"","../webpack://typescript-action/external node-commonjs \"tls\"","../webpack://typescript-action/external node-commonjs \"util\"","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/clock/realtime-clock.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/cortex-m0-core.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/gdb/gdb-connection.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/gdb/gdb-server.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/gdb/gdb-utils.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/gpio-pin.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/index.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/interpolator.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/irq.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/adc.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/clocks.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/dma.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/i2c.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/io.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/pads.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/peripheral.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/pio.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/ppb.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/pwm.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/reset.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/rtc.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/spi.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/ssi.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/syscfg.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/sysinfo.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/tbman.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/timer.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/uart.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/peripherals/usb.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/rp2040.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/sio.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/usb/cdc.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/usb/interfaces.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/usb/setup.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/utils/bit.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/utils/fifo.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/utils/logging.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/utils/time.js","../webpack://typescript-action/./node_modules/rp2040js/dist/cjs/utils/timer32.js","../webpack://typescript-action/webpack/bootstrap","../webpack://typescript-action/webpack/runtime/compat","../webpack://typescript-action/webpack/before-startup","../webpack://typescript-action/webpack/startup","../webpack://typescript-action/webpack/after-startup"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bootrom = void 0;\nexports.bootrom = new Uint32Array([\n    0x20041f00, 0x000000ef, 0x00000035, 0x00000031, 0x0201754d, 0x00c8007a,\n    0x0000001d, 0x88022300, 0xd003429a, 0x30048843, 0xd1f74291, 0x47701c18,\n    0xe7fdbf30, 0xf00046f4, 0x489ef805, 0x60012100, 0x46e76041, 0x2100489c,\n    0x600143c9, 0x47706041, 0x00a4a191, 0x00001e09, 0x20294328, 0x30323032,\n    0x73615220, 0x72656270, 0x50207972, 0x72542069, 0x6e696461, 0x744c2067,\n    0x33500064, 0x335202d9, 0x334c02fd, 0x33540327, 0x534d035f, 0x345326dd,\n    0x434d26d1, 0x34432641, 0x42552629, 0x544425b5, 0x45440185, 0x5657018b,\n    0x46490137, 0x584524a1, 0x455223f5, 0x5052237d, 0x434623c5, 0x58432361,\n    0x43452331, 0x00000045, 0x00505247, 0x00585243, 0x01a84653, 0x02284453,\n    0x01a65a46, 0x27585346, 0x2e4c4546, 0x2e545344, 0x3dac4544, 0x48730000,\n    0x29006801, 0xf7ffd11f, 0x4971ff9d, 0x680a4b71, 0xd001421a, 0xe793600b,\n    0x4e704f6f, 0x42b0cf0f, 0x4059d107, 0xd1041840, 0x60383f10, 0x8808f382,\n    0xf0024798, 0xbf20f9e1, 0x08896d21, 0x6560d3fb, 0x1c6ebf40, 0x4c614730,\n    0x21044f65, 0x6da16139, 0x08496d21, 0xa50bd2fb, 0xf7ff2000, 0x2801ffed,\n    0xf7ffd1f6, 0x60b8ffe9, 0xffe6f7ff, 0x8808f380, 0xffe2f7ff, 0xf7ffa501,\n    0x46c0ffdf, 0x61392100, 0xe75d4780, 0x6d20bf20, 0xd3fb0840, 0x28006da0,\n    0x4770d0de, 0x43372601, 0xbe0047b8, 0x3811e7fa, 0xbd007ac0, 0x4042b500,\n    0xf0002a00, 0xd2f6f802, 0x4670468e, 0x00204700, 0x00002b69, 0x00002b65,\n    0x00002c31, 0x00002cfd, 0x00002827, 0x00002827, 0x00002db1, 0x0000284d,\n    0x0000284f, 0x00002881, 0x00002883, 0x000028d7, 0x000028d9, 0x000028e7,\n    0x000028e9, 0x000029bf, 0x00002975, 0x000029dd, 0x00000031, 0x000029e5,\n    0x00002a4f, 0x0000280b, 0x00002a73, 0x000028af, 0x000028b1, 0x0000289d,\n    0x0000289f, 0x00003581, 0x00003583, 0x0000358b, 0x0000358d, 0x0000363d,\n    0x00002e61, 0x00002e55, 0x00002fbd, 0x00003119, 0x0000346b, 0x0000346b,\n    0x000032dd, 0x00003565, 0x00003567, 0x00003573, 0x00003575, 0x000036c3,\n    0x000036c5, 0x000036bb, 0x000036bd, 0x00003831, 0x00003841, 0x00003811,\n    0x00000031, 0x00003b45, 0x00003be1, 0x0000346f, 0x00003931, 0x000036d1,\n    0x000036d3, 0x000036cb, 0x000036cd, 0x000035c1, 0x000035c3, 0x000035db,\n    0x000035dd, 0x00003663, 0xf380480a, 0xf0018808, 0x0000ff1b, 0x40004000,\n    0x400080a0, 0xd0000000, 0x40064008, 0x01000000, 0x4005801c, 0xb007c0d3,\n    0xe000ed00, 0x501008b0, 0x08424933, 0x0883400a, 0x4008400b, 0x18c01880,\n    0x184008c1, 0x4008492f, 0x18400981, 0x4348492e, 0x47700e80, 0x08514a2d,\n    0x00434051, 0x4008400b, 0x43180840, 0x40130083, 0x08804010, 0x4a284303,\n    0x40100118, 0x091b4013, 0xba004318, 0xa3254770, 0xd10c0c01, 0xd1040a81,\n    0xd1050901, 0x301a5c18, 0x5c584770, 0x47703010, 0x30165c58, 0x0a884770,\n    0x0908d104, 0x5c58d104, 0x4770300a, 0x47705c18, 0x30065c18, 0xa3274770,\n    0xd00f0401, 0xd0050188, 0xd0070181, 0x31100f09, 0x47705c58, 0x5c580e89,\n    0x4770300a, 0x5c180e80, 0x47703004, 0xd0060181, 0xd0080188, 0x30100f00,\n    0x30105c18, 0x0e804770, 0x301a5c18, 0x0e894770, 0x30145c58, 0x00004770,\n    0x49249249, 0xc71c71c7, 0x04004004, 0xcccccccc, 0xf0f0f0f0, 0x04040506,\n    0x03030303, 0x02020202, 0x02020202, 0x01010101, 0x01010101, 0x01010101,\n    0x01010101, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n    0x00000000, 0x00000000, 0x00000000, 0x00010006, 0x00010002, 0x00010003,\n    0x00010002, 0x00010004, 0x00010002, 0x00010003, 0x00010002, 0x00010005,\n    0x00010002, 0x00010003, 0x00010002, 0x00010004, 0x00010002, 0x00010003,\n    0x00010002, 0x20e10031, 0x1c492169, 0x1dcd1ba9, 0xbe0022fd, 0x68934a02,\n    0x60933b40, 0x46c04770, 0x50100a7c, 0x7d934a02, 0x4a027513, 0x47706013,\n    0x501009ec, 0x50110000, 0x60012300, 0x60426103, 0x60c3784b, 0x47706083,\n    0x68834904, 0x741a2201, 0x781b681b, 0x43135acb, 0x00004718, 0x0000043c,\n    0xb5706803, 0xd0021e19, 0x230f7899, 0x24004019, 0x4a122500, 0x189a00cb,\n    0x60556014, 0x4e100004, 0x8b323428, 0x78258282, 0x2d002440, 0x1924d000,\n    0x83341914, 0xd00e2900, 0x2d002154, 0x3120d000, 0x30290649, 0x78011852,\n    0x181b4806, 0xd0032900, 0x2200601a, 0xbd70605a, 0xe7fb6019, 0x50100080,\n    0x501009ec, 0x50100000, 0x1c45b530, 0x77e9b2c9, 0x702a3528, 0x000382c3,\n    0x7824ac03, 0x701c3328, 0x00492301, 0x1889405a, 0x77d91cc3, 0xbe00bd30,\n    0xb5f00013, 0x000c0006, 0xb0850015, 0x60013308, 0x78239303, 0x786318e4,\n    0xd1fa2b05, 0x79217963, 0x430b021b, 0x2101270f, 0x910078a2, 0x00394017,\n    0x09d26828, 0xffd0f7ff, 0x4a05cd08, 0x601c00bf, 0x9b0350bb, 0xd1e442ab,\n    0xb0050030, 0x46c0bdf0, 0x50100a08, 0x7fdb1c43, 0x78023029, 0x00db4903,\n    0x2a001858, 0x4a02d001, 0x47701898, 0x50100084, 0x50100080, 0x0006b570,\n    0x00047f83, 0x2b003618, 0x8ac3d11f, 0x00037743, 0x78193329, 0x29001d43,\n    0x1d83d100, 0x8aa37fdd, 0x1e50002a, 0x480a4182, 0x181b0192, 0x61a3189b,\n    0x42992300, 0x0020d106, 0xffd0f7ff, 0x1945006d, 0xb2db882b, 0x23017723,\n    0x003077a3, 0x46c0bd70, 0x50100000, 0xb5702200, 0x77da1dc3, 0x00043301,\n    0x42907fd8, 0x2380d12f, 0x431900db, 0x33290023, 0x2b00781b, 0x2380d002,\n    0x4319021b, 0x7fd31ca2, 0x001d2601, 0x41851e68, 0x77d34073, 0x036d0020,\n    0xf7ff430d, 0x1d63ffa3, 0xb2ad7fda, 0x188040b2, 0x80052200, 0x77a21d21,\n    0x3a017fca, 0x68a177ca, 0x688a3428, 0x608a3a01, 0x2a007822, 0x7fdad002,\n    0x77de4056, 0x20a0bd70, 0x43010140, 0xe7cd77da, 0x0004b570, 0x2b0068a3,\n    0x689bd015, 0xd0122b00, 0x7ff51d26, 0xd00e2d00, 0x7fdb1de3, 0xd10a2b00,\n    0x33290023, 0x2b00781b, 0x0020d006, 0xfef0f7ff, 0x42ab7ff3, 0xbd70d1e6,\n    0x8ae10020, 0xffa2f7ff, 0xb570e7e0, 0x0004000d, 0x00280011, 0xf7ff001a,\n    0x2300fed7, 0x330160e3, 0x002060a5, 0xf7ff74ab, 0xbd70ffcf, 0x0003b510,\n    0x49034a02, 0xf7ff4803, 0xbd10ffe8, 0x00003f59, 0x50100a24, 0x50100dc0,\n    0x68836841, 0x428bb510, 0x2300d003, 0xf7ff680a, 0xbd10ffd8, 0xb5100003,\n    0x7fdb3333, 0x2b00302c, 0xf7ffd101, 0xbd10ffed, 0xb5700003, 0x781b3329,\n    0x000d0004, 0x2b000016, 0xf7ffd003, 0x2300ff37, 0x00337103, 0x00200029,\n    0xf7ff4a01, 0xbd70ffba, 0x00003f59, 0x2200b510, 0x48034902, 0xffe4f7ff,\n    0x46c0bd10, 0x501009c4, 0x50100f68, 0x2200b510, 0x48034902, 0xffd8f7ff,\n    0x46c0bd10, 0x501009d8, 0x50100f94, 0x4b03b510, 0x49044a03, 0xf7ff4804,\n    0xbd10ff98, 0x0000075d, 0x00003f59, 0x501009c4, 0x50100f68, 0x1dc3b510,\n    0x68817fda, 0xd1052a00, 0x2b0068cb, 0x7c0bd10a, 0xd1072b00, 0x23002401,\n    0x608374cc, 0xd002429a, 0x608b60cb, 0x684bbd10, 0xd0012b00, 0xe7f94798,\n    0x2b0068c3, 0x6083d0f6, 0x749c60c2, 0xff4cf7ff, 0xbe00e7f0, 0x1dc6b570,\n    0x00047ff3, 0x2b00000d, 0x1c43d11a, 0x2b007fdb, 0x0003d107, 0x781b3329,\n    0x4153425a, 0x33014a0a, 0x00206693, 0xfebaf7ff, 0x68022380, 0x4313011b,\n    0x77f56003, 0x2b006923, 0x0020d001, 0xbd704798, 0xd2fc428b, 0xe7fa77f1,\n    0x50112000, 0x2800b570, 0x4b18d00e, 0x58c40080, 0x7fcb1d21, 0x77cb3301,\n    0x2d0068a5, 0x2102d109, 0xf7ff0020, 0xbd70ffc7, 0x29004c11, 0x4c11d1f0,\n    0x7c2be7ee, 0xd0022b00, 0x746b2301, 0x1da3e7f3, 0x332377da, 0x2b00781b,\n    0x68abd002, 0xd0022b00, 0xf7ff0020, 0x7cebfe01, 0xd1e42b00, 0x002068eb,\n    0x60eb3b01, 0xff82f7ff, 0x46c0e7dd, 0x50100a08, 0x50100f68, 0x50100f94,\n    0xb5702300, 0x00046885, 0xf7ff742b, 0x7cebff73, 0xd11b2b00, 0x36290026,\n    0x2b007833, 0x0020d003, 0xf7ff7f21, 0x2300fe97, 0x7c6a77a3, 0xd00e429a,\n    0x1d22746b, 0x3b017fd3, 0x220177d3, 0x7fdb1da3, 0x78313401, 0x405a7fe0,\n    0xffa0f7ff, 0x0020bd70, 0xfebef7ff, 0xbe00e7fa, 0x0004b5f8, 0xfe3ef7ff,\n    0x68020025, 0x35284b19, 0xd01d421a, 0x2b00782b, 0x1d23d003, 0x2b017fdb,\n    0x2301d104, 0x7fd11ca2, 0x77d3404b, 0x7fda1ce3, 0x40932301, 0x4a114910,\n    0x4e124811, 0x660b6653, 0x423b6e77, 0x3801d102, 0xd1112800, 0x66536613,\n    0xf7ff0020, 0x782bfe17, 0x1e592200, 0x1d21418b, 0x60023301, 0x230177cb,\n    0x340884a2, 0xbdf877e3, 0xe7e5660b, 0x04000400, 0x50112000, 0x50113000,\n    0x000186a0, 0x50110000, 0x4d08b570, 0xf7ff0028, 0x4c07ffb7, 0xf7ff0020,\n    0x0028ffb3, 0xf7ff2101, 0x2101ff21, 0xf7ff0020, 0xbd70ff1d, 0x50100f68,\n    0x50100f94, 0x2500b570, 0x000e6085, 0xf7ff0004, 0x42aeff9f, 0x1ca2d001,\n    0x77a577d5, 0x7fd11de2, 0xd0052900, 0x692377d5, 0xd0012b00, 0x47980020,\n    0x7d5b4b07, 0xd0092b00, 0x29006861, 0x68a3d006, 0xd1032b00, 0x680a0020,\n    0xfe5ff7ff, 0x46c0bd70, 0x501009ec, 0x4b1eb510, 0x601c4c1e, 0x4b1e2480,\n    0x601c05e4, 0x04e424e0, 0x4b1c601c, 0xd02c2800, 0x43202401, 0x61dc4c1a,\n    0x426469dc, 0x621c4044, 0x62986259, 0x008921fa, 0x605a434a, 0x68114a15,\n    0x42112202, 0x4914d10b, 0x68094814, 0x2103404a, 0x4913400a, 0x2204600a,\n    0x42116b81, 0x220cd0fc, 0x4b1062da, 0x32ff32f5, 0x2280601a, 0x05d24b0e,\n    0x2201601a, 0x701a4b0d, 0x61d8bd10, 0x46c0e7da, 0x40010008, 0x0001fffc,\n    0x4005b000, 0x40058000, 0xb007c0d3, 0x4006c000, 0x40008030, 0x40008000,\n    0x40009030, 0x4005a02c, 0x4005a000, 0x50100eb4, 0x0004b570, 0x20001845,\n    0xd20142ac, 0xd0002800, 0x4b04bd70, 0x681b0020, 0x479868db, 0x015b2380,\n    0xe7f118e4, 0x50100dbc, 0x061222e0, 0x22841881, 0x02d20003, 0x42912001,\n    0x22ebd907, 0x189b0612, 0x20002280, 0x429a01d2, 0x47704140, 0x1d85b530,\n    0xb2e20f0c, 0x33370013, 0xd8002c09, 0x70033b07, 0x01093001, 0xd1f342a8,\n    0xbe00bd30, 0xb5102200, 0x48064b05, 0x7a1b725a, 0xd8002b7f, 0x4a054804,\n    0xf7ff4905, 0xbd10fdf5, 0x50100ab8, 0x50100e58, 0x50100e24, 0x00000b5d,\n    0x501008b0, 0x6a024b04, 0xb5106cdb, 0xd101429a, 0xffe0f7ff, 0x46c0bd10,\n    0x50100ac8, 0x4804b510, 0x7fdb1dc3, 0xd1012b00, 0xfdc2f7ff, 0x46c0bd10,\n    0x50100e58, 0x48040003, 0xd8032b03, 0x3b014a03, 0x5898009b, 0x46c04770,\n    0x00003db7, 0x00003ee8, 0x02004b02, 0x681b6018, 0x46c04770, 0x4001800c,\n    0x0004b570, 0x000d2002, 0xfff2f7ff, 0x230422c0, 0x43290621, 0x0e080552,\n    0x66103b01, 0x2b000209, 0xbd70d1f9, 0x4a044b03, 0x00016018, 0x43996893,\n    0x4770d1fb, 0x4000f000, 0x4000c000, 0x3029b5f7, 0x4c7a7803, 0xd00a2b00,\n    0x60632301, 0x8510f3ef, 0x0020b672, 0x479868a3, 0x8810f385, 0x4b74bdf7,\n    0x781b2007, 0xd1092b00, 0x7fde1d63, 0xb25b7fdb, 0xda252b00, 0x07eb68e5,\n    0x2005d502, 0xe7e56060, 0xf7ff0028, 0x2800ff55, 0x2004d101, 0x23ebe7f6,\n    0x061b2780, 0x01ff18eb, 0xd9f642bb, 0x301c0028, 0xff46f7ff, 0xd0f02800,\n    0x18eb4b62, 0xd9ec42bb, 0x0028221c, 0xf0014960, 0x4b60fcf3, 0x601a68e2,\n    0xd50e06f3, 0x7fd91da3, 0x1e53000a, 0x4b5c419a, 0x3329b2d2, 0x2902701a,\n    0x2201d103, 0x33074b59, 0x07f377da, 0x0673d418, 0x230ad41d, 0xd00c421e,\n    0x7fda1de3, 0x33080023, 0x4b537fd9, 0xd0032900, 0x20067819, 0xd1b94291,\n    0x07b3701a, 0x230cd410, 0xd125421e, 0xe7b12000, 0x681b4b48, 0x4798689b,\n    0xd0e02800, 0x2301e7aa, 0x431368e2, 0xe7dc4798, 0x05036920, 0x6961d1a1,\n    0xd19e050b, 0x228025f0, 0x1943062d, 0x42930552, 0x1843d89f, 0x4293195b,\n    0x4b3ad89b, 0x691b681b, 0x28004798, 0xe78dd0d7, 0x002868e5, 0xfee4f7ff,\n    0xd0052800, 0x18e869e3, 0xfedef7ff, 0xd11e1e07, 0xd40a0733, 0x01922280,\n    0xd2064295, 0x18eb69e3, 0xd3004293, 0x2701e77d, 0x21f0e011, 0x06092280,\n    0x0552186b, 0xd9004293, 0x69e3e773, 0x185b18eb, 0xd9004293, 0xb2efe76d,\n    0xd0002f00, 0x0733e761, 0x4b20d518, 0x469c69a1, 0x2f00681b, 0x69e2d023,\n    0x42ab9501, 0x9301d900, 0x18a8331c, 0xd2004283, 0x9b010018, 0xd2024283,\n    0x4b154660, 0x00286003, 0xfc5af001, 0xd5070773, 0x69a068e3, 0xd0102f00,\n    0x69e20019, 0xfc50f001, 0xd58706b3, 0x681b4b0d, 0x4798685b, 0x0028e736,\n    0x4798695b, 0xd0e92800, 0x4a08e730, 0x68120001, 0x69920018, 0x28004790,\n    0xe727d0ea, 0x50100d8c, 0x50100eb4, 0xeb00001c, 0x00003ecc, 0x50100dbc,\n    0x50100fc0, 0x50100a7c, 0x50100a1c, 0x6a46b5f8, 0x00330004, 0x781b3329,\n    0x2b000030, 0xf7ffd023, 0x6963fbcd, 0x001f69e2, 0x69a00005, 0x37401e51,\n    0x40192240, 0xd9004287, 0x712a1ac2, 0x68286a23, 0xf0011859, 0x792bfc0d,\n    0x00206962, 0x616318d3, 0x681b6aa3, 0x4b064798, 0x681a0030, 0x601a4b05,\n    0xfd2ef7ff, 0xf7ffbdf8, 0x0005fba9, 0x46c0e7eb, 0x50100f64, 0xd0000018,\n    0x4c0cb570, 0x6ce26a03, 0x42930005, 0x6843d111, 0x60734e09, 0xd0052b00,\n    0x6a602102, 0xfcb2f7ff, 0x72732300, 0x6ba269eb, 0x18d30020, 0xf7ff63a3,\n    0xbd70ffb1, 0x50100ac8, 0x50100ab8, 0x0004b570, 0x4d0a2601, 0x4b0a7568,\n    0x58d000b2, 0xd0022800, 0xf7ff2101, 0x3601fd7f, 0xd1f42e05, 0x41841e60,\n    0x0028686b, 0x4798b2e1, 0x46c0bd70, 0x501009ec, 0x50100a08, 0x2000b510,\n    0xffe0f7ff, 0x4a052300, 0x4a057513, 0x22016013, 0x42524b04, 0x651a659a,\n    0x46c0bd10, 0x501009ec, 0x50110000, 0x50113000, 0x4b0e2220, 0x601ab510,\n    0x68184b0d, 0x061b23d0, 0x62586158, 0xfa27f7ff, 0x4b0a2240, 0x009b18c3,\n    0x430a6819, 0x601a2180, 0x438a681a, 0x4b06601a, 0x230518c0, 0x604300c0,\n    0x46c0bd10, 0x4000f000, 0x50100f64, 0x10007001, 0x08002800, 0x000ab510,\n    0xf0012100, 0xbd10fbc7, 0xb5704b11, 0x4c11781a, 0xd1072a00, 0x49114a10,\n    0x60116322, 0x61224a10, 0x701a2201, 0x21284d0f, 0xf7ff0028, 0x2370ffe7,\n    0x3b66736b, 0x2500752b, 0x00294b0b, 0x611d0020, 0xfd10f7ff, 0x00290020,\n    0xf7ff302c, 0xbd70fd0b, 0x50100e20, 0x50100dc0, 0x50100a38, 0x00003dda,\n    0x0000144d, 0x50100a7c, 0x50100d3c, 0x780b2260, 0x401ab510, 0x2a202400,\n    0xb25bd114, 0x42a3784a, 0x2afeda12, 0x884bd10e, 0xd10b42a3, 0x42a388cb,\n    0x4813d008, 0xfadef7ff, 0x701c6803, 0x71043401, 0xfbc4f7ff, 0xbd100020,\n    0xd1fb2aff, 0x2b00884b, 0x88cad1f8, 0x2a00001c, 0x4b0ad1f4, 0x7fd11dda,\n    0xd1012903, 0x77d13901, 0x781a3352, 0xd1012a03, 0x701a3a01, 0xff98f7ff,\n    0xf7ff2401, 0xe7e1fb8f, 0x50100f68, 0x50100dc0, 0x000db5f7, 0x00102180,\n    0x00140089, 0xff82f7ff, 0xd1202d00, 0x30c30020, 0x494f220b, 0xf00130ff,\n    0x23fffaf7, 0x005b2255, 0x4b4c54e2, 0x54e21892, 0x791a4b4b, 0xd1042a00,\n    0x6a924a4a, 0x2201601a, 0x0020711a, 0x30b9681b, 0x30ff9301, 0xa9012204,\n    0xfadef001, 0x2d01e023, 0x4b41d111, 0x2a00791a, 0x4a40d103, 0x711d6a92,\n    0x681b601a, 0x00202240, 0x9301493d, 0xfaccf001, 0x30270020, 0x2281e7e6,\n    0x00521eab, 0xd20c4293, 0xd9002b80, 0x2b003b81, 0x3b08d105, 0x33078023,\n    0x80a38063, 0x200080e3, 0x1f6bbdfe, 0x2b1f3bff, 0x2b00d839, 0x492ed1f7,\n    0x312b220b, 0xf0010020, 0x2328faab, 0x002372e3, 0x00202264, 0x4d2a4e29,\n    0x701a332d, 0x3a594929, 0x862585e6, 0x872586e6, 0xf0013020, 0x0023fa99,\n    0x332b2121, 0x23027019, 0x33ef8763, 0x002763e3, 0x22640023, 0x3740334e,\n    0x491f737a, 0x805d801e, 0x815d811e, 0x00383a59, 0xfa82f001, 0x21210023,\n    0x335a2203, 0x801a72f9, 0x65e3233e, 0x3d25e7bf, 0x076b3dff, 0x08edd1bb,\n    0x0022d110, 0x4813219f, 0xfa4ff001, 0x4d120020, 0x0029220c, 0xf0013062,\n    0x0020fa67, 0x0029220c, 0xe78130c2, 0xd1a62d01, 0x0020223e, 0xe77b490b,\n    0x00003df8, 0x000001ff, 0x50100db4, 0x40054000, 0x00003e6c, 0xffff8299,\n    0x00003925, 0x00003dac, 0x00003db8, 0x00003ffa, 0x50100eb5, 0x00003ef4,\n    0x4b85b5f0, 0x68120016, 0x9003b085, 0xd002429a, 0xb0052000, 0x4b81bdf0,\n    0x429a6872, 0x22fed1f8, 0x4b7f0052, 0x429a58b2, 0x68b3d1f2, 0xd5ef049a,\n    0x69f14a7c, 0xd1eb4291, 0x001d2201, 0x42134015, 0x2380d1e6, 0x005b6932,\n    0xd1e1429a, 0x003868f7, 0xfc62f7ff, 0xd0042800, 0x30ff0038, 0xfc5cf7ff,\n    0x69b30005, 0x2b004c70, 0x22f0d009, 0x18ba0612, 0x2d009201, 0x0011d106,\n    0x42914a6c, 0x2000d907, 0xe7c66120, 0x00119a01, 0x42914a68, 0xb2ffd802,\n    0xd1f42f00, 0x32294a66, 0x2a007812, 0x3201d1ef, 0x9202402a, 0x27086922,\n    0xd0354293, 0x21500020, 0xfe6cf7ff, 0x9a020023, 0x485e334c, 0x2d00701a,\n    0x20a8d101, 0x42690540, 0x23a04169, 0x42494d5a, 0x402900db, 0x606118c9,\n    0x602008c9, 0xfe56f7ff, 0x001a9b01, 0x429a4b51, 0x4854d806, 0x49554b54,\n    0x60e360a0, 0xfe4af7ff, 0x686269b3, 0xd9004293, 0x6123e786, 0x27002301,\n    0x9a01425b, 0x4b4761e3, 0x429361a7, 0x3708417f, 0x334c0023, 0x9a02781b,\n    0xd1ac4293, 0x69b26973, 0xd2a84293, 0x21280020, 0xf7ff3024, 0x0022fe2b,\n    0x32489b03, 0x62636971, 0x68f36163, 0x4a407017, 0x46942001, 0x228062e2,\n    0x64220052, 0x324a0022, 0x221f7010, 0x4090400a, 0x094a6825, 0x62210092,\n    0x18aa6323, 0x36206815, 0x900163e6, 0xd0004205, 0x2580e74a, 0x05ad69e6,\n    0xd20b42b3, 0x41bf42ab, 0x0038427f, 0x41bf42ae, 0x9702427f, 0x98020007,\n    0xd0034287, 0xd20242ae, 0xd30042ab, 0x002561e3, 0x782d354c, 0xd11a2d00,\n    0x05c9020e, 0x35010ec9, 0x0c71408d, 0x008968a6, 0x680e1871, 0xd10e422e,\n    0x031b0b1b, 0x23806363, 0x63a3015b, 0x431d680b, 0x0021600d, 0x31482302,\n    0x432b780d, 0x69a3700b, 0x33019801, 0x681361a3, 0x43180021, 0x4d0e4663,\n    0x35286010, 0x222862e3, 0x480b3124, 0xf001782b, 0x2001f93f, 0xbf407028,\n    0x7020344b, 0x46c0e6fd, 0x0a324655, 0x9e5d5157, 0x0ab16f30, 0xe48bff56,\n    0x50100d3c, 0x0fffff01, 0x50100fc0, 0x50100ec4, 0x0001dce0, 0x15003c3c,\n    0x00001e1e, 0x000003c3, 0x00001631, 0x000db570, 0xf8c8f7ff, 0x00290004,\n    0xf7ff6800, 0x6820fd97, 0xbd707125, 0xb5102200, 0x210d4c07, 0x48071da3,\n    0xf7ff77da, 0x220dffeb, 0xf0010021, 0x4804f905, 0xf94cf7ff, 0x46c0bd10,\n    0x50100a7c, 0x50100dc0, 0x00000705, 0x1dc3b510, 0x2b007fdb, 0x4b05d109,\n    0xd1064298, 0x33064b04, 0x2b007fdb, 0xf7ffd001, 0xbd10ffd9, 0x50100dc0,\n    0x50100a7c, 0x4a0cb510, 0x7fd91d53, 0xd1072901, 0x005b2380, 0x84934809,\n    0xf7ff3101, 0xbd10f9a7, 0xd1052902, 0x48052200, 0x302c77da, 0xf99ef7ff,\n    0xffbcf7ff, 0x46c0e7f3, 0x50100a7c, 0x50100dc0, 0xb5702300, 0x1d654c11,\n    0x622377eb, 0x33017b05, 0xd8002d7f, 0x429a3301, 0x1d62d007, 0x230277d3,\n    0xf7ff7323, 0x2000ffcf, 0x6883e00f, 0xd008428b, 0x77c21d60, 0xd201428b,\n    0x73222202, 0xd900428b, 0x2001000b, 0x2b006223, 0xbd70d0eb, 0x50100a7c,\n    0x7c82b5f8, 0x02127c43, 0x7cc3431a, 0x041b000f, 0x7d03431a, 0x061b7dc1,\n    0x7d824313, 0x43110209, 0xba494e20, 0xba1b0032, 0x2f01b289, 0x322cd000,\n    0x02494c1d, 0x003a6262, 0xf7ff62e3, 0x2800ffb9, 0x4b1ad029, 0x2d3f6a1d,\n    0x4a19d928, 0x68130020, 0x33014918, 0x233f6013, 0x4b17439d, 0x62a361a5,\n    0x4a174b16, 0x23806223, 0x61e3009b, 0x61632300, 0xff7ef7fe, 0x68a3353f,\n    0x195b09ad, 0x68e360a3, 0x60e5195d, 0xd1072f01, 0x00302300, 0x60f360b4,\n    0xf7ff74a7, 0xbdf8f86d, 0xe7fc63b4, 0xff6af7ff, 0x46c0e7f9, 0x50100dc0,\n    0x50100a4c, 0x50100a7c, 0x50100a20, 0x00003e17, 0x00003de4, 0x50100b1c,\n    0x00001475, 0x0005b570, 0xf7fe480c, 0x68a9ffe7, 0x00047903, 0xd9004299,\n    0x22010019, 0xf7ff0028, 0x2800ff67, 0x4a06d009, 0x6a134806, 0x68917123,\n    0x1acbb2db, 0xf7ff6093, 0xbd70f86d, 0x50100dc0, 0x50100a7c, 0x00001475,\n    0x4b082100, 0x1d5ab510, 0x688277d1, 0xd006428a, 0x22017b01, 0xd800297f,\n    0x33051892, 0xf7ff77da, 0xbd10ff25, 0x50100a7c, 0x68024b1a, 0xb5106959,\n    0x428a0004, 0x6840d111, 0xd10e2800, 0x6919699a, 0xd10a428a, 0x324c001a,\n    0x2a007812, 0x69d8d000, 0x491122fa, 0xf7ff0092, 0xcc0af9cd, 0x8410f3ef,\n    0x4a0eb672, 0x42916812, 0x2b00d111, 0x2201d00c, 0x731a4b0b, 0x73da3206,\n    0x765a3219, 0x769a3a1e, 0x77da3305, 0xfef2f7ff, 0xf7ff4806, 0xf384fbab,\n    0xbd108810, 0x50100d3c, 0x20042000, 0x50100a20, 0x50100a7c, 0x50100a4c,\n    0xb5102100, 0xf7ff480f, 0x480ff979, 0xf7ff2100, 0x480ef975, 0x2b007a43,\n    0x2280d003, 0x02924b0c, 0x2110601a, 0xfc36f7ff, 0x22004b0a, 0x33290019,\n    0x700a3128, 0x4b08701a, 0x33290019, 0x700a3128, 0xbd10701a, 0x50100e58,\n    0x50100e24, 0x50100ab8, 0x4001a01c, 0x50100fc0, 0x50100e84, 0x4b052280,\n    0xb5100292, 0x2900601a, 0xf7ffd003, 0xf7fffc19, 0xbd10ffc7, 0x4001a01c,\n    0x780b2260, 0xb5102000, 0x2a40401a, 0xb25bd113, 0x4283784a, 0x2a42da10,\n    0x88ccd10d, 0xd10a2c10, 0x48090021, 0xfe5af7ff, 0x49080022, 0xff74f000,\n    0xf80cf7ff, 0xbd102001, 0xd1fc2a41, 0xffa4f7ff, 0xffecf7fe, 0x46c0e7f6,\n    0x50100f68, 0x50100ab8, 0x4e18b5f8, 0x001524c0, 0x056446b4, 0x4316001e,\n    0xd103432e, 0xf7ff2003, 0xbdf8f9ff, 0x6a666a27, 0xd0152a00, 0x2f0d19bf,\n    0x1e07d812, 0x7807d001, 0x66273001, 0x2e003a01, 0x6e26d0e8, 0xd0012b00,\n    0xe7e33b01, 0xd0012900, 0x3101700e, 0xe7dd3d01, 0xd1f22e00, 0x27c04666,\n    0x02bf6836, 0xd0d5423e, 0x46c0e7d8, 0x4001801c, 0x000cb510, 0x20030001,\n    0xf9daf7ff, 0x23042280, 0x20000021, 0xf7ff0052, 0xbd10ffbf, 0xb51023f0,\n    0x18c0061b, 0xffecf7ff, 0xbd102000, 0x2002b510, 0xf9bef7ff, 0x220623c0,\n    0x661a055b, 0x23012200, 0x00100011, 0xffa8f7ff, 0xbe00bd10, 0x26c0b573,\n    0x05762401, 0xf7ff2002, 0x2305f9ab, 0x466b6633, 0x00221ddd, 0x00290023,\n    0xf7ff2000, 0x782bff95, 0xd0054223, 0x681a4b03, 0x029b23c0, 0xd0e9421a,\n    0x46c0bd73, 0x4001801c, 0x0005b570, 0xf7ff000c, 0x0029ffcd, 0xf7ff0020,\n    0x2200f993, 0x00112304, 0xf7ff0010, 0xf7ffff79, 0xbd70ffd1, 0xb51023f0,\n    0x18c0061b, 0xf7ff2120, 0x2000ffe7, 0xb570bd10, 0x000c0005, 0xffb2f7ff,\n    0x20020029, 0xf978f7ff, 0x23042280, 0x00202100, 0xf7ff0052, 0xf7ffff5d,\n    0xbd70ffb5, 0xb51023f0, 0x18c0061b, 0xffe7f7ff, 0xbd102000, 0x4b822280,\n    0x0452b5f0, 0x4a81601a, 0x68120006, 0xb085000d, 0xd4390792, 0x4a7e2003,\n    0x4c7f497e, 0x4a7f6011, 0x4a7f6010, 0x67a2487f, 0x3aff3aff, 0x6c606002,\n    0xd0fc4210, 0x00522280, 0x65a26422, 0x60114a7a, 0x29006851, 0x2080dafc,\n    0x60180140, 0xf94ef7ff, 0x4b762201, 0x601a2121, 0x609a3263, 0x02d222aa,\n    0x4a7360da, 0x68196011, 0xdafc2900, 0x60132308, 0x63e32300, 0x22012382,\n    0x6563011b, 0x601a4b6d, 0x6c622302, 0xd0fc421a, 0x04402080, 0xf92ef7ff,\n    0x4b69220c, 0x62da2180, 0x32f54b68, 0x601a32ff, 0x4b672201, 0x601a4867,\n    0xf7ff0149, 0x4b66fadf, 0x43eb601e, 0xd100079b, 0x2e002500, 0xf7ffd001,\n    0x4c62faaf, 0x00204b62, 0xf7ff6819, 0x4b61f8a7, 0x68191da0, 0xf8a2f7ff,\n    0x4c5f2601, 0xd01f2d00, 0x22204f5e, 0x00380021, 0xfe3ef000, 0x70bb2320,\n    0x26012300, 0x002b70fb, 0x93034033, 0xd0074235, 0x00380021, 0x31202217,\n    0xf0003009, 0x2600fe2d, 0x713b2301, 0x72fb2300, 0x003c9b03, 0xd1082b00,\n    0x4f4f0021, 0x00384a4f, 0xf7fe3109, 0x4b4efd91, 0x07ab607b, 0x2117d40f,\n    0x4e4c4371, 0x4a4c3109, 0x18610030, 0xfd84f7fe, 0x4a4b4b4a, 0x4a4b601a,\n    0x4b4b6053, 0x4b4b6073, 0xd1002d01, 0x4d4a3304, 0x60ec4a4a, 0x4f4a2400,\n    0x4b4a612b, 0x602a0021, 0x220160ab, 0x94002340, 0xf7fe0038, 0x4e46fd55,\n    0x00210022, 0x94002340, 0xf7fe0030, 0x2380fd4d, 0x005b0021, 0x832b0038,\n    0xfd12f7fe, 0x00212380, 0x0030005b, 0xf7fe832b, 0x23c0fd0b, 0x832b005b,\n    0x4b3a3401, 0x58d000a2, 0xd0022800, 0xf7fe2100, 0x3401fcff, 0xd1f42c05,\n    0x20004b35, 0x4b35606b, 0x001c4a35, 0x33040019, 0x42936008, 0x2309d1fa,\n    0x33036763, 0x3b0b67a3, 0xf7ff6423, 0x4b2ffa03, 0x64e34a2f, 0x601a4b2f,\n    0x4a2f2320, 0x4a2f6013, 0xf7fe6013, 0x46c0fbe5, 0x4000e000, 0x4006c000,\n    0x40060000, 0x00fab000, 0x40008000, 0x4000b030, 0x000001ff, 0x4000b03c,\n    0x40024000, 0x40028000, 0x4002b004, 0x4000a03c, 0x40058000, 0x4005a02c,\n    0x14003000, 0x50100000, 0x50100f64, 0x50100eb5, 0x40000040, 0x00000050,\n    0x00003e19, 0x50100d1c, 0x50100e18, 0x00003ddc, 0x00000fb5, 0x50100e50,\n    0x00003f38, 0x50100aa4, 0x00003dec, 0x50100e58, 0x00001729, 0x00003e64,\n    0x501009ec, 0x00003e50, 0x50100f68, 0x00000b75, 0x50100f94, 0x50100a08,\n    0x0000170d, 0x50110000, 0x50110084, 0x20010000, 0x000113f0, 0x50110090,\n    0xe000e280, 0xe000e100, 0xb5104b02, 0x691968d8, 0xfe98f7ff, 0x40058000,\n    0xb5f74b24, 0x4b24681a, 0x601a6884, 0x69e50002, 0x69633229, 0x1e6e7812,\n    0x9201401e, 0xd0152a00, 0xd0032e00, 0xf7ff0020, 0xbdf7f90d, 0x195969a2,\n    0xd9004291, 0x2d001ad5, 0x6aa3d0f4, 0x791b4a17, 0x5ad30028, 0x28004798,\n    0xe7eed0ec, 0xfcd2f7fe, 0x69a26961, 0x00073140, 0x429169e3, 0x0015d312,\n    0x400d1e59, 0xd100420a, 0x2e00001d, 0x69e1d103, 0xf7ff6a20, 0x6a23f993,\n    0x6839793a, 0xf0001998, 0xe7d8fd0b, 0x0033001d, 0x42ab3340, 0x9d01d2ed,\n    0x46c0e7eb, 0x50100f64, 0xd0000014, 0x0000043c, 0x0006b5f8, 0xfca6f7fe,\n    0x2b1f7903, 0xe0a0d000, 0x4b556805, 0x429a682a, 0xe09ad000, 0x2b007b6b,\n    0xe096d000, 0x337f7b29, 0x401a000a, 0xd0004219, 0x7babe08f, 0x2b0f3b01,\n    0xe08ad900, 0x4b4c4c4b, 0x686b6023, 0x68ab6063, 0x7beb60a3, 0xd0022b03,\n    0x766273e2, 0x270076a2, 0x2b237327, 0xd818d047, 0xd03b2b1a, 0x2b03d80d,\n    0x2b12d051, 0x42bbd025, 0x2301d05a, 0x33047323, 0x331b73e3, 0x23007663,\n    0x2b1be05c, 0x2b1ed05c, 0x0028d1f3, 0xfc98f7ff, 0x2b2ae00a, 0xd80bd029,\n    0xd0312b25, 0x2b282101, 0x0028d1e7, 0xfc08f7ff, 0xf7fe0030, 0xbdf8fdd5,\n    0xd0ea2b2f, 0xd0e82b35, 0x2124e7db, 0xf7ff482d, 0x2119fb7d, 0x482c0004,\n    0x18400022, 0xfc75f000, 0x70632380, 0xf7ff0028, 0xe7e5fc51, 0x48252104,\n    0xfb6cf7ff, 0x60032303, 0x2102e7f4, 0x210ce7d9, 0xf7ff4820, 0x220cfb63,\n    0xf0004920, 0xe7e9fc7d, 0x481c2108, 0xfb5af7ff, 0x491d2208, 0x2112e7f5,\n    0xf7ff4818, 0x0021fb53, 0x310d2212, 0xfc6cf000, 0x766773e7, 0xe7d576a7,\n    0x7fd21de2, 0xd0ac2a00, 0x73222201, 0x73e21892, 0x76623238, 0xe7a476a3,\n    0x7ceb2203, 0x2b024013, 0x3407d19f, 0x77e33b01, 0x4c08e79b, 0x00202103,\n    0xfd1cf7fe, 0x21030020, 0xf7fe302c, 0xe79ffd17, 0x43425355, 0x50100a7c,\n    0x53425355, 0x50100dc0, 0x00003f40, 0x00003e0b, 0x00003e03, 0x4b09b510,\n    0x6a5a4c09, 0x78123229, 0xd1002a00, 0x4a084c07, 0x1c486811, 0x60106ad9,\n    0x62da1c4a, 0x47a04a05, 0x46c0bd10, 0x50100a4c, 0x00001031, 0x000011b9,\n    0x50100a20, 0x50100b1c, 0x4baab5f7, 0x9301681b, 0xd40003db, 0xf3bfe088,\n    0x4fa78f5f, 0x00382100, 0xf7fe2401, 0x4ea5fdc3, 0x00302100, 0xfdbef7fe,\n    0x1cb3211f, 0x4aa277dc, 0x77dc1cbb, 0x00157813, 0x42a14019, 0xe0a2d100,\n    0xd1002902, 0x2900e0ca, 0x3160d157, 0xd154420b, 0x2b00b25b, 0x0038da4c,\n    0xfb9cf7fe, 0x0007786b, 0x2b066806, 0x2b08d00d, 0x2b00d03e, 0x8033d145,\n    0x88eb1924, 0xdd0042a3, 0x713b0023, 0xfc76f7fe, 0x8868e04a, 0x2b020a03,\n    0x2b03d00d, 0x2b01d016, 0x4b8ad133, 0x68192412, 0xd0ea2900, 0x00300022,\n    0xfbcaf000, 0xb2c0e7e5, 0xd1262800, 0x68d94b83, 0x788b78cc, 0x431c0224,\n    0xe7efd0db, 0x2800b2c0, 0x4b7ed00f, 0x689b2402, 0x30014798, 0x781b1e43,\n    0xd1032b00, 0x70343303, 0xe7ca7073, 0x34025333, 0x2404e7f3, 0xe7d94976,\n    0x7d5b4b74, 0xe7c07033, 0x2b057853, 0x2b09d004, 0xf7fed038, 0xe00bfd3d,\n    0x56d32302, 0x2b008851, 0x4b6cddf7, 0x75990038, 0x496d4a6c, 0xfbfcf7fe,\n    0x4b6c2280, 0x651a0292, 0x06db9b01, 0x2600d50a, 0x4f692401, 0x2d006dbd,\n    0x2e0ad004, 0xe082d000, 0x659d4b64, 0x04db9b01, 0xf7fed505, 0x2280ffbf,\n    0x03124b60, 0x23f8651a, 0x009b9a01, 0xd008421a, 0x6d1b4b5d, 0xdb002b00,\n    0x2280e07e, 0x06124b59, 0xbdf7651a, 0x28007890, 0x4b52d004, 0x795b68db,\n    0xd1be4283, 0xff86f7fe, 0xfbdcf7fe, 0x8893e7c8, 0x7d514a4c, 0xd0b42900,\n    0x420b21fe, 0x6912d1b1, 0x009bb2db, 0x28005898, 0x6843d0ab, 0xd1142b00,\n    0x782b2260, 0xd1a44213, 0x0a1288aa, 0xb25bd1a1, 0xda9e2b00, 0x2c00786c,\n    0x0038d19b, 0xfae6f7fe, 0x601c6803, 0x71032302, 0x0029e754, 0x28004798,\n    0xe7e5d19e, 0x2a008892, 0x2a80d041, 0x4935d060, 0x29007d49, 0xe784d100,\n    0x00a04938, 0x68065840, 0x42b278b6, 0x3401d034, 0xd1f62c05, 0x7869e779,\n    0xd00a2901, 0xd0002903, 0x886be773, 0xd0002b00, 0x2102e76f, 0xfbdaf7fe,\n    0x886be7ae, 0xd0002b00, 0x1dc2e767, 0x2a027fd2, 0xf7fed802, 0xe7a3fcb7,\n    0x77c33002, 0x422ce7a0, 0x2101d00b, 0x4b216dfa, 0x659c4022, 0x1e530870,\n    0x43b1419a, 0xfbe6f7fe, 0x006443a5, 0xe7663601, 0xff30f7fe, 0x0030e781,\n    0x42132260, 0xe744d000, 0x2b00b25b, 0x786bdac7, 0xd0002b00, 0x886be73d,\n    0xd0002b00, 0x88ece739, 0xd0002c02, 0x2501e735, 0x7fc33007, 0x429d0038,\n    0xf7fe41ad, 0x6803fa7b, 0x601d426d, 0xe6e97104, 0xe7dd0038, 0x50110098,\n    0x50100f68, 0x50100f94, 0x50100000, 0x501009ec, 0x00003f32, 0x0000045d,\n    0x501009c4, 0x50113000, 0x50110000, 0x50100a08, 0xf7feb510, 0xbd10fbdd,\n    0x4a1ab5f8, 0x601a4b1a, 0x8510f3ef, 0xf3bfb672, 0x4c188f5f, 0x37280027,\n    0xb2de783b, 0xd1132b00, 0x8810f385, 0x8510f3ef, 0xf3bfb672, 0x4c128f5f,\n    0x37280027, 0x2b00783b, 0x2228d013, 0x480f0021, 0xfa8af000, 0xe006703e,\n    0x00212228, 0xf000480b, 0x2300fa83, 0xf385703b, 0x00208810, 0xfd4af7fe,\n    0xf385e7d2, 0xbf208810, 0x46c0e7ce, 0x00003ecc, 0x50100dbc, 0x50100fc0,\n    0x50100e84, 0x50100d8c, 0x9001b5f7, 0xfa16f7fe, 0x2b207903, 0xe09ed000,\n    0x4b536806, 0x429a6832, 0xe098d000, 0x21284c51, 0x302c0020, 0xfedaf7fe,\n    0x68134a4f, 0x60133b01, 0x62e36872, 0x7a3364e2, 0x4b4c9300, 0x601a9900,\n    0x725a2200, 0x605a3201, 0x72196932, 0x63a263e2, 0x00224694, 0x32516971,\n    0x7c306421, 0x227f7010, 0x40029800, 0x28081e50, 0xe070d900, 0x43422003,\n    0x7a77483f, 0x42af5c85, 0x2500d161, 0x605d1880, 0x78407843, 0xb240000d,\n    0xdb002800, 0x68f3001d, 0xd15642ab, 0x189a4b36, 0x78979b00, 0xd1092b02,\n    0x69b24660, 0xfbf6f7fe, 0xfc80f7fe, 0xf7fe9801, 0xbdf7fb43, 0xd0472f00,\n    0x33500023, 0x0023701f, 0x26012202, 0x701a3352, 0x725e4b28, 0xd0282d00,\n    0x4a294b28, 0x62236463, 0x005b2380, 0x230061e3, 0x616362a2, 0x61a54a25,\n    0x49250020, 0xf90cf7fe, 0x68a3353f, 0x195b09ad, 0x68e360a3, 0x195d003a,\n    0x60e52308, 0x421f401a, 0x4b1ed003, 0x60dc6263, 0x481de7cc, 0x626074a6,\n    0x60c26084, 0xf9f4f7fe, 0x481ae7c4, 0x00050021, 0x35284b19, 0x22286363,\n    0x782b312c, 0xf9d0f000, 0xbf40702e, 0x2202e7b6, 0x9b00e004, 0xd0ab2b02,\n    0x4b082203, 0x2102605a, 0xf7fe480d, 0x2102fa8f, 0xf7fe480a, 0xe7a5fa8b,\n    0x431fd10b, 0x50100ac8, 0x50100eb0, 0x50100ab8, 0x00003eac, 0x501008c4,\n    0x00003df0, 0x00000b15, 0x00003e17, 0x50100e58, 0x50100e24, 0x50100e84,\n    0x00000b45, 0x4c09b570, 0x64a04b09, 0x00214809, 0x63630005, 0x22283528,\n    0x782b312c, 0xf994f000, 0x70282001, 0x3453bf40, 0xbd707020, 0x50100ac8,\n    0x00000e59, 0x50100e84, 0x220023c0, 0x609a055b, 0x49054a04, 0x001a601a,\n    0x601132f4, 0x609a2201, 0x46c04770, 0x001f0300, 0x03000218, 0xf7ffb510,\n    0x2000ffeb, 0xbe00bd10, 0x230122a0, 0x0552b510, 0x68526053, 0x20004a02,\n    0xf7fe6013, 0xbd10fc0d, 0x14002000, 0x0004b5f8, 0x001f0015, 0x42b41846,\n    0x22c0d205, 0x02924b0c, 0x4213681b, 0xbdf8d000, 0x421c1e6b, 0x1b33d108,\n    0xd30542ab, 0x00390020, 0xfa5ef7ff, 0xe7ea1964, 0x21200020, 0xfa58f7ff,\n    0x015b2380, 0xe7e218e4, 0x4001801c, 0x0005b5f8, 0x0004000f, 0x1b791886,\n    0x42b41909, 0x22c0d205, 0x02924b05, 0x4213681b, 0xbdf8d000, 0x34010020,\n    0xfa59f7ff, 0xe7ee34ff, 0x4001801c, 0xb5f02301, 0x425bb085, 0x803baf03,\n    0x220023c0, 0x609a055b, 0x6c9a6a9a, 0x615a2206, 0x02d222e0, 0x2201601a,\n    0x611a4c1f, 0x6826609a, 0x0032238c, 0x439a2584, 0x43152003, 0xfbb0f7fe,\n    0x93012302, 0x60252380, 0x6065011b, 0x60e560a5, 0xd1fd3b01, 0x22042300,\n    0x00180019, 0xf994f7ff, 0x2108230c, 0x2002439d, 0xf7fe430d, 0x9901fb99,\n    0xd1162901, 0x6026220c, 0x43966066, 0x26080033, 0x60a6431e, 0x60e62002,\n    0xfb8af7fe, 0x22022300, 0x00380019, 0xf978f7ff, 0x4b042200, 0xb005601a,\n    0x2301bdf0, 0x46c0e7cd, 0x40020008, 0x4001800c, 0x4b072090, 0xb5100080,\n    0xf7fe6018, 0x2200fb8b, 0x605a4b04, 0x615a60da, 0x625a61da, 0xbd1062da,\n    0x4000e000, 0x40018000, 0xf7ffb510, 0xf7ffffe9, 0x4b04ff91, 0x2b00681b,\n    0xf7fed001, 0x2000fd0d, 0x46c0bd10, 0x50100f64, 0x4a2bb5f8, 0x60134b2b,\n    0x60134a2b, 0x4b2b2202, 0x4213681b, 0x2105d008, 0x60194b29, 0x061b23d0,\n    0x641a631a, 0x641a2200, 0x005b23c8, 0xd1fd3b01, 0x240920d0, 0x25042200,\n    0x06002101, 0x3b01002b, 0x6883d1fd, 0x085b3c01, 0x18d2400b, 0xd1f52c00,\n    0xd9232a04, 0xf7ff26c0, 0xf7ffffaf, 0x0576ff57, 0x22c02700, 0x683360b7,\n    0x43934d16, 0x4313b2e2, 0x23016033, 0x60b30029, 0xf7ff0038, 0x2201f93d,\n    0x002821fc, 0xf0004252, 0x4b0ff833, 0x4298681b, 0x2380d008, 0x019b3440,\n    0xd1e1429c, 0x00082100, 0xf9a4f7ff, 0xfee8f7ff, 0x46be3501, 0x46c04728,\n    0x4000e000, 0x00200240, 0x4000f000, 0x4006c000, 0x4001800c, 0x20041f00,\n    0x20041ffc, 0xb5104b05, 0x60d8220a, 0x48046119, 0xf7fe4904, 0xbf30fa1b,\n    0x46c0e7fd, 0x40058000, 0x00001b99, 0x20042000, 0x1809b530, 0xe00c4d5d,\n    0xba137804, 0x0624405c, 0x00642308, 0x406cd300, 0xd1fa3b01, 0x40620212,\n    0x42883001, 0x1c10dbf0, 0xb530bd30, 0x5c434249, 0x0a1c3201, 0xd10541ad,\n    0x3101b25d, 0x41aa5c44, 0x5d631b14, 0x35015553, 0x3101d1fb, 0xbd30d1ef,\n    0x2a084684, 0xb470d33a, 0x3a01e01c, 0x54835c8b, 0x4660d1fb, 0x46c04770,\n    0x2a084684, 0x1a43d32e, 0xd1f2079b, 0x1a09b470, 0x08431c05, 0x5c44d302,\n    0x30017004, 0xd3020883, 0x80045a44, 0x18093002, 0x19521a2d, 0xd3033a10,\n    0xc078c978, 0xd2fb3a10, 0xd3010752, 0xc018c918, 0xd3010052, 0xc008c908,\n    0x0052d009, 0x880bd304, 0xd0048003, 0x30023102, 0x780bd001, 0xbc707003,\n    0x47704660, 0x0092a309, 0x33011a9b, 0x46c04718, 0x7183798b, 0x7143794b,\n    0x7103790b, 0x70c378cb, 0x7083788b, 0x7043784b, 0x7003780b, 0x47704660,\n    0xb2c94684, 0x4319020b, 0x46c0e011, 0x2a084684, 0x0843d32a, 0x7001d301,\n    0xb2c93001, 0x4319020b, 0xd3010883, 0x30028001, 0x1a1b4663, 0xba0b18d2,\n    0x1c0b4319, 0xd3073a10, 0x1c0cb430, 0x46c01c0d, 0x3a10c03a, 0xbc30d2fc,\n    0xd3000752, 0x0052c00a, 0xc002d300, 0x0052d006, 0x8001d302, 0x3002d002,\n    0x7001d000, 0x47704660, 0x1a9ba305, 0x33011a9b, 0x71814718, 0x71017141,\n    0x708170c1, 0x70017041, 0x47704660, 0x04c11db7, 0x4608b505, 0xbd0a461a,\n    0x02400dc2, 0x24010a40, 0x432005e4, 0xb2d22aff, 0x4240d900, 0x2afe3a01,\n    0x3a7ed201, 0x28004770, 0xd5004620, 0x3a7e4240, 0x32800092, 0x0fc44770,\n    0xd50407e4, 0xd0002d00, 0x42403001, 0x3a01d403, 0xd0121800, 0x3281d5fb,\n    0x3080d101, 0x3080d205, 0x2d00d203, 0x0040d00f, 0x2afe3a01, 0x3201da06,\n    0x0a40dd07, 0x431005d2, 0x47704320, 0x05c020ff, 0x2000e7fa, 0x06054770,\n    0x0a40d1ed, 0xe7eb0280, 0x140cb283, 0x14044363, 0x436cb28d, 0xb284191b,\n    0x0425436c, 0x191b0c24, 0x14091400, 0x02c04348, 0x430d06d9, 0x18401159,\n    0x00424770, 0xd0010e12, 0xd1012aff, 0x05c00dc0, 0x0e12004a, 0x2affd001,\n    0x0dc9d101, 0x220105c9, 0xd4094041, 0xd5004041, 0x42884252, 0xdb00dc02,\n    0x42522200, 0x47701e10, 0x18494301, 0x2800d0f8, 0xe7f6daf8, 0xb5102100,\n    0xff86f7ff, 0x33820013, 0x440ad410, 0xdb073a17, 0xdd192a07, 0x43c917c1,\n    0x07c02001, 0xbd104048, 0x2a204252, 0x2220db00, 0xbd104110, 0xbd102000,\n    0xb5102100, 0xff6cf7ff, 0x0001440a, 0x3a17d4ee, 0x43c1dbee, 0xdce92a08,\n    0xbd104090, 0xb5302200, 0xd5062900, 0x430507cd, 0x3a010848, 0x2200e010,\n    0x0005b530, 0xd015430d, 0x160c17cd, 0xd10542ac, 0x0e4401c9, 0x01c04321,\n    0xe7f63207, 0x00080005, 0x323d4252, 0x2100e004, 0x221db530, 0x25001a52,\n    0xff55f7ff, 0x2100bd30, 0x2800b530, 0x221edaf5, 0x07c51a52, 0xe7f30840,\n    0x46a42500, 0x2900e00d, 0xe005dc02, 0xda032a00, 0x427f1b89, 0xe0011912,\n    0x1b121989, 0x43674664, 0xcb101bc0, 0xd2000864, 0x46063501, 0x460f412e,\n    0x0864412f, 0xb5c04770, 0xffe2f7ff, 0xffe6f7ff, 0x1386d3fc, 0x10d2138f,\n    0x43574356, 0x43674664, 0x133f1336, 0x19891bc0, 0xb5c0bdc0, 0xffd0f7ff,\n    0xffd1f7ff, 0x2900d3fc, 0x1989dc02, 0xe0011b12, 0x19121b89, 0x10641076,\n    0xe7edd1f5, 0x2118b530, 0xff69f7ff, 0x09244c5d, 0xdafd1b00, 0xd4fd1900,\n    0x00650082, 0x21004853, 0xdb0242a2, 0x42401b52, 0x00d2e7fa, 0x2401a355,\n    0xffc5f7ff, 0x22003109, 0x25002300, 0xf80cf000, 0xfeedf7ff, 0xfed0f7ff,\n    0xf806f000, 0xb500e78f, 0xffd8f7ff, 0xbd004608, 0x07642401, 0xdc0342a0,\n    0x42a04264, 0x4770dd00, 0x47700020, 0xf7ffb570, 0xe18cffc9, 0x2118b530,\n    0xff31f7ff, 0x4a3c1401, 0x14c94351, 0x10493101, 0x0142b402, 0x43414839,\n    0x48391a52, 0xa3482100, 0xf7ff43cc, 0x4408ff90, 0xe764bc04, 0xf7ffb530,\n    0x0001fea3, 0x4933d415, 0xfedef7ff, 0xd3011051, 0x10403101, 0x4601b402,\n    0x009b4b2e, 0x1ac918c0, 0xa33b2200, 0xf7ff43d4, 0x4611ff88, 0x0013bc04,\n    0x22ffe749, 0xb530e7fb, 0xffe0f7ff, 0xdc0a2b46, 0x2b46425b, 0x4824dc06,\n    0x31084358, 0x1a081109, 0xe7382205, 0x22ff43c0, 0xb530e735, 0xfe74f7ff,\n    0xfe6ef7ff, 0xfe70f7ff, 0x01490140, 0x126418d4, 0xd40a3401, 0xda051ad4,\n    0x41204264, 0xd30c2c1c, 0xe00a17c0, 0x2c1c4121, 0x2800d307, 0x4813da03,\n    0x404817c9, 0x17c8e013, 0x2200e011, 0xda022800, 0x42494240, 0xa30d4a0d,\n    0xf7ff2401, 0x4610ff46, 0x18844a0a, 0x1a84d202, 0x1aa0d400, 0x22003801,\n    0x46c0e701, 0x136e9db4, 0x00001715, 0x162e42ff, 0x2c9e15ca, 0x0593c2b9,\n    0x0162e430, 0x6487ed51, 0x3b58ce0c, 0x1f5b75f8, 0x0feadd4c, 0x07fd56ec,\n    0x03ffaab8, 0x01fff554, 0x00fffeac, 0x007fffd4, 0x003ffffc, 0x001ffffc,\n    0x00100000, 0x00080002, 0x464fa9ec, 0x464fa9ed, 0x20b15df4, 0x1015891c,\n    0x0802ac44, 0x0802ac45, 0x04005564, 0x02000aac, 0x01000154, 0x0080002c,\n    0x00400004, 0x00200004, 0x00100000, 0x00080000, 0x00080003, 0x40514ab9,\n    0x17c4b570, 0x0e120042, 0x2affd051, 0x17cdd052, 0x0e1b004b, 0x2bffd051,\n    0x4eb3d052, 0x40314030, 0x43303601, 0x40604331, 0x1b004069, 0x1a9d1b49,\n    0xd40d1ad4, 0xda082c1e, 0x00133520, 0x40aa000a, 0xe00b4121, 0x00082200,\n    0x0013e00a, 0xe0072200, 0xdaf72d1e, 0x00023420, 0x412840a2, 0xd0191840,\n    0xd0030fc1, 0x425243c0, 0x3001d100, 0x42b019b6, 0x1892d204, 0x3b014140,\n    0xd3fa42b0, 0xd3020840, 0x2a003001, 0x2bfed009, 0x07c9d20a, 0x05db4408,\n    0xbd704418, 0xd0fc2a00, 0x0840e7e2, 0xe7f20040, 0x07c8da01, 0x0208bd70,\n    0x05c030ff, 0x3a20bd70, 0xe7ac1912, 0x44220212, 0x3b20e7a9, 0xe7ac195b,\n    0x442b021b, 0x46c0e7a9, 0x4602b580, 0x0fd2404a, 0x469607d2, 0x00490040,\n    0xd03d0e02, 0xd03c2aff, 0xd03c0e0b, 0xd03b2bff, 0x3f8018d7, 0x02090200,\n    0x0a490a40, 0x46941842, 0x09cb09c2, 0x4348435a, 0xd3020c92, 0xd4002800,\n    0x02433201, 0x02520dc0, 0x44601880, 0xd10e0dc1, 0xd22b2ffe, 0xd301005b,\n    0x3001d005, 0x05ff3701, 0x44704438, 0x3001bd80, 0x00400840, 0x3701e7f6,\n    0xd2132ffe, 0xd3020840, 0x2b003001, 0x19ffd005, 0x05bf3701, 0x44704438,\n    0x0840bd80, 0xe7f60040, 0x02123a10, 0x3b10e7c0, 0xe7c1021b, 0x3701da12,\n    0x3002d10e, 0x28030dc0, 0xe005d10a, 0x3701da0a, 0x3001d106, 0xd0030dc0,\n    0x05c02001, 0xbd804470, 0xbd804670, 0x05c020ff, 0xbd804470, 0x2401b570,\n    0x05e44266, 0x0a52024a, 0x09d34322, 0x062d25d0, 0x666b662e, 0xb2f30dc6,\n    0x0a400240, 0x0dc94320, 0x0a36404e, 0x6f2d07f6, 0x2900b2c9, 0x29ffd030,\n    0x2b00d02c, 0x2bffd039, 0x1a5bd02a, 0x0a01337d, 0x0c094369, 0x001403c0,\n    0x1b04434c, 0x436c12a4, 0x03491424, 0x0f0c1909, 0x3105d108, 0xd30f090c,\n    0x028008c9, 0x1a404351, 0xe008d40a, 0x31093301, 0xd305094c, 0x02400909,\n    0x1a404351, 0x3401d400, 0xd2092bfe, 0x186005d9, 0xbd701980, 0xd10c2bff,\n    0x05c020ff, 0xbd704330, 0x1c59dafa, 0x0e61d105, 0x2001d303, 0x433005c0,\n    0x0030bd70, 0x46c0bd70, 0x0041b410, 0x0209d23a, 0x22010a49, 0x188905d2,\n    0xd03a0dc2, 0xd0362aff, 0x1052327d, 0x0049d300, 0x0d4ba41a, 0x09c85ce4,\n    0x43604360, 0x43601300, 0x02241340, 0x34aa1a24, 0x43400020, 0x0a0b0bc0,\n    0x13004358, 0x15404360, 0x43631a24, 0x00180bdb, 0x02494340, 0x11401a08,\n    0x01db4344, 0x301013e0, 0x44031180, 0x461cd306, 0x43644164, 0x1b090409,\n    0x3301d400, 0x18d005d2, 0x4770bc10, 0xd0040e09, 0x05c017c0, 0x0dc0e7f8,\n    0x0fc0e7fb, 0xe7f307c0, 0xbbc9daf1, 0x979ea6b0, 0x82868b91, 0x80000000,\n    0x007fffff, 0x2401b5f0, 0x406307e4, 0x46c0e001, 0x0d0cb5f0, 0x1e660fcf,\n    0x1b890536, 0xd3030564, 0x424043c9, 0x3101d300, 0xd0030d64, 0x0af61c66,\n    0x1be4d007, 0x007f2000, 0x07891c79, 0x3c801289, 0x0d1d0324, 0x1e6e0fdf,\n    0x1b9b0536, 0xd303056d, 0x425243db, 0x3301d300, 0xd0030d6d, 0x0af61c6e,\n    0x1bedd007, 0x007f2200, 0x079b1c7b, 0x3d80129b, 0x1b2f032d, 0xd4581b66,\n    0x2e2046a4, 0x3720da46, 0x40bc0014, 0x40bd001d, 0x413340f2, 0x1880432a,\n    0x0fcb4159, 0x43c9d005, 0x220043c0, 0x41504264, 0x46624151, 0xd1280d4d,\n    0xd1070d0d, 0xd01f2800, 0x41401924, 0x3a014149, 0xd0f90d0d, 0xd3060064,\n    0xd3003001, 0x2c003101, 0x0840d101, 0x3a010040, 0x1c94d40b, 0xd1040ae4,\n    0x44110512, 0x441907db, 0x07d9bdf0, 0x43194b20, 0x07d9e000, 0xbdf02000,\n    0xd1dd2900, 0xd1db2c00, 0x3201bdf0, 0x084007c6, 0x432807cd, 0x2e000849,\n    0xe7d9d0e1, 0xda292e3c, 0x37403e20, 0x40bc0014, 0x2401d000, 0x431440f2,\n    0x40bb001a, 0x17d3431c, 0x46ace7ac, 0xda082f20, 0x00043620, 0x000d40b4,\n    0x40f840b5, 0x43284139, 0x2f3ce7a5, 0x3f20da0c, 0x00043640, 0xd00040b4,\n    0x40f82401, 0x00084304, 0x430c40b1, 0xe7ea17c1, 0x00190010, 0xe7942400,\n    0x7ff00000, 0x0d0cb5f0, 0x05361e66, 0x0ae61b89, 0x0d640564, 0x1c65d002,\n    0xd0040aed, 0x21012000, 0x3c800509, 0x46a40324, 0x1e670d1c, 0x1bdb053f,\n    0x05640ae7, 0xd0020d64, 0x0aed1c65, 0x2200d004, 0x051b2301, 0x03243c80,\n    0x44644077, 0xb284b497, 0x4374b296, 0x437e0c07, 0x436f0c15, 0x4368b280,\n    0xd3021836, 0x04002001, 0x0430183f, 0x19000c35, 0x4684417d, 0xb29ab288,\n    0x0c0c4350, 0x0c1f4362, 0xb28e437c, 0x1992437e, 0x2601d302, 0x19a40436,\n    0x0c170416, 0x41671836, 0xb281bc01, 0x4351b29a, 0x43620c04, 0x435c0c1b,\n    0x4358b280, 0xd3021812, 0x04002001, 0x04101824, 0x18400c13, 0x182d4163,\n    0x2000415e, 0xbc064147, 0xb293b288, 0x0c0c4358, 0x0c124363, 0xb2894354,\n    0x185b4351, 0x2101d302, 0x18640409, 0x0c1a0419, 0x41621809, 0x4156186d,\n    0x41472000, 0x02f9bc18, 0x43110d72, 0x0d6a02f0, 0x02ed4310, 0xd1030d0a,\n    0x4140196d, 0x3b014149, 0x1b9b4e12, 0x42b30076, 0x006dd20e, 0x3001d307,\n    0x41712600, 0x43354666, 0x0840d101, 0x051b0040, 0x07e418c9, 0xbdf04421,\n    0x3301da0b, 0x3001d106, 0x3101d104, 0xd0010d4f, 0xe7f20849, 0x200007e1,\n    0x3601bdf0, 0x20000531, 0x0000e7eb, 0x000003ff, 0x0d1cb5f0, 0x053f1e67,\n    0x0ae71bdb, 0x0d640564, 0x1c66d002, 0xd0040af6, 0x23012200, 0x3c80051b,\n    0x25d00324, 0x2600062d, 0x662e43f6, 0x666e091e, 0x19f60fce, 0x004946b4,\n    0xd0020d4f, 0x0af61c7e, 0x2000d003, 0x3f402100, 0x1b3e033f, 0x44b400b6,\n    0x057f3f01, 0x08491bc9, 0x36016f2e, 0x029c0876, 0x43250d95, 0x13ed4375,\n    0x13ad4375, 0x106d3501, 0x1b7603f6, 0x02ccb40c, 0x432c0d45, 0xb2b3b2a2,\n    0x0c27435a, 0x0c35437b, 0xb2a4436f, 0x191b436c, 0x2401d302, 0x193f0424,\n    0x0c1d041c, 0x417d18a4, 0x416d1924, 0xb2919a00, 0x4361b2ac, 0x437c0c17,\n    0x435f0c2b, 0x435ab292, 0xd30218a4, 0x04122201, 0x042218bf, 0x18520c23,\n    0x9c01417b, 0x191b436c, 0x01d90e52, 0x0144430a, 0xb2811aa0, 0x4351b2b2,\n    0x435a1403, 0x43730c36, 0x4377b287, 0x19d217d6, 0x417e2700, 0x199b0436,\n    0x0c160417, 0x415e187f, 0x18ed1673, 0x260001f3, 0x41753380, 0xd1060fa9,\n    0x0a690064, 0x0a5b05e8, 0xd2094318, 0x2204e02f, 0x33804494, 0x0aa94175,\n    0x0a9b05a8, 0xd3264318, 0x41494140, 0x9a000424, 0x000d9b01, 0x1b644355,\n    0x1ae44343, 0xb286b295, 0x0c174375, 0x0c03437e, 0xb292435f, 0x18b6435a,\n    0x2201d302, 0x18bf0412, 0x0c330432, 0x417b1952, 0x419c4252, 0xd4022c00,\n    0x30012200, 0x08404151, 0x431007ca, 0xb0020849, 0x07d74662, 0x4b591092,\n    0x4b5918d2, 0xd203429a, 0x18890512, 0xbdf019c9, 0x2a002000, 0x0039dc01,\n    0x3301bdf0, 0xe7f50519, 0x2100da07, 0x0fc9e007, 0x0d5207c9, 0x12c9d003,\n    0x494ee001, 0x20000509, 0x46c04770, 0xd2f2004a, 0x3a010d52, 0x429a4b48,\n    0xb5f0d2ea, 0x1b090514, 0xd3010852, 0x41491800, 0x18d2089b, 0x46940512,\n    0x0c4aa441, 0x090b5ca2, 0x43534353, 0x4353131b, 0x0212135b, 0x00131ad2,\n    0x0b5b435b, 0x4363084c, 0x435313db, 0x330115db, 0x1ad2105b, 0x1ad20c13,\n    0x435b0013, 0x0d840289, 0xb28d4321, 0x4375b29e, 0x437e0c0f, 0x435f0c1b,\n    0x435cb28c, 0xd3021936, 0x04242401, 0x0434193f, 0x19640c33, 0x019d417b,\n    0x432c0ea4, 0xb2a53420, 0x14244355, 0x0c2d4354, 0x11a41964, 0x1b1203d2,\n    0xb28eb295, 0x0c174375, 0x0c0c437e, 0xb2934367, 0x18f64363, 0x2301d302,\n    0x18ff041b, 0x0c340433, 0x417c195b, 0x416418db, 0x230018db, 0xb29e4163,\n    0xb29d4376, 0x437d0c1f, 0x046c437f, 0x19a40bed, 0x0206417d, 0x1b36088f,\n    0x077d41af, 0x416e08f6, 0xb295b2b4, 0x1437436c, 0x0c12437d, 0xb2b64357,\n    0x17ea4356, 0x260019ad, 0x04124172, 0x042e18bf, 0x19360c2a, 0x3208417a,\n    0xd2191152, 0x059c0a9d, 0x191017d1, 0x44614169, 0x0000bdf0, 0x000003fd,\n    0x000007fe, 0x000007ff, 0xd6dfebf8, 0xb8bec5cd, 0xa4a8adb2, 0x95999ca0,\n    0x8a8d8f92, 0x81838588, 0x0a5d4152, 0x17d105dc, 0x414d1914, 0x4363002b,\n    0x4376b2a6, 0x0c27b2a2, 0x437f437a, 0x0bd20451, 0x417a1989, 0x18d218d2,\n    0x42490580, 0xd4024190, 0x34012300, 0x0860415d, 0x07ed0869, 0x44614328,\n    0xb5d0bdf0, 0xb5d0e011, 0x004c4fb3, 0xd0010d64, 0xd10242bc, 0x0d092000,\n    0x005c0509, 0xd0010d64, 0xd10242bc, 0x0d1b2200, 0x2601051b, 0xd40c404b,\n    0xd500404b, 0x42994276, 0x4290d103, 0xd301d803, 0xdc002600, 0x1e304276,\n    0x430bbdd0, 0x430318db, 0xd0f54313, 0xdaf62900, 0x4644e7f4, 0x4656464d,\n    0xb4f0465f, 0xbcf04770, 0x46a946a0, 0x46bb46b2, 0x46624770, 0x4694ca18,\n    0x2a00465a, 0xe004db20, 0xca184662, 0x29004694, 0x18c0da1a, 0x465b4161,\n    0x465c413b, 0x465240b4, 0x432240fa, 0x464d4644, 0x416b4162, 0x46994690,\n    0x40b3462b, 0x40fc413d, 0x4652431c, 0x41a2465b, 0x469241ab, 0x4770469b,\n    0x41a11ac0, 0x413b464b, 0x40b4464c, 0x40fa4642, 0x46544322, 0x4162465d,\n    0x4692416b, 0x462b469b, 0x413d40b3, 0x431c40fc, 0x464b4642, 0x41ab41a2,\n    0x46994690, 0x20004770, 0x47702100, 0xb5002200, 0xf0003220, 0x0008f82a,\n    0x2200bd00, 0x3220b500, 0xf830f000, 0xbd000008, 0xb5002100, 0xf804f000,\n    0x2100e01e, 0xd4e615c3, 0x468cb510, 0x004017c3, 0xd00a0e02, 0xd00c2aff,\n    0x3a7f1e51, 0x1a400609, 0x1ac04058, 0x07001101, 0x2000e01f, 0x00030001,\n    0x43d8bd10, 0xbd1043d9, 0xb5002200, 0xf80cf000, 0x429a17ca, 0xbd00d100,\n    0x210143d8, 0x404107c9, 0x2200bd00, 0xd4be150b, 0x4694b510, 0xf8b8f000,\n    0x34011414, 0x2100da00, 0x446217cb, 0xd40c3a34, 0xda072a0c, 0x40910004,\n    0x42524090, 0x40d43220, 0xbd104321, 0x43d943d8, 0x3220bd10, 0x460cd407,\n    0x42524094, 0x41113220, 0x432040d0, 0x0008bd10, 0x322017c9, 0x4252d403,\n    0x41103220, 0x0018bd10, 0xbd100019, 0x07db0fc3, 0x0e0a0041, 0x2affd007,\n    0x0909d008, 0x18894a3d, 0x07404319, 0x00194770, 0x47702000, 0x18c9493a,\n    0x004ae7fa, 0x4b390d52, 0xdd131ad2, 0xda1e2aff, 0x0fcb05d2, 0x431a07db,\n    0x0f4000c3, 0x0a490309, 0x43104308, 0xd301005b, 0x3001d001, 0x08434770,\n    0x4770d2fb, 0x0fc8d002, 0x477007c0, 0x1312030a, 0xd1f83201, 0x2a070f42,\n    0x2201d1f5, 0x22ffe000, 0x02000fc8, 0x05c01880, 0x21004770, 0x2100000a,\n    0x2100e004, 0x17c1000a, 0x2200e003, 0xe0052300, 0x17cb2200, 0x40594058,\n    0x41991ac0, 0x4c1cb530, 0x29001aa2, 0x0001d103, 0x2000d010, 0x154c3a20,\n    0xd204d112, 0x18003a01, 0x0d4c4149, 0x4c15d3fa, 0xd20442a2, 0x18890512,\n    0x18c907db, 0x43d2bd30, 0x20000d52, 0xe7f52100, 0x3a01d403, 0x41491800,\n    0x320bd5fb, 0x0ac00544, 0x4328054d, 0x00640ac9, 0x2400d003, 0x41614160,\n    0xd3e0e7e1, 0xe7f80844, 0x000007ff, 0x38000000, 0x7ff00000, 0x00000380,\n    0x00000432, 0x000007fe, 0x0fcc0d0a, 0x051b1e53, 0x05521ac9, 0x43c9d303,\n    0xd3004240, 0x0d523101, 0x1c53d003, 0xd0070adb, 0x20001b12, 0x1c610064,\n    0x12890789, 0x03123a80, 0x1ad24b62, 0x32024770, 0x2a0cd425, 0x2511da1c,\n    0x000b1aad, 0x3208412b, 0x00063507, 0x409040ee, 0x43314091, 0x4363ccf0,\n    0x2300151a, 0x4355415a, 0x43574356, 0x12f402bf, 0x19760576, 0x17ed4167,\n    0x1b80197f, 0x477041b9, 0x2000220c, 0x004917c9, 0x05093101, 0x0209e7db,\n    0x43190e03, 0x42530200, 0xd4083220, 0x4119000c, 0x40d84094, 0x22004320,\n    0x41514150, 0x00084770, 0x3b2017c9, 0xd5f13220, 0x21002000, 0x47702200,\n    0xf7ffb5f0, 0xf000fe56, 0x4684f81d, 0xf83ef000, 0x4660b403, 0xf858f000,\n    0xf7ffbc0c, 0xe474fe50, 0xf7ffb5f0, 0xf000fe46, 0xf000f80d, 0xe006f82f,\n    0xf7ffb5f0, 0xf000fe3e, 0xf000f805, 0xf7fff845, 0xbdf0fe3e, 0xf7ffb500,\n    0xa431ff7f, 0xff97f7ff, 0x4d2d2400, 0x07d24e2d, 0x43f6d302, 0x4166426d,\n    0xd2040052, 0x46a346a2, 0x46b146a8, 0x46a0e003, 0x46aa46a1, 0xa46f46b3,\n    0x270146a4, 0xf7ff261f, 0x3701fe2b, 0x2f213e01, 0xbd00d1f9, 0xb2844659,\n    0x436cb28d, 0x43751406, 0x435e140b, 0x435ab282, 0x17ea18ad, 0x43d2d700,\n    0x18b60412, 0x0c2b042a, 0x41731912, 0x46494640, 0x179b009d, 0x432a0f92,\n    0x41994190, 0xe6fc223e, 0xb2844649, 0x436cb28d, 0x43751406, 0x435e140b,\n    0x435ab282, 0x17ea18ad, 0x43d2d700, 0x18b60412, 0x0c2b042a, 0x41731912,\n    0x46594650, 0x179b009d, 0x432a0f92, 0x41594150, 0xe6de223e, 0x000003ff,\n    0x9df04dbb, 0x36f656c5, 0x0000517d, 0x0014611a, 0x000a8885, 0x001921fb,\n    0xf7ffb5f0, 0x4d40fdc6, 0x402c000c, 0x42acd001, 0x0d09d102, 0x20000509,\n    0x402c001c, 0x42acd001, 0x0d1bd102, 0x2200051b, 0x02ed2600, 0xd5042b00,\n    0x406b2602, 0xd4004069, 0x194f4276, 0x4299d504, 0x3601dd0c, 0xe0034069,\n    0xda0742bb, 0x406b3e01, 0x00100007, 0x000f003a, 0x003b0019, 0x2a00b440,\n    0x2b00d10f, 0x005cd00a, 0x34011564, 0x004cd109, 0x34011564, 0x3901d102,\n    0xe0023b01, 0x21002000, 0xf7ffe02e, 0x223efbb1, 0xfe03f7ff, 0x468b4682,\n    0x21002000, 0x22014680, 0x46910792, 0x46a4a41d, 0x261f2701, 0xfd81f7ff,\n    0x3e013701, 0xd1f92f21, 0x4653464a, 0x24013a0c, 0x27000764, 0x001b0852,\n    0x4193d405, 0x41791900, 0xd1f70864, 0x4153e004, 0x41b91b00, 0xd1f10864,\n    0x104907ce, 0x43300840, 0x2e00bc40, 0x4c09d00a, 0xd5014d09, 0x43ed43e4,\n    0xd10107f6, 0x41691900, 0x41691900, 0xf7ff223d, 0xf7fffe50, 0xbdf0fd4c,\n    0x7ff00000, 0x885a308d, 0x3243f6a8, 0x61bb4f69, 0x1dac6705, 0x96406eb1,\n    0x0fadbafc, 0xab0bdb72, 0x07f56ea6, 0xe59fbd39, 0x03feab76, 0xba97624b,\n    0x01ffd55b, 0xdddb94d6, 0x00fffaaa, 0x56eeea5d, 0x007fff55, 0xaab7776e,\n    0x003fffea, 0x5555bbbc, 0x001ffffd, 0xaaaaadde, 0x000fffff, 0xf555556f,\n    0x0007ffff, 0xfeaaaaab, 0x0003ffff, 0xffd55555, 0x0001ffff, 0xfffaaaab,\n    0x0000ffff, 0xffff5555, 0x00007fff, 0xffffeaab, 0x00003fff, 0xfffffd55,\n    0x00001fff, 0xffffffab, 0x00000fff, 0xfffffff5, 0x000007ff, 0xffffffff,\n    0x000003ff, 0x00000000, 0x00000200, 0x00000000, 0x00000100, 0x00000000,\n    0x00000080, 0x00000000, 0x00000040, 0x00000000, 0x00000020, 0x00000000,\n    0x00000010, 0x00000000, 0x00000008, 0x00000000, 0x00000004, 0x00000000,\n    0x00000002, 0x00000000, 0x00000001, 0x80000000, 0x00000000, 0x40000000,\n    0x00000000, 0xf7ffb5f0, 0xa454fe07, 0xfe1ff7ff, 0xda042900, 0x4d214c20,\n    0x41691900, 0xb4043a01, 0xa6522701, 0x23012200, 0xce30079b, 0x1b0046b4,\n    0xd40b41a9, 0x3620427e, 0x413d001d, 0x40b4001c, 0x40fe0016, 0x41624334,\n    0xe001416b, 0x41691900, 0x37014666, 0xd1e82f21, 0xb29eb285, 0x14074375,\n    0x0c19437e, 0xb284434f, 0x17f1434c, 0x24001936, 0x04094161, 0x0434187f,\n    0x19640c31, 0x0fa44179, 0x43200088, 0x18801789, 0xbc044159, 0x323e4252,\n    0xfd7ff7ff, 0x0000bdf0, 0xf473de6b, 0x2c5c85fd, 0x004fb5f0, 0x157fd250,\n    0x3701d04e, 0xf7ffd04f, 0xb404fdb3, 0x0dc20249, 0x02404311, 0xa62b2701,\n    0x220046b4, 0x427e2300, 0x000d3620, 0x000c413d, 0x000640b4, 0x433440fe,\n    0x414d4144, 0xd1050fae, 0x00290020, 0xce304666, 0x41ab1b12, 0x44a42408,\n    0x2f213701, 0x0089d1e7, 0x18121089, 0xbc80414b, 0xcc13a417, 0x43783701,\n    0x437c4379, 0x12c9054f, 0x19c017cd, 0x02a74169, 0x17cd15a4, 0x416c19c9,\n    0x188017dd, 0x416c4159, 0x17cd223e, 0xd00842ac, 0x070e0900, 0x09094330,\n    0x43310726, 0x3a041124, 0xf7ffe7f3, 0xbdf0fd26, 0x20004902, 0x4902bdf0,\n    0xbdf02000, 0xfff00000, 0x7ff00000, 0x0000b8aa, 0x0013de6b, 0x000fefa3,\n    0x000b1721, 0xbf984bf3, 0x19f323ec, 0xcd4d10d6, 0x0e47fbe3, 0x8abcb97a,\n    0x0789c1db, 0x022c54cc, 0x03e14618, 0xe7833005, 0x01f829b0, 0x87e01f1e,\n    0x00fe0545, 0xac419e24, 0x007f80a9, 0x45621781, 0x003fe015, 0xa9ab10e6,\n    0x001ff802, 0x55455888, 0x000ffe00, 0x0aa9aac4, 0x0007ff80, 0x01554556,\n    0x0003ffe0, 0x002aa9ab, 0x0001fff8, 0x00055545, 0x0000fffe, 0x8000aaaa,\n    0x00007fff, 0xe0001555, 0x00003fff, 0xf80002ab, 0x00001fff, 0xfe000055,\n    0x00000fff, 0xff80000b, 0x000007ff, 0xffe00001, 0x000003ff, 0xfff80000,\n    0x000001ff, 0xfffe0000, 0x000000ff, 0xffff8000, 0x0000007f, 0xffffe000,\n    0x0000003f, 0xfffff800, 0x0000001f, 0xfffffe00, 0x0000000f, 0xffffff80,\n    0x00000007, 0xffffffe0, 0x00000003, 0xfffffff8, 0x00000001, 0xfffffffe,\n    0x00000000, 0x80000000, 0x00000000, 0x40000000, 0x00000000, 0x45444e49,\n    0x20202058, 0x004d5448, 0x4f464e49, 0x3246555f, 0x00545854, 0x70736152,\n    0x72726562, 0x69502079, 0x32505200, 0x6f6f4220, 0x01060074, 0x50100dc0,\n    0x50100dec, 0x0000044d, 0x0000000a, 0xbe000104, 0x0000004f, 0x0000000c,\n    0x0000000e, 0x00000001, 0x0003ffff, 0x00ffff03, 0x00000200, 0x00000000,\n    0x02ffff03, 0x08000200, 0x37020900, 0x00010200, 0x0409fa80, 0x08020000,\n    0x07005006, 0x40028105, 0x05070000, 0x00400202, 0x01040900, 0x00ff0200,\n    0x05070000, 0x00400203, 0x84050700, 0x00004002, 0x01100112, 0x40000000,\n    0x00032e8a, 0x02010100, 0xbe000103, 0x50100e18, 0x50100e50, 0x4d903ceb,\n    0x4e495753, 0x00312e34, 0x00010802, 0x00020002, 0x0081f800, 0x00010001,\n    0x00000001, 0x0003ffff, 0x00290000, 0x52000000, 0x522d4950, 0x20203250,\n    0x41462020, 0x20363154, 0xfeeb2020, 0x01000000, 0x000c1000, 0x02000800,\n    0x08048008, 0x00000880, 0x20000001, 0x04400004, 0xbe008000, 0x0000001c,\n    0x00002355, 0x000024c9, 0x0000188d, 0x00000aa9, 0x000018c5, 0x000017fd,\n    0x00003dc4, 0x00003dd1, 0x50100eb5, 0x20324655, 0x746f6f42, 0x64616f6c,\n    0x76207265, 0x0a302e32, 0x65646f4d, 0x52203a6c, 0x62707361, 0x79727265,\n    0x20695020, 0x0a325052, 0x72616f42, 0x44492d64, 0x5052203a, 0x50522d49,\n    0x03040a32, 0xbe000409, 0x50100e58, 0x50100e24, 0x02020000, 0x00000020,\n    0x20495052, 0x505201fc, 0x2008fb32, 0xfd3206f9, 0x3c010216, 0x6c6d7468,\n    0x65683c3e, 0x3c3e6461, 0x6174656d, 0x74746820, 0x71652d70, 0x3d766975,\n    0x66657222, 0x68736572, 0x6f632022, 0x6e65746e, 0x30223d74, 0x4c52553b,\n    0x25fc273d, 0x2f2f3a73, 0x70736172, 0x72726562, 0x2e697079, 0x2f6d6f63,\n    0x69766564, 0x522f6563, 0x763f3250, 0x69737265, 0x613d6e6f, 0x63626261,\n    0x65646463, 0x27666665, 0x3c3e2f22, 0x626dfa2f, 0x3e79646f, 0x69646552,\n    0x74636572, 0x20676e69, 0x3c206f74, 0x65727ffd, 0x3e60c666, 0x2f3c91f1,\n    0x6271fd61, 0x2f3c6bfc, 0xbe00ebfb, 0xbe00be00\n]);\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.runMCU = void 0;\nconst rp2040js_1 = require(\"rp2040js\");\nconst bootrom_1 = require(\"./bootrom\");\nconst memory_1 = require(\"./memory\");\nconst core = __importStar(require(\"@actions/core\"));\nfunction runMCU(uf2_filepath, fs_filepath = null) {\n    // Create the MCU\n    const mcu = new rp2040js_1.RP2040();\n    // Load the bootrom\n    mcu.loadBootrom(bootrom_1.bootrom);\n    // Load the UF2 firmware\n    (0, memory_1.loadUF2)(uf2_filepath, mcu);\n    // Load the filesystem, if needed\n    if (fs_filepath != null) {\n        (0, memory_1.loadFlash)(fs_filepath, mcu);\n    }\n    let dataReceived = '';\n    let currentLine = '';\n    // Create a USB CDC\n    const cdc = new rp2040js_1.USBCDC(mcu.usbCtrl);\n    // Notify when USB CDC is connected\n    cdc.onDeviceConnected = function () {\n        // ----------------------------------\n        // [Insert post-connection code here]\n        // ----------------------------------\n    };\n    // Handle receiving serial data\n    cdc.onSerialData = function (buffer) {\n        const data = new TextDecoder().decode(buffer);\n        for (const char of data) {\n            if (char === '\\n') {\n                if (currentLine === '[RP2040JS: END]') {\n                    // TODO: Change this depending on the use case\n                    const printout = dataReceived.split('\\n')[0];\n                    core.setOutput('result', printout);\n                    process.exit(0);\n                }\n                currentLine = '';\n            }\n            else {\n                currentLine += char;\n            }\n            dataReceived += char;\n        }\n        // ----------------------------------\n        // [Insert serial data code here]\n        // ----------------------------------\n    };\n    // Move the program counter and execute\n    mcu.core.PC = 0x10000000;\n    mcu.execute();\n}\nexports.runMCU = runMCU;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core = __importStar(require(\"@actions/core\"));\nconst execution_1 = require(\"./execution\");\nconst fs = __importStar(require(\"fs\"));\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const uf2 = core.getInput('firmware');\n            const fs_arg = core.getInput('filesystem');\n            if (!fs.existsSync(uf2)) {\n                core.setFailed('UF2 file provided does not exist.');\n            }\n            if (fs_arg !== '' && !fs.existsSync(fs_arg)) {\n                core.setFailed('Filesystem image provided does not exist.');\n            }\n            const filesystem = fs_arg === '' ? null : fs_arg;\n            (0, execution_1.runMCU)(uf2, filesystem);\n            core.debug(new Date().toTimeString());\n            core.setOutput('time', new Date().toTimeString());\n        }\n        catch (error) {\n            if (error instanceof Error)\n                core.setFailed(error.message);\n        }\n    });\n}\nrun();\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadFlash = exports.loadUF2 = void 0;\nconst fs = __importStar(require(\"fs\"));\nconst uf2_1 = require(\"uf2\");\nconst FLASH_START_ADDRESS = 0x10000000;\nconst FLASH_START = 0x100000;\nconst UF2_BLOCKSIZE = 512;\nfunction loadUF2(filepath, mcu) {\n    const fileSize = fs.statSync(filepath).size;\n    const fd = fs.openSync(filepath, 'r');\n    const buffer = new Uint8Array(UF2_BLOCKSIZE);\n    let bytesWritten = 0;\n    while (bytesWritten < fileSize) {\n        const bytesRead = fs.readSync(fd, buffer, { length: UF2_BLOCKSIZE });\n        const { flashAddress, payload } = (0, uf2_1.decodeBlock)(buffer);\n        const blockFlashAddress = flashAddress - FLASH_START_ADDRESS;\n        mcu.flash.set(payload, blockFlashAddress);\n        bytesWritten += bytesRead;\n    }\n    fs.closeSync(fd);\n}\nexports.loadUF2 = loadUF2;\nfunction loadFlash(filepath, mcu) {\n    const buffer = fs.readFileSync(filepath, { flag: 'r' });\n    mcu.flash.set(buffer, FLASH_START);\n}\nexports.loadFlash = loadFlash;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));\n    }\n    command_1.issueCommand('set-env', { name }, convertedVal);\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueFileCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    if (options && options.trimWhitespace === false) {\n        return inputs;\n    }\n    return inputs.map(input => input.trim());\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    const filePath = process.env['GITHUB_OUTPUT'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));\n    }\n    process.stdout.write(os.EOL);\n    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    const filePath = process.env['GITHUB_STATE'] || '';\n    if (filePath) {\n        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));\n    }\n    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n/**\n * Summary exports\n */\nvar summary_1 = require(\"./summary\");\nObject.defineProperty(exports, \"summary\", { enumerable: true, get: function () { return summary_1.summary; } });\n/**\n * @deprecated use core.summary\n */\nvar summary_2 = require(\"./summary\");\nObject.defineProperty(exports, \"markdownSummary\", { enumerable: true, get: function () { return summary_2.markdownSummary; } });\n/**\n * Path exports\n */\nvar path_utils_1 = require(\"./path-utils\");\nObject.defineProperty(exports, \"toPosixPath\", { enumerable: true, get: function () { return path_utils_1.toPosixPath; } });\nObject.defineProperty(exports, \"toWin32Path\", { enumerable: true, get: function () { return path_utils_1.toWin32Path; } });\nObject.defineProperty(exports, \"toPlatformPath\", { enumerable: true, get: function () { return path_utils_1.toPlatformPath; } });\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareKeyValueMessage = exports.issueFileCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst uuid_1 = require(\"uuid\");\nconst utils_1 = require(\"./utils\");\nfunction issueFileCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueFileCommand = issueFileCommand;\nfunction prepareKeyValueMessage(key, value) {\n    const delimiter = `ghadelimiter_${uuid_1.v4()}`;\n    const convertedValue = utils_1.toCommandValue(value);\n    // These should realistically never happen, but just in case someone finds a\n    // way to exploit uuid generation let's not allow keys or values that contain\n    // the delimiter.\n    if (key.includes(delimiter)) {\n        throw new Error(`Unexpected input: name should not contain the delimiter \"${delimiter}\"`);\n    }\n    if (convertedValue.includes(delimiter)) {\n        throw new Error(`Unexpected input: value should not contain the delimiter \"${delimiter}\"`);\n    }\n    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;\n}\nexports.prepareKeyValueMessage = prepareKeyValueMessage;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/lib/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.result.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                core_1.debug(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                core_1.setSecret(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;\nconst path = __importStar(require(\"path\"));\n/**\n * toPosixPath converts the given path to the posix form. On Windows, \\\\ will be\n * replaced with /.\n *\n * @param pth. Path to transform.\n * @return string Posix path.\n */\nfunction toPosixPath(pth) {\n    return pth.replace(/[\\\\]/g, '/');\n}\nexports.toPosixPath = toPosixPath;\n/**\n * toWin32Path converts the given path to the win32 form. On Linux, / will be\n * replaced with \\\\.\n *\n * @param pth. Path to transform.\n * @return string Win32 path.\n */\nfunction toWin32Path(pth) {\n    return pth.replace(/[/]/g, '\\\\');\n}\nexports.toWin32Path = toWin32Path;\n/**\n * toPlatformPath converts the given path to a platform-specific path. It does\n * this by replacing instances of / and \\ with the platform-specific path\n * separator.\n *\n * @param pth The path to platformize.\n * @return string The platform-specific path.\n */\nfunction toPlatformPath(pth) {\n    return pth.replace(/[/\\\\]/g, path.sep);\n}\nexports.toPlatformPath = toPlatformPath;\n//# sourceMappingURL=path-utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;\nconst os_1 = require(\"os\");\nconst fs_1 = require(\"fs\");\nconst { access, appendFile, writeFile } = fs_1.promises;\nexports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';\nexports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';\nclass Summary {\n    constructor() {\n        this._buffer = '';\n    }\n    /**\n     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist\n     * Also checks r/w permissions.\n     *\n     * @returns step summary file path\n     */\n    filePath() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._filePath) {\n                return this._filePath;\n            }\n            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];\n            if (!pathFromEnv) {\n                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);\n            }\n            try {\n                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);\n            }\n            catch (_a) {\n                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);\n            }\n            this._filePath = pathFromEnv;\n            return this._filePath;\n        });\n    }\n    /**\n     * Wraps content in an HTML tag, adding any HTML attributes\n     *\n     * @param {string} tag HTML tag to wrap\n     * @param {string | null} content content within the tag\n     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add\n     *\n     * @returns {string} content wrapped in HTML element\n     */\n    wrap(tag, content, attrs = {}) {\n        const htmlAttrs = Object.entries(attrs)\n            .map(([key, value]) => ` ${key}=\"${value}\"`)\n            .join('');\n        if (!content) {\n            return `<${tag}${htmlAttrs}>`;\n        }\n        return `<${tag}${htmlAttrs}>${content}</${tag}>`;\n    }\n    /**\n     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.\n     *\n     * @param {SummaryWriteOptions} [options] (optional) options for write operation\n     *\n     * @returns {Promise<Summary>} summary instance\n     */\n    write(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);\n            const filePath = yield this.filePath();\n            const writeFunc = overwrite ? writeFile : appendFile;\n            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });\n            return this.emptyBuffer();\n        });\n    }\n    /**\n     * Clears the summary buffer and wipes the summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.emptyBuffer().write({ overwrite: true });\n        });\n    }\n    /**\n     * Returns the current summary buffer as a string\n     *\n     * @returns {string} string of summary buffer\n     */\n    stringify() {\n        return this._buffer;\n    }\n    /**\n     * If the summary buffer is empty\n     *\n     * @returns {boolen} true if the buffer is empty\n     */\n    isEmptyBuffer() {\n        return this._buffer.length === 0;\n    }\n    /**\n     * Resets the summary buffer without writing to summary file\n     *\n     * @returns {Summary} summary instance\n     */\n    emptyBuffer() {\n        this._buffer = '';\n        return this;\n    }\n    /**\n     * Adds raw text to the summary buffer\n     *\n     * @param {string} text content to add\n     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addRaw(text, addEOL = false) {\n        this._buffer += text;\n        return addEOL ? this.addEOL() : this;\n    }\n    /**\n     * Adds the operating system-specific end-of-line marker to the buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addEOL() {\n        return this.addRaw(os_1.EOL);\n    }\n    /**\n     * Adds an HTML codeblock to the summary buffer\n     *\n     * @param {string} code content to render within fenced code block\n     * @param {string} lang (optional) language to syntax highlight code\n     *\n     * @returns {Summary} summary instance\n     */\n    addCodeBlock(code, lang) {\n        const attrs = Object.assign({}, (lang && { lang }));\n        const element = this.wrap('pre', this.wrap('code', code), attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML list to the summary buffer\n     *\n     * @param {string[]} items list of items to render\n     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)\n     *\n     * @returns {Summary} summary instance\n     */\n    addList(items, ordered = false) {\n        const tag = ordered ? 'ol' : 'ul';\n        const listItems = items.map(item => this.wrap('li', item)).join('');\n        const element = this.wrap(tag, listItems);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML table to the summary buffer\n     *\n     * @param {SummaryTableCell[]} rows table rows\n     *\n     * @returns {Summary} summary instance\n     */\n    addTable(rows) {\n        const tableBody = rows\n            .map(row => {\n            const cells = row\n                .map(cell => {\n                if (typeof cell === 'string') {\n                    return this.wrap('td', cell);\n                }\n                const { header, data, colspan, rowspan } = cell;\n                const tag = header ? 'th' : 'td';\n                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));\n                return this.wrap(tag, data, attrs);\n            })\n                .join('');\n            return this.wrap('tr', cells);\n        })\n            .join('');\n        const element = this.wrap('table', tableBody);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds a collapsable HTML details element to the summary buffer\n     *\n     * @param {string} label text for the closed state\n     * @param {string} content collapsable content\n     *\n     * @returns {Summary} summary instance\n     */\n    addDetails(label, content) {\n        const element = this.wrap('details', this.wrap('summary', label) + content);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML image tag to the summary buffer\n     *\n     * @param {string} src path to the image you to embed\n     * @param {string} alt text description of the image\n     * @param {SummaryImageOptions} options (optional) addition image attributes\n     *\n     * @returns {Summary} summary instance\n     */\n    addImage(src, alt, options) {\n        const { width, height } = options || {};\n        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));\n        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML section heading element\n     *\n     * @param {string} text heading text\n     * @param {number | string} [level=1] (optional) the heading level, default: 1\n     *\n     * @returns {Summary} summary instance\n     */\n    addHeading(text, level) {\n        const tag = `h${level}`;\n        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)\n            ? tag\n            : 'h1';\n        const element = this.wrap(allowedTag, text);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML thematic break (<hr>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addSeparator() {\n        const element = this.wrap('hr', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML line break (<br>) to the summary buffer\n     *\n     * @returns {Summary} summary instance\n     */\n    addBreak() {\n        const element = this.wrap('br', null);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML blockquote to the summary buffer\n     *\n     * @param {string} text quote text\n     * @param {string} cite (optional) citation url\n     *\n     * @returns {Summary} summary instance\n     */\n    addQuote(text, cite) {\n        const attrs = Object.assign({}, (cite && { cite }));\n        const element = this.wrap('blockquote', text, attrs);\n        return this.addRaw(element).addEOL();\n    }\n    /**\n     * Adds an HTML anchor tag to the summary buffer\n     *\n     * @param {string} text link text/content\n     * @param {string} href hyperlink\n     *\n     * @returns {Summary} summary instance\n     */\n    addLink(text, href) {\n        const element = this.wrap('a', text, { href });\n        return this.addRaw(element).addEOL();\n    }\n}\nconst _summary = new Summary();\n/**\n * @deprecated use `core.summary`\n */\nexports.markdownSummary = _summary;\nexports.summary = _summary;\n//# sourceMappingURL=summary.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        if (!options.headers) {\n            throw Error('The request has no headers');\n        }\n        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication() {\n        return false;\n    }\n    handleAuthentication() {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('not implemented');\n        });\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n//# sourceMappingURL=auth.js.map","\"use strict\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst pm = __importStar(require(\"./proxy\"));\nconst tunnel = __importStar(require(\"tunnel\"));\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                let output = Buffer.alloc(0);\n                this.message.on('data', (chunk) => {\n                    output = Buffer.concat([output, chunk]);\n                });\n                this.message.on('end', () => {\n                    resolve(output.toString());\n                });\n            }));\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    const parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    get(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('GET', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    del(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('POST', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('PUT', requestUrl, data, additionalHeaders || {});\n        });\n    }\n    head(requestUrl, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n        });\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.request(verb, requestUrl, stream, additionalHeaders);\n        });\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    getJson(requestUrl, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            const res = yield this.get(requestUrl, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    postJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.post(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    putJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.put(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    patchJson(requestUrl, obj, additionalHeaders = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = JSON.stringify(obj, null, 2);\n            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n            const res = yield this.patch(requestUrl, data, additionalHeaders);\n            return this._processResponse(res, this.requestOptions);\n        });\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    request(verb, requestUrl, data, headers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._disposed) {\n                throw new Error('Client has already been disposed.');\n            }\n            const parsedUrl = new URL(requestUrl);\n            let info = this._prepareRequest(verb, parsedUrl, headers);\n            // Only perform retries on reads since writes may not be idempotent.\n            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)\n                ? this._maxRetries + 1\n                : 1;\n            let numTries = 0;\n            let response;\n            do {\n                response = yield this.requestRaw(info, data);\n                // Check if it's an authentication challenge\n                if (response &&\n                    response.message &&\n                    response.message.statusCode === HttpCodes.Unauthorized) {\n                    let authenticationHandler;\n                    for (const handler of this.handlers) {\n                        if (handler.canHandleAuthentication(response)) {\n                            authenticationHandler = handler;\n                            break;\n                        }\n                    }\n                    if (authenticationHandler) {\n                        return authenticationHandler.handleAuthentication(this, info, data);\n                    }\n                    else {\n                        // We have received an unauthorized response but have no handlers to handle it.\n                        // Let the response return to the caller.\n                        return response;\n                    }\n                }\n                let redirectsRemaining = this._maxRedirects;\n                while (response.message.statusCode &&\n                    HttpRedirectCodes.includes(response.message.statusCode) &&\n                    this._allowRedirects &&\n                    redirectsRemaining > 0) {\n                    const redirectUrl = response.message.headers['location'];\n                    if (!redirectUrl) {\n                        // if there's no location to redirect to, we won't\n                        break;\n                    }\n                    const parsedRedirectUrl = new URL(redirectUrl);\n                    if (parsedUrl.protocol === 'https:' &&\n                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&\n                        !this._allowRedirectDowngrade) {\n                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                    }\n                    // we need to finish reading the response before reassigning response\n                    // which will leak the open socket.\n                    yield response.readBody();\n                    // strip authorization header if redirected to a different hostname\n                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                        for (const header in headers) {\n                            // header names are case insensitive\n                            if (header.toLowerCase() === 'authorization') {\n                                delete headers[header];\n                            }\n                        }\n                    }\n                    // let's make the request with the new redirectUrl\n                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                    response = yield this.requestRaw(info, data);\n                    redirectsRemaining--;\n                }\n                if (!response.message.statusCode ||\n                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {\n                    // If not a retry code, return immediately instead of retrying\n                    return response;\n                }\n                numTries += 1;\n                if (numTries < maxTries) {\n                    yield response.readBody();\n                    yield this._performExponentialBackoff(numTries);\n                }\n            } while (numTries < maxTries);\n            return response;\n        });\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                function callbackForResult(err, res) {\n                    if (err) {\n                        reject(err);\n                    }\n                    else if (!res) {\n                        // If `err` is not passed, then `res` must be passed.\n                        reject(new Error('Unknown error'));\n                    }\n                    else {\n                        resolve(res);\n                    }\n                }\n                this.requestRawWithCallback(info, data, callbackForResult);\n            });\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        if (typeof data === 'string') {\n            if (!info.options.headers) {\n                info.options.headers = {};\n            }\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        function handleResult(err, res) {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        }\n        const req = info.httpModule.request(info.options, (msg) => {\n            const res = new HttpClientResponse(msg);\n            handleResult(undefined, res);\n        });\n        let socket;\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error(`Request timeout: ${info.options.path}`));\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        const parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            for (const handler of this.handlers) {\n                handler.prepareRequest(info.options);\n            }\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        const proxyUrl = pm.getProxyUrl(parsedUrl);\n        const useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.\n        if (proxyUrl && proxyUrl.hostname) {\n            const agentOptions = {\n                maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {\n                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                })), { host: proxyUrl.hostname, port: proxyUrl.port })\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        return __awaiter(this, void 0, void 0, function* () {\n            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n            return new Promise(resolve => setTimeout(() => resolve(), ms));\n        });\n    }\n    _processResponse(res, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                const statusCode = res.message.statusCode || 0;\n                const response = {\n                    statusCode,\n                    result: null,\n                    headers: {}\n                };\n                // not found leads to null obj returned\n                if (statusCode === HttpCodes.NotFound) {\n                    resolve(response);\n                }\n                // get the result from the body\n                function dateTimeDeserializer(key, value) {\n                    if (typeof value === 'string') {\n                        const a = new Date(value);\n                        if (!isNaN(a.valueOf())) {\n                            return a;\n                        }\n                    }\n                    return value;\n                }\n                let obj;\n                let contents;\n                try {\n                    contents = yield res.readBody();\n                    if (contents && contents.length > 0) {\n                        if (options && options.deserializeDates) {\n                            obj = JSON.parse(contents, dateTimeDeserializer);\n                        }\n                        else {\n                            obj = JSON.parse(contents);\n                        }\n                        response.result = obj;\n                    }\n                    response.headers = res.message.headers;\n                }\n                catch (err) {\n                    // Invalid resource (contents not json);  leaving result obj null\n                }\n                // note that 3xx redirects are handled by the http layer.\n                if (statusCode > 299) {\n                    let msg;\n                    // if exception/error in body, attempt to get better error\n                    if (obj && obj.message) {\n                        msg = obj.message;\n                    }\n                    else if (contents && contents.length > 0) {\n                        // it may be the case that the exception is in the body message as string\n                        msg = contents;\n                    }\n                    else {\n                        msg = `Failed request: (${statusCode})`;\n                    }\n                    const err = new HttpClientError(msg, statusCode);\n                    err.result = response.result;\n                    reject(err);\n                }\n                else {\n                    resolve(response);\n                }\n            }));\n        });\n    }\n}\nexports.HttpClient = HttpClient;\nconst lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkBypass = exports.getProxyUrl = void 0;\nfunction getProxyUrl(reqUrl) {\n    const usingSsl = reqUrl.protocol === 'https:';\n    if (checkBypass(reqUrl)) {\n        return undefined;\n    }\n    const proxyVar = (() => {\n        if (usingSsl) {\n            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n        }\n        else {\n            return process.env['http_proxy'] || process.env['HTTP_PROXY'];\n        }\n    })();\n    if (proxyVar) {\n        return new URL(proxyVar);\n    }\n    else {\n        return undefined;\n    }\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    const upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (const upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperReqHosts.some(x => x === upperNoProxyItem)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\n//# sourceMappingURL=proxy.js.map","module.exports = require('./lib/tunnel');\n","'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","\"use strict\";\r\n/*\r\n * UF2 (USB Flashing Format) JavaScript Library\r\n *\r\n * UF2 Format specification: https://github.com/microsoft/uf2\r\n *\r\n * Copyright (C) 2021, Uri Shaked.\r\n * Released under the terms of the MIT License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.encodeBlock = exports.decodeBlock = exports.isUF2Block = exports.UF2EncodeError = exports.UF2DecodeError = exports.familyID = exports.familyMap = exports.UF2Flags = exports.maxPayloadSize = exports.blockSize = exports.magicValues = exports.uf2Families = void 0;\r\nconst uf2families_1 = require(\"./uf2families\");\r\nObject.defineProperty(exports, \"uf2Families\", { enumerable: true, get: function () { return uf2families_1.uf2Families; } });\r\nexports.magicValues = [\r\n    { offset: 0, value: 0x0a324655 },\r\n    { offset: 4, value: 0x9e5d5157 },\r\n    { offset: 508, value: 0x0ab16f30 },\r\n];\r\nexports.blockSize = 512;\r\nexports.maxPayloadSize = 476;\r\nexports.UF2Flags = {\r\n    notMainFlash: 0x00000001,\r\n    fileContainer: 0x00001000,\r\n    familyIDPresent: 0x00002000,\r\n    md5ChecksumPresent: 0x00004000,\r\n    extensionTagsPresent: 0x00008000,\r\n};\r\nexports.familyMap = new Map(uf2families_1.uf2Families.map((f) => [f.id, f.description]));\r\nfunction familyID(familyName) {\r\n    for (const [id, name] of exports.familyMap.entries()) {\r\n        if (name === familyName) {\r\n            return id;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexports.familyID = familyID;\r\nclass UF2DecodeError extends Error {\r\n}\r\nexports.UF2DecodeError = UF2DecodeError;\r\nclass UF2EncodeError extends Error {\r\n}\r\nexports.UF2EncodeError = UF2EncodeError;\r\nfunction isUF2Block(data) {\r\n    const dataView = new DataView(data.buffer);\r\n    if (data.length !== exports.blockSize) {\r\n        return false;\r\n    }\r\n    for (let { offset, value } of exports.magicValues) {\r\n        if (dataView.getUint32(offset, true) !== value) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexports.isUF2Block = isUF2Block;\r\nfunction decodeBlock(data) {\r\n    if (data.length !== exports.blockSize) {\r\n        throw new UF2DecodeError(`Invalid UF2 block size. Block size must be exactly ${exports.blockSize} bytes.`);\r\n    }\r\n    const dataView = new DataView(data.buffer, data.byteOffset);\r\n    for (let { offset, value } of exports.magicValues) {\r\n        const actual = dataView.getUint32(offset, true);\r\n        if (actual !== value) {\r\n            throw new UF2DecodeError(`Invalid magic value at offset ${offset}: expected 0x${value.toString(16)}, ` +\r\n                `but found 0x${actual.toString(16)}.`);\r\n        }\r\n    }\r\n    const flags = dataView.getUint32(8, true);\r\n    const flashAddress = dataView.getUint32(12, true);\r\n    const payloadSize = dataView.getUint32(16, true);\r\n    const blockNumber = dataView.getUint32(20, true);\r\n    const totalBlocks = dataView.getUint32(24, true);\r\n    const boardFamily = dataView.getUint32(28, true);\r\n    if (payloadSize > exports.maxPayloadSize) {\r\n        throw new UF2DecodeError(`Invalid payload size ${payloadSize}. Should be ${exports.maxPayloadSize} bytes or less.`);\r\n    }\r\n    return {\r\n        flags,\r\n        flashAddress,\r\n        payload: data.slice(32, 32 + payloadSize),\r\n        blockNumber,\r\n        totalBlocks,\r\n        boardFamily,\r\n    };\r\n}\r\nexports.decodeBlock = decodeBlock;\r\nfunction encodeBlock(blockData, target = new Uint8Array(exports.blockSize), targetOffset = 0) {\r\n    if (target.length < targetOffset + exports.blockSize) {\r\n        throw new UF2EncodeError(`Can't encode block: target array is too small`);\r\n    }\r\n    if (blockData.payload.length > exports.maxPayloadSize) {\r\n        throw new UF2EncodeError(`Block payload too big; must be ${exports.maxPayloadSize} bytes or less.`);\r\n    }\r\n    target.fill(0, targetOffset, targetOffset + exports.blockSize);\r\n    const dataView = new DataView(target.buffer, target.byteOffset + targetOffset);\r\n    for (let { offset, value } of exports.magicValues) {\r\n        dataView.setUint32(offset, value, true);\r\n    }\r\n    dataView.setUint32(8, blockData.flags, true);\r\n    dataView.setUint32(12, blockData.flashAddress, true);\r\n    dataView.setUint32(16, blockData.payload.length, true);\r\n    dataView.setUint32(20, blockData.blockNumber, true);\r\n    dataView.setUint32(24, blockData.totalBlocks, true);\r\n    dataView.setUint32(28, blockData.boardFamily, true);\r\n    target.set(blockData.payload, targetOffset + 32);\r\n    return target;\r\n}\r\nexports.encodeBlock = encodeBlock;\r\n","\"use strict\";\r\n// Source: https://github.com/microsoft/uf2/blob/master/utils/uf2families.json\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.uf2Families = void 0;\r\nexports.uf2Families = [\r\n    {\r\n        id: 0x16573617,\r\n        shortName: 'ATMEGA32',\r\n        description: 'Microchip (Atmel) ATmega32',\r\n    },\r\n    {\r\n        id: 0x1851780a,\r\n        shortName: 'SAML21',\r\n        description: 'Microchip (Atmel) SAML21',\r\n    },\r\n    {\r\n        id: 0x1b57745f,\r\n        shortName: 'NRF52',\r\n        description: 'Nordic NRF52',\r\n    },\r\n    {\r\n        id: 0x1c5f21b0,\r\n        shortName: 'ESP32',\r\n        description: 'ESP32',\r\n    },\r\n    {\r\n        id: 0x1e1f432d,\r\n        shortName: 'STM32L1',\r\n        description: 'ST STM32L1xx',\r\n    },\r\n    {\r\n        id: 0x202e3a91,\r\n        shortName: 'STM32L0',\r\n        description: 'ST STM32L0xx',\r\n    },\r\n    {\r\n        id: 0x21460ff0,\r\n        shortName: 'STM32WL',\r\n        description: 'ST STM32WLxx',\r\n    },\r\n    {\r\n        id: 0x2abc77ec,\r\n        shortName: 'LPC55',\r\n        description: 'NXP LPC55xx',\r\n    },\r\n    {\r\n        id: 0x300f5633,\r\n        shortName: 'STM32G0',\r\n        description: 'ST STM32G0xx',\r\n    },\r\n    {\r\n        id: 0x31d228c6,\r\n        shortName: 'GD32F350',\r\n        description: 'GD32F350',\r\n    },\r\n    {\r\n        id: 0x04240bdf,\r\n        shortName: 'STM32L5',\r\n        description: 'ST STM32L5xx',\r\n    },\r\n    {\r\n        id: 0x4c71240a,\r\n        shortName: 'STM32G4',\r\n        description: 'ST STM32G4xx',\r\n    },\r\n    {\r\n        id: 0x4fb2d5bd,\r\n        shortName: 'MIMXRT10XX',\r\n        description: 'NXP i.MX RT10XX',\r\n    },\r\n    {\r\n        id: 0x53b80f00,\r\n        shortName: 'STM32F7',\r\n        description: 'ST STM32F7xx',\r\n    },\r\n    {\r\n        id: 0x55114460,\r\n        shortName: 'SAMD51',\r\n        description: 'Microchip (Atmel) SAMD51',\r\n    },\r\n    {\r\n        id: 0x57755a57,\r\n        shortName: 'STM32F4',\r\n        description: 'ST STM32F4xx',\r\n    },\r\n    {\r\n        id: 0x5a18069b,\r\n        shortName: 'FX2',\r\n        description: 'Cypress FX2',\r\n    },\r\n    {\r\n        id: 0x5d1a0a2e,\r\n        shortName: 'STM32F2',\r\n        description: 'ST STM32F2xx',\r\n    },\r\n    {\r\n        id: 0x5ee21072,\r\n        shortName: 'STM32F1',\r\n        description: 'ST STM32F103',\r\n    },\r\n    {\r\n        id: 0x621e937a,\r\n        shortName: 'NRF52833',\r\n        description: 'Nordic NRF52833',\r\n    },\r\n    {\r\n        id: 0x647824b6,\r\n        shortName: 'STM32F0',\r\n        description: 'ST STM32F0xx',\r\n    },\r\n    {\r\n        id: 0x68ed2b88,\r\n        shortName: 'SAMD21',\r\n        description: 'Microchip (Atmel) SAMD21',\r\n    },\r\n    {\r\n        id: 0x6b846188,\r\n        shortName: 'STM32F3',\r\n        description: 'ST STM32F3xx',\r\n    },\r\n    {\r\n        id: 0x6d0922fa,\r\n        shortName: 'STM32F407',\r\n        description: 'ST STM32F407',\r\n    },\r\n    {\r\n        id: 0x6db66082,\r\n        shortName: 'STM32H7',\r\n        description: 'ST STM32H7xx',\r\n    },\r\n    {\r\n        id: 0x70d16653,\r\n        shortName: 'STM32WB',\r\n        description: 'ST STM32WBxx',\r\n    },\r\n    {\r\n        id: 0x7eab61ed,\r\n        shortName: 'ESP8266',\r\n        description: 'ESP8266',\r\n    },\r\n    {\r\n        id: 0x7f83e793,\r\n        shortName: 'KL32L2',\r\n        description: 'NXP KL32L2x',\r\n    },\r\n    {\r\n        id: 0x8fb060fe,\r\n        shortName: 'STM32F407VG',\r\n        description: 'ST STM32F407VG',\r\n    },\r\n    {\r\n        id: 0xada52840,\r\n        shortName: 'NRF52840',\r\n        description: 'Nordic NRF52840',\r\n    },\r\n    {\r\n        id: 0xbfdd4eee,\r\n        shortName: 'ESP32S2',\r\n        description: 'ESP32-S2',\r\n    },\r\n    {\r\n        id: 0xc47e5767,\r\n        shortName: 'ESP32S3',\r\n        description: 'ESP32-S3',\r\n    },\r\n    {\r\n        id: 0xd42ba06c,\r\n        shortName: 'ESP32C3',\r\n        description: 'ESP32-C3',\r\n    },\r\n    {\r\n        id: 0x2b88d29c,\r\n        shortName: 'ESP32C2',\r\n        description: 'ESP32-C2',\r\n    },\r\n    {\r\n        id: 0x332726f6,\r\n        shortName: 'ESP32H2',\r\n        description: 'ESP32-H2',\r\n    },\r\n    {\r\n        id: 0xe48bff56,\r\n        shortName: 'RP2040',\r\n        description: 'Raspberry Pi RP2040',\r\n    },\r\n    {\r\n        id: 0x00ff6919,\r\n        shortName: 'STM32L4',\r\n        description: 'ST STM32L4xx',\r\n    },\r\n    {\r\n        id: 0x9af03e33,\r\n        shortName: 'GD32VF103',\r\n        description: 'GigaDevice GD32VF103',\r\n    },\r\n    {\r\n        id: 0x4f6ace52,\r\n        shortName: 'CSK4',\r\n        description: 'LISTENAI CSK300x/400x',\r\n    },\r\n    {\r\n        id: 0x6e7348a8,\r\n        shortName: 'CSK6',\r\n        description: 'LISTENAI CSK60xx',\r\n    },\r\n    {\r\n        id: 0x11de784a,\r\n        shortName: 'M0SENSE',\r\n        description: 'M0SENSE BL702',\r\n    },\r\n];\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function () {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function () {\n    return _version.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function () {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return _parse.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('md5').update(bytes).digest();\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\n\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    _crypto.default.randomFillSync(rnds8Pool);\n\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('sha1').update(bytes).digest();\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nvar _default = version;\nexports.default = _default;","module.exports = require(\"assert\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"tls\");","module.exports = require(\"util\");","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RealtimeClock = exports.ClockTimer = void 0;\r\nconst time_1 = require(\"../utils/time\");\r\nclass ClockTimer {\r\n    constructor(micros, callback) {\r\n        this.micros = micros;\r\n        this.callback = callback;\r\n        this.jsTimer = null;\r\n        this.timeLeft = this.micros;\r\n    }\r\n    schedule(currentMicros) {\r\n        this.jsTimer = setTimeout(this.callback, (this.micros - currentMicros) / 1000);\r\n    }\r\n    unschedule() {\r\n        if (this.jsTimer) {\r\n            clearTimeout(this.jsTimer);\r\n            this.jsTimer = null;\r\n        }\r\n    }\r\n    pause(currentMicros) {\r\n        this.timeLeft = this.micros - currentMicros;\r\n        this.unschedule();\r\n    }\r\n    resume(currentMicros) {\r\n        this.micros = currentMicros + this.timeLeft;\r\n        this.schedule(currentMicros);\r\n    }\r\n}\r\nexports.ClockTimer = ClockTimer;\r\nclass RealtimeClock {\r\n    constructor() {\r\n        this.baseTime = 0;\r\n        this.pauseTime = 0;\r\n        this.paused = true;\r\n        this.timers = new Set();\r\n    }\r\n    pause() {\r\n        if (!this.paused) {\r\n            for (const timer of this.timers) {\r\n                timer.pause(this.micros);\r\n            }\r\n            this.pauseTime = this.micros;\r\n            this.paused = true;\r\n        }\r\n    }\r\n    resume() {\r\n        if (this.paused) {\r\n            this.baseTime = time_1.getCurrentMicroseconds() - this.pauseTime;\r\n            this.paused = false;\r\n            for (const timer of this.timers) {\r\n                timer.resume(this.micros);\r\n            }\r\n        }\r\n    }\r\n    createTimer(deltaMicros, callback) {\r\n        const timer = new ClockTimer(this.micros + deltaMicros, () => {\r\n            this.timers.delete(timer);\r\n            callback();\r\n        });\r\n        timer.schedule(this.micros);\r\n        this.timers.add(timer);\r\n        return timer;\r\n    }\r\n    deleteTimer(timer) {\r\n        timer.unschedule();\r\n        this.timers.delete(timer);\r\n    }\r\n    get micros() {\r\n        return time_1.getCurrentMicroseconds() - this.baseTime;\r\n    }\r\n}\r\nexports.RealtimeClock = RealtimeClock;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CortexM0Core = exports.SYSM_CONTROL = exports.SYSM_PRIMASK = exports.SYSM_PSP = exports.SYSM_MSP = void 0;\r\nconst irq_1 = require(\"./irq\");\r\nconst rp2040_1 = require(\"./rp2040\");\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nconst EXC_RESET = 1;\r\nconst EXC_NMI = 2;\r\nconst EXC_HARDFAULT = 3;\r\nconst EXC_SVCALL = 11;\r\nconst EXC_PENDSV = 14;\r\nconst EXC_SYSTICK = 15;\r\nconst SYSM_APSR = 0;\r\nconst SYSM_IAPSR = 1;\r\nconst SYSM_EAPSR = 2;\r\nconst SYSM_XPSR = 3;\r\nconst SYSM_IPSR = 5;\r\nconst SYSM_EPSR = 6;\r\nconst SYSM_IEPSR = 7;\r\nexports.SYSM_MSP = 8;\r\nexports.SYSM_PSP = 9;\r\nexports.SYSM_PRIMASK = 16;\r\nexports.SYSM_CONTROL = 20;\r\n/* eslint-enable @typescript-eslint/no-unused-vars */\r\n// Lowest possible exception priority\r\nconst LOWEST_PRIORITY = 4;\r\nvar ExecutionMode;\r\n(function (ExecutionMode) {\r\n    ExecutionMode[ExecutionMode[\"Mode_Thread\"] = 0] = \"Mode_Thread\";\r\n    ExecutionMode[ExecutionMode[\"Mode_Handler\"] = 1] = \"Mode_Handler\";\r\n})(ExecutionMode || (ExecutionMode = {}));\r\nfunction signExtend8(value) {\r\n    return (value << 24) >> 24;\r\n}\r\nfunction signExtend16(value) {\r\n    return (value << 16) >> 16;\r\n}\r\nconst spRegister = 13;\r\nconst pcRegister = 15;\r\nvar StackPointerBank;\r\n(function (StackPointerBank) {\r\n    StackPointerBank[StackPointerBank[\"SPmain\"] = 0] = \"SPmain\";\r\n    StackPointerBank[StackPointerBank[\"SPprocess\"] = 1] = \"SPprocess\";\r\n})(StackPointerBank || (StackPointerBank = {}));\r\nconst LOG_NAME = 'CortexM0Core';\r\nclass CortexM0Core {\r\n    constructor(rp2040) {\r\n        this.rp2040 = rp2040;\r\n        this.registers = new Uint32Array(16);\r\n        this.bankedSP = 0;\r\n        this.cycles = 0;\r\n        this.eventRegistered = false;\r\n        this.waiting = false;\r\n        // APSR fields\r\n        this.N = false;\r\n        this.C = false;\r\n        this.Z = false;\r\n        this.V = false;\r\n        // How many bytes to rewind the last break instruction\r\n        this.breakRewind = 0;\r\n        // PRIMASK fields\r\n        this.PM = false;\r\n        // CONTROL fields\r\n        this.SPSEL = StackPointerBank.SPmain;\r\n        this.nPRIV = false;\r\n        this.currentMode = ExecutionMode.Mode_Thread;\r\n        this.IPSR = 0;\r\n        this.interruptNMIMask = 0;\r\n        this.pendingInterrupts = 0;\r\n        this.enabledInterrupts = 0;\r\n        this.interruptPriorities = [0xffffffff, 0x0, 0x0, 0x0];\r\n        this.pendingNMI = false;\r\n        this.pendingPendSV = false;\r\n        this.pendingSVCall = false;\r\n        this.pendingSystick = false;\r\n        this.interruptsUpdated = false;\r\n        this.VTOR = 0;\r\n        this.SHPR2 = 0;\r\n        this.SHPR3 = 0;\r\n        this.SP = 0xfffffffc;\r\n        this.bankedSP = 0xfffffffc;\r\n    }\r\n    get logger() {\r\n        return this.rp2040.logger;\r\n    }\r\n    reset() {\r\n        this.SP = this.rp2040.readUint32(this.VTOR);\r\n        this.PC = this.rp2040.readUint32(this.VTOR + 4) & 0xfffffffe;\r\n        this.cycles = 0;\r\n    }\r\n    get SP() {\r\n        return this.registers[13];\r\n    }\r\n    set SP(value) {\r\n        this.registers[13] = value & ~0x3;\r\n    }\r\n    get LR() {\r\n        return this.registers[14];\r\n    }\r\n    set LR(value) {\r\n        this.registers[14] = value;\r\n    }\r\n    get PC() {\r\n        return this.registers[15];\r\n    }\r\n    set PC(value) {\r\n        this.registers[15] = value;\r\n    }\r\n    get APSR() {\r\n        return ((this.N ? 0x80000000 : 0) |\r\n            (this.Z ? 0x40000000 : 0) |\r\n            (this.C ? 0x20000000 : 0) |\r\n            (this.V ? 0x10000000 : 0));\r\n    }\r\n    set APSR(value) {\r\n        this.N = !!(value & 0x80000000);\r\n        this.Z = !!(value & 0x40000000);\r\n        this.C = !!(value & 0x20000000);\r\n        this.V = !!(value & 0x10000000);\r\n    }\r\n    get xPSR() {\r\n        return this.APSR | this.IPSR | (1 << 24);\r\n    }\r\n    set xPSR(value) {\r\n        this.APSR = value;\r\n        this.IPSR = value & 0x3f;\r\n    }\r\n    checkCondition(cond) {\r\n        // Evaluate base condition.\r\n        let result = false;\r\n        switch (cond >> 1) {\r\n            case 0b000:\r\n                result = this.Z;\r\n                break;\r\n            case 0b001:\r\n                result = this.C;\r\n                break;\r\n            case 0b010:\r\n                result = this.N;\r\n                break;\r\n            case 0b011:\r\n                result = this.V;\r\n                break;\r\n            case 0b100:\r\n                result = this.C && !this.Z;\r\n                break;\r\n            case 0b101:\r\n                result = this.N === this.V;\r\n                break;\r\n            case 0b110:\r\n                result = this.N === this.V && !this.Z;\r\n                break;\r\n            case 0b111:\r\n                result = true;\r\n                break;\r\n        }\r\n        return cond & 0b1 && cond != 0b1111 ? !result : result;\r\n    }\r\n    readUint32(address) {\r\n        return this.rp2040.readUint32(address);\r\n    }\r\n    readUint16(address) {\r\n        return this.rp2040.readUint16(address);\r\n    }\r\n    readUint8(address) {\r\n        return this.rp2040.readUint8(address);\r\n    }\r\n    writeUint32(address, value) {\r\n        this.rp2040.writeUint32(address, value);\r\n    }\r\n    writeUint16(address, value) {\r\n        this.rp2040.writeUint16(address, value);\r\n    }\r\n    writeUint8(address, value) {\r\n        this.rp2040.writeUint8(address, value);\r\n    }\r\n    switchStack(stack) {\r\n        if (this.SPSEL !== stack) {\r\n            const temp = this.SP;\r\n            this.SP = this.bankedSP;\r\n            this.bankedSP = temp;\r\n            this.SPSEL = stack;\r\n        }\r\n    }\r\n    get SPprocess() {\r\n        return this.SPSEL === StackPointerBank.SPprocess ? this.SP : this.bankedSP;\r\n    }\r\n    set SPprocess(value) {\r\n        if (this.SPSEL === StackPointerBank.SPprocess) {\r\n            this.SP = value;\r\n        }\r\n        else {\r\n            this.bankedSP = value >>> 0;\r\n        }\r\n    }\r\n    get SPmain() {\r\n        return this.SPSEL === StackPointerBank.SPmain ? this.SP : this.bankedSP;\r\n    }\r\n    set SPmain(value) {\r\n        if (this.SPSEL === StackPointerBank.SPmain) {\r\n            this.SP = value;\r\n        }\r\n        else {\r\n            this.bankedSP = value >>> 0;\r\n        }\r\n    }\r\n    exceptionEntry(exceptionNumber) {\r\n        // PushStack:\r\n        let framePtr = 0;\r\n        let framePtrAlign = 0;\r\n        if (this.SPSEL && this.currentMode === ExecutionMode.Mode_Thread) {\r\n            framePtrAlign = this.SPprocess & 0b100 ? 1 : 0;\r\n            this.SPprocess = (this.SPprocess - 0x20) & ~0b100;\r\n            framePtr = this.SPprocess;\r\n        }\r\n        else {\r\n            framePtrAlign = this.SPmain & 0b100 ? 1 : 0;\r\n            this.SPmain = (this.SPmain - 0x20) & ~0b100;\r\n            framePtr = this.SPmain;\r\n        }\r\n        /* only the stack locations, not the store order, are architected */\r\n        this.writeUint32(framePtr, this.registers[0]);\r\n        this.writeUint32(framePtr + 0x4, this.registers[1]);\r\n        this.writeUint32(framePtr + 0x8, this.registers[2]);\r\n        this.writeUint32(framePtr + 0xc, this.registers[3]);\r\n        this.writeUint32(framePtr + 0x10, this.registers[12]);\r\n        this.writeUint32(framePtr + 0x14, this.LR);\r\n        this.writeUint32(framePtr + 0x18, this.PC & ~1); // ReturnAddress(ExceptionType);\r\n        this.writeUint32(framePtr + 0x1c, (this.xPSR & ~(1 << 9)) | (framePtrAlign << 9));\r\n        if (this.currentMode == ExecutionMode.Mode_Handler) {\r\n            this.LR = 0xfffffff1;\r\n        }\r\n        else {\r\n            if (!this.SPSEL) {\r\n                this.LR = 0xfffffff9;\r\n            }\r\n            else {\r\n                this.LR = 0xfffffffd;\r\n            }\r\n        }\r\n        // ExceptionTaken:\r\n        this.currentMode = ExecutionMode.Mode_Handler; // Enter Handler Mode, now Privileged\r\n        this.IPSR = exceptionNumber;\r\n        this.switchStack(StackPointerBank.SPmain);\r\n        this.eventRegistered = true;\r\n        const vectorTable = this.VTOR;\r\n        this.PC = this.readUint32(vectorTable + 4 * exceptionNumber);\r\n    }\r\n    exceptionReturn(excReturn) {\r\n        let framePtr = this.SPmain;\r\n        switch (excReturn & 0xf) {\r\n            case 0b0001: // Return to Handler\r\n                this.currentMode = ExecutionMode.Mode_Handler;\r\n                this.switchStack(StackPointerBank.SPmain);\r\n                break;\r\n            case 0b1001: // Return to Thread using Main stack\r\n                this.currentMode = ExecutionMode.Mode_Thread;\r\n                this.switchStack(StackPointerBank.SPmain);\r\n                break;\r\n            case 0b1101: // Return to Thread using Process stack\r\n                framePtr = this.SPprocess;\r\n                this.currentMode = ExecutionMode.Mode_Thread;\r\n                this.switchStack(StackPointerBank.SPprocess);\r\n                break;\r\n            // Assigning CurrentMode to Mode_Thread causes a drop in privilege\r\n            // if CONTROL.nPRIV is set to 1\r\n        }\r\n        // PopStack:\r\n        this.registers[0] = this.readUint32(framePtr); // Stack accesses are performed as Unprivileged accesses if\r\n        this.registers[1] = this.readUint32(framePtr + 0x4); // CONTROL<0>=='1' && EXC_RETURN<3>=='1' Privileged otherwise\r\n        this.registers[2] = this.readUint32(framePtr + 0x8);\r\n        this.registers[3] = this.readUint32(framePtr + 0xc);\r\n        this.registers[12] = this.readUint32(framePtr + 0x10);\r\n        this.LR = this.readUint32(framePtr + 0x14);\r\n        this.PC = this.readUint32(framePtr + 0x18);\r\n        const psr = this.readUint32(framePtr + 0x1c);\r\n        const framePtrAlign = psr & (1 << 9) ? 0b100 : 0;\r\n        switch (excReturn & 0xf) {\r\n            case 0b0001: // Returning to Handler mode\r\n                this.SPmain = (this.SPmain + 0x20) | framePtrAlign;\r\n                break;\r\n            case 0b1001: // Returning to Thread mode using Main stack\r\n                this.SPmain = (this.SPmain + 0x20) | framePtrAlign;\r\n                break;\r\n            case 0b1101: // Returning to Thread mode using Process stack\r\n                this.SPprocess = (this.SPprocess + 0x20) | framePtrAlign;\r\n                break;\r\n        }\r\n        this.APSR = psr & 0xf0000000;\r\n        const forceThread = this.currentMode == ExecutionMode.Mode_Thread && this.nPRIV;\r\n        this.IPSR = forceThread ? 0 : psr & 0x3f;\r\n        this.interruptsUpdated = true;\r\n        // Thumb bit should always be one! EPSR<24> = psr<24>; // Load valid EPSR bits from memory\r\n        this.eventRegistered = true;\r\n        // if CurrentMode == Mode_Thread && SCR.SLEEPONEXIT == '1' then\r\n        // SleepOnExit(); // IMPLEMENTATION DEFINED\r\n    }\r\n    get pendSVPriority() {\r\n        return (this.SHPR3 >> 22) & 0x3;\r\n    }\r\n    get svCallPriority() {\r\n        return this.SHPR2 >>> 30;\r\n    }\r\n    get systickPriority() {\r\n        return this.SHPR3 >>> 30;\r\n    }\r\n    exceptionPriority(n) {\r\n        switch (n) {\r\n            case EXC_RESET:\r\n                return -3;\r\n            case EXC_NMI:\r\n                return -2;\r\n            case EXC_HARDFAULT:\r\n                return -1;\r\n            case EXC_SVCALL:\r\n                return this.svCallPriority;\r\n            case EXC_PENDSV:\r\n                return this.pendSVPriority;\r\n            case EXC_SYSTICK:\r\n                return this.systickPriority;\r\n            default: {\r\n                if (n < 16) {\r\n                    return LOWEST_PRIORITY;\r\n                }\r\n                const intNum = n - 16;\r\n                for (let priority = 0; priority < 4; priority++) {\r\n                    if (this.interruptPriorities[priority] & (1 << intNum)) {\r\n                        return priority;\r\n                    }\r\n                }\r\n                return LOWEST_PRIORITY;\r\n            }\r\n        }\r\n    }\r\n    get vectPending() {\r\n        if (this.pendingNMI) {\r\n            return EXC_NMI;\r\n        }\r\n        const { svCallPriority, systickPriority, pendSVPriority, pendingInterrupts } = this;\r\n        for (let priority = 0; priority < LOWEST_PRIORITY; priority++) {\r\n            const levelInterrupts = pendingInterrupts & this.interruptPriorities[priority];\r\n            if (this.pendingSVCall && priority === svCallPriority) {\r\n                return EXC_SVCALL;\r\n            }\r\n            if (this.pendingPendSV && priority === pendSVPriority) {\r\n                return EXC_PENDSV;\r\n            }\r\n            if (this.pendingSystick && priority === systickPriority) {\r\n                return EXC_SYSTICK;\r\n            }\r\n            if (levelInterrupts) {\r\n                for (let interruptNumber = 0; interruptNumber < 32; interruptNumber++) {\r\n                    if (levelInterrupts & (1 << interruptNumber)) {\r\n                        return 16 + interruptNumber;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    setInterrupt(irq, value) {\r\n        const irqBit = 1 << irq;\r\n        if (value && !(this.pendingInterrupts & irqBit)) {\r\n            this.pendingInterrupts |= irqBit;\r\n            this.interruptsUpdated = true;\r\n            if (this.waiting && this.checkForInterrupts()) {\r\n                this.waiting = false;\r\n            }\r\n        }\r\n        else if (!value) {\r\n            this.pendingInterrupts &= ~irqBit;\r\n        }\r\n    }\r\n    checkForInterrupts() {\r\n        /* If we're waiting for an interrupt (i.e. WFI/WFE), the ARM says:\r\n           > If PRIMASK.PM is set to 1, an asynchronous exception that has a higher group priority than any\r\n           > active exception results in a WFI instruction exit. If the group priority of the exception is less than or\r\n           > equal to the execution group priority, the exception is ignored.\r\n        */\r\n        const currentPriority = this.waiting\r\n            ? this.PM\r\n                ? this.exceptionPriority(this.IPSR)\r\n                : LOWEST_PRIORITY\r\n            : Math.min(this.exceptionPriority(this.IPSR), this.PM ? 0 : LOWEST_PRIORITY);\r\n        const interruptSet = this.pendingInterrupts & this.enabledInterrupts;\r\n        const { svCallPriority, systickPriority, pendSVPriority } = this;\r\n        if (this.pendingNMI) {\r\n            this.pendingNMI = false;\r\n            this.exceptionEntry(EXC_NMI);\r\n            return true;\r\n        }\r\n        for (let priority = 0; priority < currentPriority; priority++) {\r\n            const levelInterrupts = interruptSet & this.interruptPriorities[priority];\r\n            if (this.pendingSVCall && priority === svCallPriority) {\r\n                this.pendingSVCall = false;\r\n                this.exceptionEntry(EXC_SVCALL);\r\n                return true;\r\n            }\r\n            if (this.pendingPendSV && priority === pendSVPriority) {\r\n                this.pendingPendSV = false;\r\n                this.exceptionEntry(EXC_PENDSV);\r\n                return true;\r\n            }\r\n            if (this.pendingSystick && priority === systickPriority) {\r\n                this.pendingSystick = false;\r\n                this.exceptionEntry(EXC_SYSTICK);\r\n                return true;\r\n            }\r\n            if (levelInterrupts) {\r\n                for (let interruptNumber = 0; interruptNumber < 32; interruptNumber++) {\r\n                    if (levelInterrupts & (1 << interruptNumber)) {\r\n                        if (interruptNumber > irq_1.MAX_HARDWARE_IRQ) {\r\n                            this.pendingInterrupts &= ~(1 << interruptNumber);\r\n                        }\r\n                        this.exceptionEntry(16 + interruptNumber);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.interruptsUpdated = false;\r\n        return false;\r\n    }\r\n    readSpecialRegister(sysm) {\r\n        switch (sysm) {\r\n            case SYSM_APSR:\r\n                return this.APSR;\r\n            case SYSM_XPSR:\r\n                return this.xPSR;\r\n            case SYSM_IPSR:\r\n                return this.IPSR;\r\n            case exports.SYSM_PRIMASK:\r\n                return this.PM ? 1 : 0;\r\n            case exports.SYSM_MSP:\r\n                return this.SPmain;\r\n            case exports.SYSM_PSP:\r\n                return this.SPprocess;\r\n            case exports.SYSM_CONTROL:\r\n                return (this.SPSEL === StackPointerBank.SPprocess ? 2 : 0) | (this.nPRIV ? 1 : 0);\r\n            default:\r\n                this.logger.warn(LOG_NAME, `MRS with unimplemented SYSm value: ${sysm}`);\r\n                return 0;\r\n        }\r\n    }\r\n    writeSpecialRegister(sysm, value) {\r\n        switch (sysm) {\r\n            case SYSM_APSR:\r\n                this.APSR = value;\r\n                break;\r\n            case SYSM_XPSR:\r\n                this.xPSR = value;\r\n                break;\r\n            case SYSM_IPSR:\r\n                this.IPSR = value;\r\n                break;\r\n            case exports.SYSM_PRIMASK:\r\n                this.PM = !!(value & 1);\r\n                this.interruptsUpdated = true;\r\n                break;\r\n            case exports.SYSM_MSP:\r\n                this.SPmain = value;\r\n                break;\r\n            case exports.SYSM_PSP:\r\n                this.SPprocess = value;\r\n                break;\r\n            case exports.SYSM_CONTROL:\r\n                this.nPRIV = !!(value & 1);\r\n                if (this.currentMode === ExecutionMode.Mode_Thread) {\r\n                    this.switchStack(value & 2 ? StackPointerBank.SPprocess : StackPointerBank.SPmain);\r\n                }\r\n                break;\r\n            default:\r\n                this.logger.warn(LOG_NAME, `MRS with unimplemented SYSm value: ${sysm}`);\r\n                return 0;\r\n        }\r\n    }\r\n    BXWritePC(address) {\r\n        if (this.currentMode == ExecutionMode.Mode_Handler && address >>> 28 == 0b1111) {\r\n            this.exceptionReturn(address & 0x0fffffff);\r\n        }\r\n        else {\r\n            this.PC = address & ~1;\r\n        }\r\n    }\r\n    substractUpdateFlags(minuend, subtrahend) {\r\n        const result = minuend - subtrahend;\r\n        this.N = !!(result & 0x80000000);\r\n        this.Z = (result & 0xffffffff) === 0;\r\n        this.C = minuend >= subtrahend;\r\n        this.V =\r\n            (!!(result & 0x80000000) && !(minuend & 0x80000000) && !!(subtrahend & 0x80000000)) ||\r\n                (!(result & 0x80000000) && !!(minuend & 0x80000000) && !(subtrahend & 0x80000000));\r\n        return result;\r\n    }\r\n    addUpdateFlags(addend1, addend2) {\r\n        const unsignedSum = (addend1 + addend2) >>> 0;\r\n        const signedSum = (addend1 | 0) + (addend2 | 0);\r\n        const result = addend1 + addend2;\r\n        this.N = !!(result & 0x80000000);\r\n        this.Z = (result & 0xffffffff) === 0;\r\n        this.C = result === unsignedSum ? false : true;\r\n        this.V = (result | 0) === signedSum ? false : true;\r\n        return result & 0xffffffff;\r\n    }\r\n    cyclesIO(addr, write = false) {\r\n        addr = addr >>> 0;\r\n        if (addr >= rp2040_1.SIO_START_ADDRESS && addr < rp2040_1.SIO_START_ADDRESS + 0x10000000) {\r\n            return 0;\r\n        }\r\n        if (addr >= rp2040_1.APB_START_ADDRESS && addr < rp2040_1.APB_START_ADDRESS + 0x10000000) {\r\n            return write ? 4 : 3;\r\n        }\r\n        return 1;\r\n    }\r\n    executeInstruction() {\r\n        if (this.interruptsUpdated) {\r\n            if (this.checkForInterrupts()) {\r\n                this.waiting = false;\r\n            }\r\n        }\r\n        // ARM Thumb instruction encoding - 16 bits / 2 bytes\r\n        const opcodePC = this.PC & ~1; //ensure no LSB set PC are executed\r\n        const opcode = this.readUint16(opcodePC);\r\n        const wideInstruction = opcode >> 12 === 0b1111 || opcode >> 11 === 0b11101;\r\n        const opcode2 = wideInstruction ? this.readUint16(opcodePC + 2) : 0;\r\n        this.PC += 2;\r\n        this.cycles++;\r\n        // ADCS\r\n        if (opcode >> 6 === 0b0100000101) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rdn = opcode & 0x7;\r\n            this.registers[Rdn] = this.addUpdateFlags(this.registers[Rm], this.registers[Rdn] + (this.C ? 1 : 0));\r\n        }\r\n        // ADD (register = SP plus immediate)\r\n        else if (opcode >> 11 === 0b10101) {\r\n            const imm8 = opcode & 0xff;\r\n            const Rd = (opcode >> 8) & 0x7;\r\n            this.registers[Rd] = this.SP + (imm8 << 2);\r\n        }\r\n        // ADD (SP plus immediate)\r\n        else if (opcode >> 7 === 0b101100000) {\r\n            const imm32 = (opcode & 0x7f) << 2;\r\n            this.SP += imm32;\r\n        }\r\n        // ADDS (Encoding T1)\r\n        else if (opcode >> 9 === 0b0001110) {\r\n            const imm3 = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            this.registers[Rd] = this.addUpdateFlags(this.registers[Rn], imm3);\r\n        }\r\n        // ADDS (Encoding T2)\r\n        else if (opcode >> 11 === 0b00110) {\r\n            const imm8 = opcode & 0xff;\r\n            const Rdn = (opcode >> 8) & 0x7;\r\n            this.registers[Rdn] = this.addUpdateFlags(this.registers[Rdn], imm8);\r\n        }\r\n        // ADDS (register)\r\n        else if (opcode >> 9 === 0b0001100) {\r\n            const Rm = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            this.registers[Rd] = this.addUpdateFlags(this.registers[Rn], this.registers[Rm]);\r\n        }\r\n        // ADD (register)\r\n        else if (opcode >> 8 === 0b01000100) {\r\n            const Rm = (opcode >> 3) & 0xf;\r\n            const Rdn = ((opcode & 0x80) >> 4) | (opcode & 0x7);\r\n            const leftValue = Rdn === pcRegister ? this.PC + 2 : this.registers[Rdn];\r\n            const rightValue = this.registers[Rm];\r\n            const result = leftValue + rightValue;\r\n            if (Rdn !== spRegister && Rdn !== pcRegister) {\r\n                this.registers[Rdn] = result;\r\n            }\r\n            else if (Rdn === pcRegister) {\r\n                this.registers[Rdn] = result & ~0x1;\r\n                this.cycles++;\r\n            }\r\n            else if (Rdn === spRegister) {\r\n                this.registers[Rdn] = result & ~0x3;\r\n            }\r\n        }\r\n        // ADR\r\n        else if (opcode >> 11 === 0b10100) {\r\n            const imm8 = opcode & 0xff;\r\n            const Rd = (opcode >> 8) & 0x7;\r\n            this.registers[Rd] = (opcodePC & 0xfffffffc) + 4 + (imm8 << 2);\r\n        }\r\n        // ANDS (Encoding T2)\r\n        else if (opcode >> 6 === 0b0100000000) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rdn = opcode & 0x7;\r\n            const result = this.registers[Rdn] & this.registers[Rm];\r\n            this.registers[Rdn] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = (result & 0xffffffff) === 0;\r\n        }\r\n        // ASRS (immediate)\r\n        else if (opcode >> 11 === 0b00010) {\r\n            const imm5 = (opcode >> 6) & 0x1f;\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            const input = this.registers[Rm];\r\n            const result = imm5 ? input >> imm5 : (input & 0x80000000) >> 31;\r\n            this.registers[Rd] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = (result & 0xffffffff) === 0;\r\n            if (imm5) {\r\n                this.C = input & (1 << (imm5 - 1)) ? true : false;\r\n            }\r\n        }\r\n        // ASRS (register)\r\n        else if (opcode >> 6 === 0b0100000100) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rdn = opcode & 0x7;\r\n            const input = this.registers[Rdn];\r\n            const shiftN = (this.registers[Rm] & 0xff) < 32 ? this.registers[Rm] & 0xff : 32;\r\n            const result = shiftN < 32 ? input >> shiftN : (input & 0x80000000) >> 31;\r\n            this.registers[Rdn] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = (result & 0xffffffff) === 0;\r\n            if (shiftN) {\r\n                this.C = input & (1 << (shiftN - 1)) ? true : false;\r\n            }\r\n        }\r\n        // B (with cond)\r\n        else if (opcode >> 12 === 0b1101 && ((opcode >> 9) & 0x7) !== 0b111) {\r\n            let imm8 = (opcode & 0xff) << 1;\r\n            const cond = (opcode >> 8) & 0xf;\r\n            if (imm8 & (1 << 8)) {\r\n                imm8 = (imm8 & 0x1ff) - 0x200;\r\n            }\r\n            if (this.checkCondition(cond)) {\r\n                this.PC += imm8 + 2;\r\n                this.cycles++;\r\n            }\r\n        }\r\n        // B\r\n        else if (opcode >> 11 === 0b11100) {\r\n            let imm11 = (opcode & 0x7ff) << 1;\r\n            if (imm11 & (1 << 11)) {\r\n                imm11 = (imm11 & 0x7ff) - 0x800;\r\n            }\r\n            this.PC += imm11 + 2;\r\n            this.cycles++;\r\n        }\r\n        // BICS\r\n        else if (opcode >> 6 === 0b0100001110) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rdn = opcode & 0x7;\r\n            const result = (this.registers[Rdn] &= ~this.registers[Rm]);\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = result === 0;\r\n        }\r\n        // BKPT\r\n        else if (opcode >> 8 === 0b10111110) {\r\n            const imm8 = opcode & 0xff;\r\n            this.breakRewind = 2;\r\n            this.rp2040.onBreak(imm8);\r\n        }\r\n        // BL\r\n        else if (opcode >> 11 === 0b11110 && opcode2 >> 14 === 0b11 && ((opcode2 >> 12) & 0x1) == 1) {\r\n            const imm11 = opcode2 & 0x7ff;\r\n            const J2 = (opcode2 >> 11) & 0x1;\r\n            const J1 = (opcode2 >> 13) & 0x1;\r\n            const imm10 = opcode & 0x3ff;\r\n            const S = (opcode >> 10) & 0x1;\r\n            const I1 = 1 - (S ^ J1);\r\n            const I2 = 1 - (S ^ J2);\r\n            const imm32 = ((S ? 0b11111111 : 0) << 24) | ((I1 << 23) | (I2 << 22) | (imm10 << 12) | (imm11 << 1));\r\n            this.LR = (this.PC + 2) | 0x1;\r\n            this.PC += 2 + imm32;\r\n            this.cycles += 2;\r\n        }\r\n        // BLX\r\n        else if (opcode >> 7 === 0b010001111 && (opcode & 0x7) === 0) {\r\n            const Rm = (opcode >> 3) & 0xf;\r\n            this.LR = this.PC | 0x1;\r\n            this.PC = this.registers[Rm] & ~1;\r\n            this.cycles++;\r\n        }\r\n        // BX\r\n        else if (opcode >> 7 === 0b010001110 && (opcode & 0x7) === 0) {\r\n            const Rm = (opcode >> 3) & 0xf;\r\n            this.BXWritePC(this.registers[Rm]);\r\n            this.cycles++;\r\n        }\r\n        // CMN (register)\r\n        else if (opcode >> 6 === 0b0100001011) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rn = opcode & 0x7;\r\n            this.addUpdateFlags(this.registers[Rn], this.registers[Rm]);\r\n        }\r\n        // CMP immediate\r\n        else if (opcode >> 11 === 0b00101) {\r\n            const Rn = (opcode >> 8) & 0x7;\r\n            const imm8 = opcode & 0xff;\r\n            this.substractUpdateFlags(this.registers[Rn], imm8);\r\n        }\r\n        // CMP (register)\r\n        else if (opcode >> 6 === 0b0100001010) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rn = opcode & 0x7;\r\n            this.substractUpdateFlags(this.registers[Rn], this.registers[Rm]);\r\n        }\r\n        // CMP (register) encoding T2\r\n        else if (opcode >> 8 === 0b01000101) {\r\n            const Rm = (opcode >> 3) & 0xf;\r\n            const Rn = ((opcode >> 4) & 0x8) | (opcode & 0x7);\r\n            this.substractUpdateFlags(this.registers[Rn], this.registers[Rm]);\r\n        }\r\n        // CPSID i\r\n        else if (opcode === 0xb672) {\r\n            this.PM = true;\r\n        }\r\n        // CPSIE i\r\n        else if (opcode === 0xb662) {\r\n            this.PM = false;\r\n            this.interruptsUpdated = true;\r\n        }\r\n        // DMB SY\r\n        else if (opcode === 0xf3bf && (opcode2 & 0xfff0) === 0x8f50) {\r\n            this.PC += 2;\r\n            this.cycles += 2;\r\n        }\r\n        // DSB SY\r\n        else if (opcode === 0xf3bf && (opcode2 & 0xfff0) === 0x8f40) {\r\n            this.PC += 2;\r\n            this.cycles += 2;\r\n        }\r\n        // EORS\r\n        else if (opcode >> 6 === 0b0100000001) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rdn = opcode & 0x7;\r\n            const result = this.registers[Rm] ^ this.registers[Rdn];\r\n            this.registers[Rdn] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = result === 0;\r\n        }\r\n        // ISB SY\r\n        else if (opcode === 0xf3bf && (opcode2 & 0xfff0) === 0x8f60) {\r\n            this.PC += 2;\r\n            this.cycles += 2;\r\n        }\r\n        // LDMIA\r\n        else if (opcode >> 11 === 0b11001) {\r\n            const Rn = (opcode >> 8) & 0x7;\r\n            const registers = opcode & 0xff;\r\n            let address = this.registers[Rn];\r\n            for (let i = 0; i < 8; i++) {\r\n                if (registers & (1 << i)) {\r\n                    this.registers[i] = this.readUint32(address);\r\n                    address += 4;\r\n                    this.cycles++;\r\n                }\r\n            }\r\n            // Write back\r\n            if (!(registers & (1 << Rn))) {\r\n                this.registers[Rn] = address;\r\n            }\r\n        }\r\n        // LDR (immediate)\r\n        else if (opcode >> 11 === 0b01101) {\r\n            const imm5 = ((opcode >> 6) & 0x1f) << 2;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const addr = this.registers[Rn] + imm5;\r\n            this.cycles += this.cyclesIO(addr);\r\n            this.registers[Rt] = this.readUint32(addr);\r\n        }\r\n        // LDR (sp + immediate)\r\n        else if (opcode >> 11 === 0b10011) {\r\n            const Rt = (opcode >> 8) & 0x7;\r\n            const imm8 = opcode & 0xff;\r\n            const addr = this.SP + (imm8 << 2);\r\n            this.cycles += this.cyclesIO(addr);\r\n            this.registers[Rt] = this.readUint32(addr);\r\n        }\r\n        // LDR (literal)\r\n        else if (opcode >> 11 === 0b01001) {\r\n            const imm8 = (opcode & 0xff) << 2;\r\n            const Rt = (opcode >> 8) & 7;\r\n            const nextPC = this.PC + 2;\r\n            const addr = (nextPC & 0xfffffffc) + imm8;\r\n            this.cycles += this.cyclesIO(addr);\r\n            this.registers[Rt] = this.readUint32(addr);\r\n        }\r\n        // LDR (register)\r\n        else if (opcode >> 9 === 0b0101100) {\r\n            const Rm = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const addr = this.registers[Rm] + this.registers[Rn];\r\n            this.cycles += this.cyclesIO(addr);\r\n            this.registers[Rt] = this.readUint32(addr);\r\n        }\r\n        // LDRB (immediate)\r\n        else if (opcode >> 11 === 0b01111) {\r\n            const imm5 = (opcode >> 6) & 0x1f;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const addr = this.registers[Rn] + imm5;\r\n            this.cycles += this.cyclesIO(addr);\r\n            this.registers[Rt] = this.readUint8(addr);\r\n        }\r\n        // LDRB (register)\r\n        else if (opcode >> 9 === 0b0101110) {\r\n            const Rm = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const addr = this.registers[Rm] + this.registers[Rn];\r\n            this.cycles += this.cyclesIO(addr);\r\n            this.registers[Rt] = this.readUint8(addr);\r\n        }\r\n        // LDRH (immediate)\r\n        else if (opcode >> 11 === 0b10001) {\r\n            const imm5 = (opcode >> 6) & 0x1f;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const addr = this.registers[Rn] + (imm5 << 1);\r\n            this.cycles += this.cyclesIO(addr);\r\n            this.registers[Rt] = this.readUint16(addr);\r\n        }\r\n        // LDRH (register)\r\n        else if (opcode >> 9 === 0b0101101) {\r\n            const Rm = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const addr = this.registers[Rm] + this.registers[Rn];\r\n            this.cycles += this.cyclesIO(addr);\r\n            this.registers[Rt] = this.readUint16(addr);\r\n        }\r\n        // LDRSB\r\n        else if (opcode >> 9 === 0b0101011) {\r\n            const Rm = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const addr = this.registers[Rm] + this.registers[Rn];\r\n            this.cycles += this.cyclesIO(addr);\r\n            this.registers[Rt] = signExtend8(this.readUint8(addr));\r\n        }\r\n        // LDRSH\r\n        else if (opcode >> 9 === 0b0101111) {\r\n            const Rm = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const addr = this.registers[Rm] + this.registers[Rn];\r\n            this.cycles += this.cyclesIO(addr);\r\n            this.registers[Rt] = signExtend16(this.readUint16(addr));\r\n        }\r\n        // LSLS (immediate)\r\n        else if (opcode >> 11 === 0b00000) {\r\n            const imm5 = (opcode >> 6) & 0x1f;\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            const input = this.registers[Rm];\r\n            const result = input << imm5;\r\n            this.registers[Rd] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = result === 0;\r\n            this.C = imm5 ? !!(input & (1 << (32 - imm5))) : this.C;\r\n        }\r\n        // LSLS (register)\r\n        else if (opcode >> 6 === 0b0100000010) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rdn = opcode & 0x7;\r\n            const input = this.registers[Rdn];\r\n            const shiftCount = this.registers[Rm] & 0xff;\r\n            const result = shiftCount >= 32 ? 0 : input << shiftCount;\r\n            this.registers[Rdn] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = result === 0;\r\n            this.C = shiftCount ? !!(input & (1 << (32 - shiftCount))) : this.C;\r\n        }\r\n        // LSRS (immediate)\r\n        else if (opcode >> 11 === 0b00001) {\r\n            const imm5 = (opcode >> 6) & 0x1f;\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            const input = this.registers[Rm];\r\n            const result = imm5 ? input >>> imm5 : 0;\r\n            this.registers[Rd] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = result === 0;\r\n            this.C = !!((input >>> (imm5 ? imm5 - 1 : 31)) & 0x1);\r\n        }\r\n        // LSRS (register)\r\n        else if (opcode >> 6 === 0b0100000011) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rdn = opcode & 0x7;\r\n            const shiftAmount = this.registers[Rm] & 0xff;\r\n            const input = this.registers[Rdn];\r\n            const result = shiftAmount < 32 ? input >>> shiftAmount : 0;\r\n            this.registers[Rdn] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = result === 0;\r\n            this.C = shiftAmount <= 32 ? !!((input >>> (shiftAmount - 1)) & 0x1) : false;\r\n        }\r\n        // MOV\r\n        else if (opcode >> 8 === 0b01000110) {\r\n            const Rm = (opcode >> 3) & 0xf;\r\n            const Rd = ((opcode >> 4) & 0x8) | (opcode & 0x7);\r\n            let value = Rm === pcRegister ? this.PC + 2 : this.registers[Rm];\r\n            if (Rd === pcRegister) {\r\n                this.cycles++;\r\n                value &= ~1;\r\n            }\r\n            else if (Rd === spRegister) {\r\n                value &= ~3;\r\n            }\r\n            this.registers[Rd] = value;\r\n        }\r\n        // MOVS\r\n        else if (opcode >> 11 === 0b00100) {\r\n            const value = opcode & 0xff;\r\n            const Rd = (opcode >> 8) & 7;\r\n            this.registers[Rd] = value;\r\n            this.N = !!(value & 0x80000000);\r\n            this.Z = value === 0;\r\n        }\r\n        // MRS\r\n        else if (opcode === 0b1111001111101111 && opcode2 >> 12 == 0b1000) {\r\n            const SYSm = opcode2 & 0xff;\r\n            const Rd = (opcode2 >> 8) & 0xf;\r\n            this.registers[Rd] = this.readSpecialRegister(SYSm);\r\n            this.PC += 2;\r\n            this.cycles += 2;\r\n        }\r\n        // MSR\r\n        else if (opcode >> 4 === 0b111100111000 && opcode2 >> 8 == 0b10001000) {\r\n            const SYSm = opcode2 & 0xff;\r\n            const Rn = opcode & 0xf;\r\n            this.writeSpecialRegister(SYSm, this.registers[Rn]);\r\n            this.PC += 2;\r\n            this.cycles += 2;\r\n        }\r\n        // MULS\r\n        else if (opcode >> 6 === 0b0100001101) {\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rdm = opcode & 0x7;\r\n            const result = Math.imul(this.registers[Rn], this.registers[Rdm]);\r\n            this.registers[Rdm] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = (result & 0xffffffff) === 0;\r\n        }\r\n        // MVNS\r\n        else if (opcode >> 6 === 0b0100001111) {\r\n            const Rm = (opcode >> 3) & 7;\r\n            const Rd = opcode & 7;\r\n            const result = ~this.registers[Rm];\r\n            this.registers[Rd] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = result === 0;\r\n        }\r\n        // ORRS (Encoding T2)\r\n        else if (opcode >> 6 === 0b0100001100) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rdn = opcode & 0x7;\r\n            const result = this.registers[Rdn] | this.registers[Rm];\r\n            this.registers[Rdn] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = (result & 0xffffffff) === 0;\r\n        }\r\n        // POP\r\n        else if (opcode >> 9 === 0b1011110) {\r\n            const P = (opcode >> 8) & 1;\r\n            let address = this.SP;\r\n            for (let i = 0; i <= 7; i++) {\r\n                if (opcode & (1 << i)) {\r\n                    this.registers[i] = this.readUint32(address);\r\n                    address += 4;\r\n                    this.cycles++;\r\n                }\r\n            }\r\n            if (P) {\r\n                this.SP = address + 4;\r\n                this.BXWritePC(this.readUint32(address));\r\n                this.cycles += 2;\r\n            }\r\n            else {\r\n                this.SP = address;\r\n            }\r\n        }\r\n        // PUSH\r\n        else if (opcode >> 9 === 0b1011010) {\r\n            let bitCount = 0;\r\n            for (let i = 0; i <= 8; i++) {\r\n                if (opcode & (1 << i)) {\r\n                    bitCount++;\r\n                }\r\n            }\r\n            let address = this.SP - 4 * bitCount;\r\n            for (let i = 0; i <= 7; i++) {\r\n                if (opcode & (1 << i)) {\r\n                    this.writeUint32(address, this.registers[i]);\r\n                    this.cycles++;\r\n                    address += 4;\r\n                }\r\n            }\r\n            if (opcode & (1 << 8)) {\r\n                this.writeUint32(address, this.registers[14]);\r\n            }\r\n            this.SP -= 4 * bitCount;\r\n        }\r\n        // REV\r\n        else if (opcode >> 6 === 0b1011101000) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            const input = this.registers[Rm];\r\n            this.registers[Rd] =\r\n                ((input & 0xff) << 24) |\r\n                    (((input >> 8) & 0xff) << 16) |\r\n                    (((input >> 16) & 0xff) << 8) |\r\n                    ((input >> 24) & 0xff);\r\n        }\r\n        // REV16\r\n        else if (opcode >> 6 === 0b1011101001) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            const input = this.registers[Rm];\r\n            this.registers[Rd] =\r\n                (((input >> 16) & 0xff) << 24) |\r\n                    (((input >> 24) & 0xff) << 16) |\r\n                    ((input & 0xff) << 8) |\r\n                    ((input >> 8) & 0xff);\r\n        }\r\n        // REVSH\r\n        else if (opcode >> 6 === 0b1011101011) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            const input = this.registers[Rm];\r\n            this.registers[Rd] = signExtend16(((input & 0xff) << 8) | ((input >> 8) & 0xff));\r\n        }\r\n        // ROR\r\n        else if (opcode >> 6 === 0b0100000111) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rdn = opcode & 0x7;\r\n            const input = this.registers[Rdn];\r\n            const shift = (this.registers[Rm] & 0xff) % 32;\r\n            const result = (input >>> shift) | (input << (32 - shift));\r\n            this.registers[Rdn] = result;\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = result === 0;\r\n            this.C = !!(result & 0x80000000);\r\n        }\r\n        // NEGS / RSBS\r\n        else if (opcode >> 6 === 0b0100001001) {\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            this.registers[Rd] = this.substractUpdateFlags(0, this.registers[Rn]);\r\n        }\r\n        // NOP\r\n        else if (opcode === 0b1011111100000000) {\r\n            // Do nothing!\r\n        }\r\n        // SBCS (Encoding T1)\r\n        else if (opcode >> 6 === 0b0100000110) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rdn = opcode & 0x7;\r\n            this.registers[Rdn] = this.substractUpdateFlags(this.registers[Rdn], this.registers[Rm] + (1 - (this.C ? 1 : 0)));\r\n        }\r\n        // SEV\r\n        else if (opcode === 0b1011111101000000) {\r\n            this.logger.info(LOG_NAME, 'SEV');\r\n        }\r\n        // STMIA\r\n        else if (opcode >> 11 === 0b11000) {\r\n            const Rn = (opcode >> 8) & 0x7;\r\n            const registers = opcode & 0xff;\r\n            let address = this.registers[Rn];\r\n            for (let i = 0; i < 8; i++) {\r\n                if (registers & (1 << i)) {\r\n                    this.writeUint32(address, this.registers[i]);\r\n                    address += 4;\r\n                    this.cycles++;\r\n                }\r\n            }\r\n            // Write back\r\n            if (!(registers & (1 << Rn))) {\r\n                this.registers[Rn] = address;\r\n            }\r\n        }\r\n        // STR (immediate)\r\n        else if (opcode >> 11 === 0b01100) {\r\n            const imm5 = ((opcode >> 6) & 0x1f) << 2;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const address = this.registers[Rn] + imm5;\r\n            this.cycles += this.cyclesIO(address, true);\r\n            this.writeUint32(address, this.registers[Rt]);\r\n        }\r\n        // STR (sp + immediate)\r\n        else if (opcode >> 11 === 0b10010) {\r\n            const Rt = (opcode >> 8) & 0x7;\r\n            const imm8 = opcode & 0xff;\r\n            const address = this.SP + (imm8 << 2);\r\n            this.cycles += this.cyclesIO(address, true);\r\n            this.writeUint32(address, this.registers[Rt]);\r\n        }\r\n        // STR (register)\r\n        else if (opcode >> 9 === 0b0101000) {\r\n            const Rm = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const address = this.registers[Rm] + this.registers[Rn];\r\n            this.cycles += this.cyclesIO(address, true);\r\n            this.writeUint32(address, this.registers[Rt]);\r\n        }\r\n        // STRB (immediate)\r\n        else if (opcode >> 11 === 0b01110) {\r\n            const imm5 = (opcode >> 6) & 0x1f;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const address = this.registers[Rn] + imm5;\r\n            this.cycles += this.cyclesIO(address, true);\r\n            this.writeUint8(address, this.registers[Rt]);\r\n        }\r\n        // STRB (register)\r\n        else if (opcode >> 9 === 0b0101010) {\r\n            const Rm = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const address = this.registers[Rm] + this.registers[Rn];\r\n            this.cycles += this.cyclesIO(address, true);\r\n            this.writeUint8(address, this.registers[Rt]);\r\n        }\r\n        // STRH (immediate)\r\n        else if (opcode >> 11 === 0b10000) {\r\n            const imm5 = ((opcode >> 6) & 0x1f) << 1;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const address = this.registers[Rn] + imm5;\r\n            this.cycles += this.cyclesIO(address, true);\r\n            this.writeUint16(address, this.registers[Rt]);\r\n        }\r\n        // STRH (register)\r\n        else if (opcode >> 9 === 0b0101001) {\r\n            const Rm = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rt = opcode & 0x7;\r\n            const address = this.registers[Rm] + this.registers[Rn];\r\n            this.cycles += this.cyclesIO(address, true);\r\n            this.writeUint16(address, this.registers[Rt]);\r\n        }\r\n        // SUB (SP minus immediate)\r\n        else if (opcode >> 7 === 0b101100001) {\r\n            const imm32 = (opcode & 0x7f) << 2;\r\n            this.SP -= imm32;\r\n        }\r\n        // SUBS (Encoding T1)\r\n        else if (opcode >> 9 === 0b0001111) {\r\n            const imm3 = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            this.registers[Rd] = this.substractUpdateFlags(this.registers[Rn], imm3);\r\n        }\r\n        // SUBS (Encoding T2)\r\n        else if (opcode >> 11 === 0b00111) {\r\n            const imm8 = opcode & 0xff;\r\n            const Rdn = (opcode >> 8) & 0x7;\r\n            this.registers[Rdn] = this.substractUpdateFlags(this.registers[Rdn], imm8);\r\n        }\r\n        // SUBS (register)\r\n        else if (opcode >> 9 === 0b0001101) {\r\n            const Rm = (opcode >> 6) & 0x7;\r\n            const Rn = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            this.registers[Rd] = this.substractUpdateFlags(this.registers[Rn], this.registers[Rm]);\r\n        }\r\n        // SVC\r\n        else if (opcode >> 8 === 0b11011111) {\r\n            this.pendingSVCall = true;\r\n            this.interruptsUpdated = true;\r\n        }\r\n        // SXTB\r\n        else if (opcode >> 6 === 0b1011001001) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            this.registers[Rd] = signExtend8(this.registers[Rm]);\r\n        }\r\n        // SXTH\r\n        else if (opcode >> 6 === 0b1011001000) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            this.registers[Rd] = signExtend16(this.registers[Rm]);\r\n        }\r\n        // TST\r\n        else if (opcode >> 6 == 0b0100001000) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rn = opcode & 0x7;\r\n            const result = this.registers[Rn] & this.registers[Rm];\r\n            this.N = !!(result & 0x80000000);\r\n            this.Z = result === 0;\r\n        }\r\n        // UDF\r\n        else if (opcode >> 8 == 0b11011110) {\r\n            const imm8 = opcode & 0xff;\r\n            this.breakRewind = 2;\r\n            this.rp2040.onBreak(imm8);\r\n        }\r\n        // UDF (Encoding T2)\r\n        else if (opcode >> 4 === 0b111101111111 && opcode2 >> 12 === 0b1010) {\r\n            const imm4 = opcode & 0xf;\r\n            const imm12 = opcode2 & 0xfff;\r\n            this.breakRewind = 4;\r\n            this.rp2040.onBreak((imm4 << 12) | imm12);\r\n            this.PC += 2;\r\n        }\r\n        // UXTB\r\n        else if (opcode >> 6 == 0b1011001011) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            this.registers[Rd] = this.registers[Rm] & 0xff;\r\n        }\r\n        // UXTH\r\n        else if (opcode >> 6 == 0b1011001010) {\r\n            const Rm = (opcode >> 3) & 0x7;\r\n            const Rd = opcode & 0x7;\r\n            this.registers[Rd] = this.registers[Rm] & 0xffff;\r\n        }\r\n        // WFE\r\n        else if (opcode === 0b1011111100100000) {\r\n            this.cycles++;\r\n            if (this.eventRegistered) {\r\n                this.eventRegistered = false;\r\n            }\r\n            else {\r\n                this.waiting = true;\r\n            }\r\n        }\r\n        // WFI\r\n        else if (opcode === 0b1011111100110000) {\r\n            this.cycles++;\r\n            this.waiting = true;\r\n        }\r\n        // YIELD\r\n        else if (opcode === 0b1011111100010000) {\r\n            // do nothing for now. Wait for event!\r\n            this.logger.info(LOG_NAME, 'Yield');\r\n        }\r\n        else {\r\n            this.logger.warn(LOG_NAME, `Warning: Instruction at ${opcodePC.toString(16)} is not implemented yet!`);\r\n            this.logger.warn(LOG_NAME, `Opcode: 0x${opcode.toString(16)} (0x${opcode2.toString(16)})`);\r\n        }\r\n    }\r\n}\r\nexports.CortexM0Core = CortexM0Core;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GDBConnection = void 0;\r\nconst gdb_server_1 = require(\"./gdb-server\");\r\nconst gdb_utils_1 = require(\"./gdb-utils\");\r\nclass GDBConnection {\r\n    constructor(server, onResponse) {\r\n        this.server = server;\r\n        this.onResponse = onResponse;\r\n        this.rp2040 = this.server.rp2040;\r\n        this.buf = '';\r\n        server.addConnection(this);\r\n        onResponse('+');\r\n    }\r\n    feedData(data) {\r\n        const { onResponse } = this;\r\n        if (data.charCodeAt(0) === 3) {\r\n            this.server.info('BREAK');\r\n            this.rp2040.stop();\r\n            onResponse(gdb_utils_1.gdbMessage(gdb_server_1.STOP_REPLY_SIGINT));\r\n            data = data.slice(1);\r\n        }\r\n        this.buf += data;\r\n        for (;;) {\r\n            const dolla = this.buf.indexOf('$');\r\n            const hash = this.buf.indexOf('#', dolla + 1);\r\n            if (dolla < 0 || hash < 0 || hash + 2 > this.buf.length) {\r\n                return;\r\n            }\r\n            const cmd = this.buf.substring(dolla + 1, hash);\r\n            const cksum = this.buf.substr(hash + 1, 2);\r\n            this.buf = this.buf.substr(hash + 2);\r\n            if (gdb_utils_1.gdbChecksum(cmd) !== cksum) {\r\n                this.server.warn(`GDB checksum error in message: ${cmd}`);\r\n                onResponse('-');\r\n            }\r\n            else {\r\n                onResponse('+');\r\n                this.server.debug(`>${cmd}`);\r\n                const response = this.server.processGDBMessage(cmd);\r\n                if (response) {\r\n                    this.server.debug(`<${response}`);\r\n                    onResponse(response);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onBreakpoint() {\r\n        try {\r\n            this.onResponse(gdb_utils_1.gdbMessage(gdb_server_1.STOP_REPLY_TRAP));\r\n        }\r\n        catch (e) {\r\n            this.server.removeConnection(this);\r\n        }\r\n    }\r\n}\r\nexports.GDBConnection = GDBConnection;\r\n","\"use strict\";\r\n/**\r\n * RP2040 GDB Server\r\n *\r\n * Copyright (C) 2021, Uri Shaked\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GDBServer = exports.STOP_REPLY_TRAP = exports.STOP_REPLY_SIGINT = void 0;\r\nconst cortex_m0_core_1 = require(\"../cortex-m0-core\");\r\nconst logging_1 = require(\"../utils/logging\");\r\nconst gdb_utils_1 = require(\"./gdb-utils\");\r\nexports.STOP_REPLY_SIGINT = 'S02';\r\nexports.STOP_REPLY_TRAP = 'S05';\r\n/* string value: armv6m-none-unknown-eabi */\r\nconst lldbTriple = '61726d76366d2d6e6f6e652d756e6b6e6f776e2d65616269';\r\nconst registers = [\r\n    `name:r0;bitsize:32;offset:0;encoding:int;format:hex;set:General Purpose Registers;generic:arg1;gcc:0;dwarf:0;`,\r\n    `name:r1;bitsize:32;offset:4;encoding:int;format:hex;set:General Purpose Registers;generic:arg2;gcc:1;dwarf:1;`,\r\n    `name:r2;bitsize:32;offset:8;encoding:int;format:hex;set:General Purpose Registers;generic:arg3;gcc:2;dwarf:2;`,\r\n    `name:r3;bitsize:32;offset:12;encoding:int;format:hex;set:General Purpose Registers;generic:arg4;gcc:3;dwarf:3;`,\r\n    `name:r4;bitsize:32;offset:16;encoding:int;format:hex;set:General Purpose Registers;gcc:4;dwarf:4;`,\r\n    `name:r5;bitsize:32;offset:20;encoding:int;format:hex;set:General Purpose Registers;gcc:5;dwarf:5;`,\r\n    `name:r6;bitsize:32;offset:24;encoding:int;format:hex;set:General Purpose Registers;gcc:6;dwarf:6;`,\r\n    `name:r7;bitsize:32;offset:28;encoding:int;format:hex;set:General Purpose Registers;gcc:7;dwarf:7;`,\r\n    `name:r8;bitsize:32;offset:32;encoding:int;format:hex;set:General Purpose Registers;gcc:8;dwarf:8;`,\r\n    `name:r9;bitsize:32;offset:36;encoding:int;format:hex;set:General Purpose Registers;gcc:9;dwarf:9;`,\r\n    `name:r10;bitsize:32;offset:40;encoding:int;format:hex;set:General Purpose Registers;gcc:10;dwarf:10;`,\r\n    `name:r11;bitsize:32;offset:44;encoding:int;format:hex;set:General Purpose Registers;generic:fp;gcc:11;dwarf:11;`,\r\n    `name:r12;bitsize:32;offset:48;encoding:int;format:hex;set:General Purpose Registers;gcc:12;dwarf:12;`,\r\n    `name:sp;bitsize:32;offset:52;encoding:int;format:hex;set:General Purpose Registers;generic:sp;alt-name:r13;gcc:13;dwarf:13;`,\r\n    `name:lr;bitsize:32;offset:56;encoding:int;format:hex;set:General Purpose Registers;generic:ra;alt-name:r14;gcc:14;dwarf:14;`,\r\n    `name:pc;bitsize:32;offset:60;encoding:int;format:hex;set:General Purpose Registers;generic:pc;alt-name:r15;gcc:15;dwarf:15;`,\r\n    `name:cpsr;bitsize:32;offset:64;encoding:int;format:hex;set:General Purpose Registers;generic:flags;alt-name:psr;gcc:16;dwarf:16;`,\r\n];\r\nconst targetXML = `<?xml version=\"1.0\"?>\r\n<!DOCTYPE target SYSTEM \"gdb-target.dtd\">\r\n<target version=\"1.0\">\r\n<architecture>arm</architecture>\r\n<feature name=\"org.gnu.gdb.arm.m-profile\">\r\n<reg name=\"r0\" bitsize=\"32\" regnum=\"0\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r1\" bitsize=\"32\" regnum=\"1\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r2\" bitsize=\"32\" regnum=\"2\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r3\" bitsize=\"32\" regnum=\"3\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r4\" bitsize=\"32\" regnum=\"4\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r5\" bitsize=\"32\" regnum=\"5\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r6\" bitsize=\"32\" regnum=\"6\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r7\" bitsize=\"32\" regnum=\"7\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r8\" bitsize=\"32\" regnum=\"8\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r9\" bitsize=\"32\" regnum=\"9\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r10\" bitsize=\"32\" regnum=\"10\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r11\" bitsize=\"32\" regnum=\"11\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"r12\" bitsize=\"32\" regnum=\"12\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"sp\" bitsize=\"32\" regnum=\"13\" save-restore=\"yes\" type=\"data_ptr\" group=\"general\"/>\r\n<reg name=\"lr\" bitsize=\"32\" regnum=\"14\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n<reg name=\"pc\" bitsize=\"32\" regnum=\"15\" save-restore=\"yes\" type=\"code_ptr\" group=\"general\"/>\r\n<reg name=\"xPSR\" bitsize=\"32\" regnum=\"16\" save-restore=\"yes\" type=\"int\" group=\"general\"/>\r\n</feature>\r\n<feature name=\"org.gnu.gdb.arm.m-system\">\r\n<reg name=\"msp\" bitsize=\"32\" regnum=\"17\" save-restore=\"yes\" type=\"data_ptr\" group=\"system\"/>\r\n<reg name=\"psp\" bitsize=\"32\" regnum=\"18\" save-restore=\"yes\" type=\"data_ptr\" group=\"system\"/>\r\n<reg name=\"primask\" bitsize=\"1\" regnum=\"19\" save-restore=\"yes\" type=\"int8\" group=\"system\"/>\r\n<reg name=\"basepri\" bitsize=\"8\" regnum=\"20\" save-restore=\"yes\" type=\"int8\" group=\"system\"/>\r\n<reg name=\"faultmask\" bitsize=\"1\" regnum=\"21\" save-restore=\"yes\" type=\"int8\" group=\"system\"/>\r\n<reg name=\"control\" bitsize=\"2\" regnum=\"22\" save-restore=\"yes\" type=\"int8\" group=\"system\"/>\r\n</feature>\r\n</target>`;\r\nconst LOG_NAME = 'GDBServer';\r\nclass GDBServer {\r\n    constructor(rp2040) {\r\n        this.rp2040 = rp2040;\r\n        this.logger = new logging_1.ConsoleLogger(logging_1.LogLevel.Warn, true);\r\n        this.connections = new Set();\r\n    }\r\n    processGDBMessage(cmd) {\r\n        const { rp2040 } = this;\r\n        const { core } = rp2040;\r\n        if (cmd === 'Hg0') {\r\n            return gdb_utils_1.gdbMessage('OK');\r\n        }\r\n        switch (cmd[0]) {\r\n            case '?':\r\n                return gdb_utils_1.gdbMessage(exports.STOP_REPLY_TRAP);\r\n            case 'q':\r\n                // Query things\r\n                if (cmd.startsWith('qSupported:')) {\r\n                    return gdb_utils_1.gdbMessage('PacketSize=4000;vContSupported+;qXfer:features:read+');\r\n                }\r\n                if (cmd === 'qAttached') {\r\n                    return gdb_utils_1.gdbMessage('1');\r\n                }\r\n                if (cmd.startsWith('qXfer:features:read:target.xml')) {\r\n                    return gdb_utils_1.gdbMessage('l' + targetXML);\r\n                }\r\n                if (cmd.startsWith('qRegisterInfo')) {\r\n                    const index = parseInt(cmd.substring(13), 16);\r\n                    const register = registers[index];\r\n                    if (register) {\r\n                        return gdb_utils_1.gdbMessage(register);\r\n                    }\r\n                    else {\r\n                        return gdb_utils_1.gdbMessage(`E45`);\r\n                    }\r\n                }\r\n                if (cmd === 'qHostInfo') {\r\n                    return gdb_utils_1.gdbMessage(`triple:${lldbTriple};endian:little;ptrsize:4;`);\r\n                }\r\n                if (cmd === 'qProcessInfo') {\r\n                    return gdb_utils_1.gdbMessage('pid:1;endian:little;ptrsize:4;');\r\n                }\r\n                return gdb_utils_1.gdbMessage('');\r\n            case 'v':\r\n                if (cmd === 'vCont?') {\r\n                    return gdb_utils_1.gdbMessage('vCont;c;C;s;S');\r\n                }\r\n                if (cmd.startsWith('vCont;c')) {\r\n                    if (!rp2040.executing) {\r\n                        rp2040.execute();\r\n                    }\r\n                    return;\r\n                }\r\n                if (cmd.startsWith('vCont;s')) {\r\n                    rp2040.step();\r\n                    const registerStatus = [];\r\n                    for (let i = 0; i < 17; i++) {\r\n                        const value = i === 16 ? core.xPSR : core.registers[i];\r\n                        registerStatus.push(`${gdb_utils_1.encodeHexByte(i)}:${gdb_utils_1.encodeHexUint32(value)}`);\r\n                    }\r\n                    return gdb_utils_1.gdbMessage(`T05${registerStatus.join(';')};reason:trace;`);\r\n                }\r\n                break;\r\n            case 'c':\r\n                if (!rp2040.executing) {\r\n                    rp2040.execute();\r\n                }\r\n                return gdb_utils_1.gdbMessage('OK');\r\n            case 'g': {\r\n                // Read registers\r\n                const buf = new Uint32Array(17);\r\n                buf.set(core.registers);\r\n                buf[16] = core.xPSR;\r\n                return gdb_utils_1.gdbMessage(gdb_utils_1.encodeHexBuf(new Uint8Array(buf.buffer)));\r\n            }\r\n            case 'p': {\r\n                // Read register\r\n                const registerIndex = parseInt(cmd.substr(1), 16);\r\n                if (registerIndex >= 0 && registerIndex <= 15) {\r\n                    return gdb_utils_1.gdbMessage(gdb_utils_1.encodeHexUint32(core.registers[registerIndex]));\r\n                }\r\n                const specialRegister = (sysm) => gdb_utils_1.gdbMessage(gdb_utils_1.encodeHexUint32(core.readSpecialRegister(sysm)));\r\n                switch (registerIndex) {\r\n                    case 0x10:\r\n                        return gdb_utils_1.gdbMessage(gdb_utils_1.encodeHexUint32(core.xPSR));\r\n                    case 0x11:\r\n                        return specialRegister(cortex_m0_core_1.SYSM_MSP);\r\n                    case 0x12:\r\n                        return specialRegister(cortex_m0_core_1.SYSM_PSP);\r\n                    case 0x13:\r\n                        return specialRegister(cortex_m0_core_1.SYSM_PRIMASK);\r\n                    case 0x14:\r\n                        this.logger.warn(LOG_NAME, 'TODO BASEPRI');\r\n                        return gdb_utils_1.gdbMessage(gdb_utils_1.encodeHexUint32(0)); // TODO BASEPRI\r\n                    case 0x15:\r\n                        this.logger.warn(LOG_NAME, 'TODO faultmask');\r\n                        return gdb_utils_1.gdbMessage(gdb_utils_1.encodeHexUint32(0)); // TODO faultmask\r\n                    case 0x16:\r\n                        return specialRegister(cortex_m0_core_1.SYSM_CONTROL);\r\n                }\r\n                break;\r\n            }\r\n            case 'P': {\r\n                // Write register\r\n                const params = cmd.substr(1).split('=');\r\n                const registerIndex = parseInt(params[0], 16);\r\n                const registerValue = params[1].trim();\r\n                const registerBytes = registerIndex > 0x12 ? 1 : 4;\r\n                const decodedValue = gdb_utils_1.decodeHexBuf(registerValue);\r\n                if (registerIndex < 0 || registerIndex > 0x16 || decodedValue.length !== registerBytes) {\r\n                    return gdb_utils_1.gdbMessage('E00');\r\n                }\r\n                const valueBuffer = new Uint8Array(4);\r\n                valueBuffer.set(decodedValue.slice(0, 4));\r\n                const value = new DataView(valueBuffer.buffer).getUint32(0, true);\r\n                switch (registerIndex) {\r\n                    case 0x10:\r\n                        core.xPSR = value;\r\n                        break;\r\n                    case 0x11:\r\n                        core.writeSpecialRegister(cortex_m0_core_1.SYSM_MSP, value);\r\n                        break;\r\n                    case 0x12:\r\n                        core.writeSpecialRegister(cortex_m0_core_1.SYSM_PSP, value);\r\n                        break;\r\n                    case 0x13:\r\n                        core.writeSpecialRegister(cortex_m0_core_1.SYSM_PRIMASK, value);\r\n                        break;\r\n                    case 0x14:\r\n                        this.logger.warn(LOG_NAME, 'TODO BASEPRI');\r\n                        break; // TODO BASEPRI\r\n                    case 0x15:\r\n                        this.logger.warn(LOG_NAME, 'TODO faultmask');\r\n                        break; // TODO faultmask\r\n                    case 0x16:\r\n                        core.writeSpecialRegister(cortex_m0_core_1.SYSM_CONTROL, value);\r\n                        break;\r\n                    default:\r\n                        core.registers[registerIndex] = value;\r\n                        break;\r\n                }\r\n                return gdb_utils_1.gdbMessage('OK');\r\n            }\r\n            case 'm': {\r\n                // Read memory\r\n                const params = cmd.substr(1).split(',');\r\n                const address = parseInt(params[0], 16);\r\n                const length = parseInt(params[1], 16);\r\n                let result = '';\r\n                for (let i = 0; i < length; i++) {\r\n                    result += gdb_utils_1.encodeHexByte(rp2040.readUint8(address + i));\r\n                }\r\n                return gdb_utils_1.gdbMessage(result);\r\n            }\r\n            case 'M': {\r\n                // Write memory\r\n                const params = cmd.substr(1).split(/[,:]/);\r\n                const address = parseInt(params[0], 16);\r\n                const length = parseInt(params[1], 16);\r\n                const data = gdb_utils_1.decodeHexBuf(params[2].substr(0, length * 2));\r\n                for (let i = 0; i < data.length; i++) {\r\n                    this.debug(`Write ${data[i].toString(16)} to ${(address + i).toString(16)}`);\r\n                    rp2040.writeUint8(address + i, data[i]);\r\n                }\r\n                return gdb_utils_1.gdbMessage('OK');\r\n            }\r\n        }\r\n        return gdb_utils_1.gdbMessage('');\r\n    }\r\n    addConnection(connection) {\r\n        this.connections.add(connection);\r\n        this.rp2040.onBreak = () => {\r\n            this.rp2040.stop();\r\n            this.rp2040.core.PC -= this.rp2040.core.breakRewind;\r\n            for (const connection of this.connections) {\r\n                connection.onBreakpoint();\r\n            }\r\n        };\r\n    }\r\n    removeConnection(connection) {\r\n        this.connections.delete(connection);\r\n    }\r\n    debug(msg) {\r\n        this.logger.debug(LOG_NAME, msg);\r\n    }\r\n    info(msg) {\r\n        this.logger.info(LOG_NAME, msg);\r\n    }\r\n    warn(msg) {\r\n        this.logger.warn(LOG_NAME, msg);\r\n    }\r\n    error(msg) {\r\n        this.logger.error(LOG_NAME, msg);\r\n    }\r\n}\r\nexports.GDBServer = GDBServer;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.gdbMessage = exports.gdbChecksum = exports.decodeHexUint32 = exports.decodeHexUint32Array = exports.decodeHexBuf = exports.encodeHexUint32 = exports.encodeHexUint32BE = exports.encodeHexBuf = exports.encodeHexByte = void 0;\r\nfunction encodeHexByte(value) {\r\n    return (value >> 4).toString(16) + (value & 0xf).toString(16);\r\n}\r\nexports.encodeHexByte = encodeHexByte;\r\nfunction encodeHexBuf(buf) {\r\n    return Array.from(buf).map(encodeHexByte).join('');\r\n}\r\nexports.encodeHexBuf = encodeHexBuf;\r\nfunction encodeHexUint32BE(value) {\r\n    return encodeHexBuf(new Uint8Array([(value >> 24) & 0xff, (value >> 16) & 0xff, (value >> 8) & 0xff, value & 0xff]));\r\n}\r\nexports.encodeHexUint32BE = encodeHexUint32BE;\r\nfunction encodeHexUint32(value) {\r\n    const buf = new Uint32Array([value]);\r\n    return encodeHexBuf(new Uint8Array(buf.buffer));\r\n}\r\nexports.encodeHexUint32 = encodeHexUint32;\r\nfunction decodeHexBuf(encoded) {\r\n    const result = new Uint8Array(encoded.length / 2);\r\n    for (let i = 0; i < result.length; i++) {\r\n        result[i] = parseInt(encoded.substr(i * 2, 2), 16);\r\n    }\r\n    return result;\r\n}\r\nexports.decodeHexBuf = decodeHexBuf;\r\nfunction decodeHexUint32Array(encoded) {\r\n    return new Uint32Array(decodeHexBuf(encoded).buffer);\r\n}\r\nexports.decodeHexUint32Array = decodeHexUint32Array;\r\nfunction decodeHexUint32(encoded) {\r\n    return decodeHexUint32Array(encoded)[0];\r\n}\r\nexports.decodeHexUint32 = decodeHexUint32;\r\nfunction gdbChecksum(text) {\r\n    const value = text\r\n        .split('')\r\n        .map((c) => c.charCodeAt(0))\r\n        .reduce((a, b) => a + b, 0) & 0xff;\r\n    return encodeHexByte(value);\r\n}\r\nexports.gdbChecksum = gdbChecksum;\r\nfunction gdbMessage(value) {\r\n    return `$${value}#${gdbChecksum(value)}`;\r\n}\r\nexports.gdbMessage = gdbMessage;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GPIOPin = exports.FUNCTION_PIO1 = exports.FUNCTION_PIO0 = exports.FUNCTION_SIO = exports.FUNCTION_PWM = exports.GPIOPinState = void 0;\r\nconst pio_1 = require(\"./peripherals/pio\");\r\nvar GPIOPinState;\r\n(function (GPIOPinState) {\r\n    GPIOPinState[GPIOPinState[\"Low\"] = 0] = \"Low\";\r\n    GPIOPinState[GPIOPinState[\"High\"] = 1] = \"High\";\r\n    GPIOPinState[GPIOPinState[\"Input\"] = 2] = \"Input\";\r\n    GPIOPinState[GPIOPinState[\"InputPullUp\"] = 3] = \"InputPullUp\";\r\n    GPIOPinState[GPIOPinState[\"InputPullDown\"] = 4] = \"InputPullDown\";\r\n})(GPIOPinState = exports.GPIOPinState || (exports.GPIOPinState = {}));\r\nexports.FUNCTION_PWM = 4;\r\nexports.FUNCTION_SIO = 5;\r\nexports.FUNCTION_PIO0 = 6;\r\nexports.FUNCTION_PIO1 = 7;\r\nfunction applyOverride(value, overrideType) {\r\n    switch (overrideType) {\r\n        case 0:\r\n            return value;\r\n        case 1:\r\n            return !value;\r\n        case 2:\r\n            return false;\r\n        case 3:\r\n            return true;\r\n    }\r\n    console.error('applyOverride received invalid override type', overrideType);\r\n    return value;\r\n}\r\nconst IRQ_EDGE_HIGH = 1 << 3;\r\nconst IRQ_EDGE_LOW = 1 << 2;\r\nconst IRQ_LEVEL_HIGH = 1 << 1;\r\nconst IRQ_LEVEL_LOW = 1 << 0;\r\nclass GPIOPin {\r\n    constructor(rp2040, index, name = index.toString()) {\r\n        this.rp2040 = rp2040;\r\n        this.index = index;\r\n        this.name = name;\r\n        this.rawInputValue = false;\r\n        this.lastValue = this.value;\r\n        this.ctrl = 0x1f;\r\n        this.padValue = 0b0110110;\r\n        this.irqEnableMask = 0;\r\n        this.irqForceMask = 0;\r\n        this.irqStatus = 0;\r\n        this.listeners = new Set();\r\n    }\r\n    get rawInterrupt() {\r\n        return !!((this.irqStatus & this.irqEnableMask) | this.irqForceMask);\r\n    }\r\n    get isSlewFast() {\r\n        return !!(this.padValue & 1);\r\n    }\r\n    get schmittEnabled() {\r\n        return !!(this.padValue & 2);\r\n    }\r\n    get pulldownEnabled() {\r\n        return !!(this.padValue & 4);\r\n    }\r\n    get pullupEnabled() {\r\n        return !!(this.padValue & 8);\r\n    }\r\n    get driveStrength() {\r\n        return (this.padValue >> 4) & 0x3;\r\n    }\r\n    get inputEnable() {\r\n        return !!(this.padValue & 0x40);\r\n    }\r\n    get outputDisable() {\r\n        return !!(this.padValue & 0x80);\r\n    }\r\n    get functionSelect() {\r\n        return this.ctrl & 0x1f;\r\n    }\r\n    get outputOverride() {\r\n        return (this.ctrl >> 8) & 0x3;\r\n    }\r\n    get outputEnableOverride() {\r\n        return (this.ctrl >> 12) & 0x3;\r\n    }\r\n    get inputOverride() {\r\n        return (this.ctrl >> 16) & 0x3;\r\n    }\r\n    get irqOverride() {\r\n        return (this.ctrl >> 28) & 0x3;\r\n    }\r\n    get rawOutputEnable() {\r\n        const { index, rp2040, functionSelect } = this;\r\n        const bitmask = 1 << index;\r\n        switch (functionSelect) {\r\n            case exports.FUNCTION_PWM:\r\n                return !!(rp2040.pwm.gpioDirection & bitmask);\r\n            case exports.FUNCTION_SIO:\r\n                return !!(rp2040.sio.gpioOutputEnable & bitmask);\r\n            case exports.FUNCTION_PIO0:\r\n                return !!(rp2040.pio[0].pinDirections & bitmask);\r\n            case exports.FUNCTION_PIO1:\r\n                return !!(rp2040.pio[1].pinDirections & bitmask);\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    get rawOutputValue() {\r\n        const { index, rp2040, functionSelect } = this;\r\n        const bitmask = 1 << index;\r\n        switch (functionSelect) {\r\n            case exports.FUNCTION_PWM:\r\n                return !!(rp2040.pwm.gpioValue & bitmask);\r\n            case exports.FUNCTION_SIO:\r\n                return !!(rp2040.sio.gpioValue & bitmask);\r\n            case exports.FUNCTION_PIO0:\r\n                return !!(rp2040.pio[0].pinValues & bitmask);\r\n            case exports.FUNCTION_PIO1:\r\n                return !!(rp2040.pio[1].pinValues & bitmask);\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    get inputValue() {\r\n        return applyOverride(this.rawInputValue && this.inputEnable, this.inputOverride);\r\n    }\r\n    get irqValue() {\r\n        return applyOverride(this.rawInterrupt, this.irqOverride);\r\n    }\r\n    get outputEnable() {\r\n        return applyOverride(this.rawOutputEnable, this.outputEnableOverride);\r\n    }\r\n    get outputValue() {\r\n        return applyOverride(this.rawOutputValue, this.outputOverride);\r\n    }\r\n    /**\r\n     * Returns the STATUS register value for the pin, as outlined in section 2.19.6 of the datasheet\r\n     */\r\n    get status() {\r\n        const irqToProc = this.irqValue ? 1 << 26 : 0;\r\n        const irqFromPad = this.rawInterrupt ? 1 << 24 : 0;\r\n        const inToPeri = this.inputValue ? 1 << 19 : 0;\r\n        const inFromPad = this.rawInputValue ? 1 << 17 : 0;\r\n        const oeToPad = this.outputEnable ? 1 << 13 : 0;\r\n        const oeFromPeri = this.rawOutputEnable ? 1 << 12 : 0;\r\n        const outToPad = this.outputValue ? 1 << 9 : 0;\r\n        const outFromPeri = this.rawOutputValue ? 1 << 8 : 0;\r\n        return (irqToProc | irqFromPad | inToPeri | inFromPad | oeToPad | oeFromPeri | outToPad | outFromPeri);\r\n    }\r\n    get value() {\r\n        if (this.outputEnable) {\r\n            return this.outputValue ? GPIOPinState.High : GPIOPinState.Low;\r\n        }\r\n        else {\r\n            // TODO: check what happens when we enable both pullup/pulldown\r\n            if (this.pulldownEnabled) {\r\n                return GPIOPinState.InputPullDown;\r\n            }\r\n            if (this.pullupEnabled) {\r\n                return GPIOPinState.InputPullUp;\r\n            }\r\n            return GPIOPinState.Input;\r\n        }\r\n    }\r\n    setInputValue(value) {\r\n        this.rawInputValue = value;\r\n        const prevIrqValue = this.irqValue;\r\n        if (value && this.inputEnable) {\r\n            this.irqStatus |= IRQ_EDGE_HIGH | IRQ_LEVEL_HIGH;\r\n            this.irqStatus &= ~IRQ_LEVEL_LOW;\r\n        }\r\n        else {\r\n            this.irqStatus |= IRQ_EDGE_LOW | IRQ_LEVEL_LOW;\r\n            this.irqStatus &= ~IRQ_LEVEL_HIGH;\r\n        }\r\n        if (this.irqValue !== prevIrqValue) {\r\n            this.rp2040.updateIOInterrupt();\r\n        }\r\n        if (this.functionSelect === exports.FUNCTION_PWM) {\r\n            this.rp2040.pwm.gpioOnInput(this.index);\r\n        }\r\n        for (const pio of this.rp2040.pio) {\r\n            for (const machine of pio.machines) {\r\n                if (machine.enabled &&\r\n                    machine.waiting &&\r\n                    machine.waitType === pio_1.WaitType.Pin &&\r\n                    machine.waitIndex === this.index) {\r\n                    machine.checkWait();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    checkForUpdates() {\r\n        const { lastValue, value } = this;\r\n        if (value !== lastValue) {\r\n            this.lastValue = value;\r\n            for (const listener of this.listeners) {\r\n                listener(value, lastValue);\r\n            }\r\n        }\r\n    }\r\n    refreshInput() {\r\n        this.setInputValue(this.rawInputValue);\r\n    }\r\n    updateIRQValue(value) {\r\n        if (value & IRQ_EDGE_LOW && this.irqStatus & IRQ_EDGE_LOW) {\r\n            this.irqStatus &= ~IRQ_EDGE_LOW;\r\n            this.rp2040.updateIOInterrupt();\r\n        }\r\n        if (value & IRQ_EDGE_HIGH && this.irqStatus & IRQ_EDGE_HIGH) {\r\n            this.irqStatus &= ~IRQ_EDGE_HIGH;\r\n            this.rp2040.updateIOInterrupt();\r\n        }\r\n    }\r\n    addListener(callback) {\r\n        this.listeners.add(callback);\r\n        return () => this.listeners.delete(callback);\r\n    }\r\n}\r\nexports.GPIOPin = GPIOPin;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LogLevel = exports.ConsoleLogger = exports.setDeviceConfigurationPacket = exports.setDeviceAddressPacket = exports.getDescriptorPacket = exports.createSetupPacket = exports.SetupType = exports.SetupRequest = exports.SetupRecipient = exports.DescriptorType = exports.DataDirection = exports.USBCDC = exports.RP2040 = exports.RPUSBController = exports.I2CMode = exports.I2CSpeed = exports.RPI2C = exports.BasePeripheral = exports.GPIOPinState = exports.GPIOPin = exports.GDBServer = exports.GDBConnection = void 0;\r\nvar gdb_connection_1 = require(\"./gdb/gdb-connection\");\r\nObject.defineProperty(exports, \"GDBConnection\", { enumerable: true, get: function () { return gdb_connection_1.GDBConnection; } });\r\nvar gdb_server_1 = require(\"./gdb/gdb-server\");\r\nObject.defineProperty(exports, \"GDBServer\", { enumerable: true, get: function () { return gdb_server_1.GDBServer; } });\r\nvar gpio_pin_1 = require(\"./gpio-pin\");\r\nObject.defineProperty(exports, \"GPIOPin\", { enumerable: true, get: function () { return gpio_pin_1.GPIOPin; } });\r\nObject.defineProperty(exports, \"GPIOPinState\", { enumerable: true, get: function () { return gpio_pin_1.GPIOPinState; } });\r\nvar peripheral_1 = require(\"./peripherals/peripheral\");\r\nObject.defineProperty(exports, \"BasePeripheral\", { enumerable: true, get: function () { return peripheral_1.BasePeripheral; } });\r\nvar i2c_1 = require(\"./peripherals/i2c\");\r\nObject.defineProperty(exports, \"RPI2C\", { enumerable: true, get: function () { return i2c_1.RPI2C; } });\r\nObject.defineProperty(exports, \"I2CSpeed\", { enumerable: true, get: function () { return i2c_1.I2CSpeed; } });\r\nObject.defineProperty(exports, \"I2CMode\", { enumerable: true, get: function () { return i2c_1.I2CMode; } });\r\nvar usb_1 = require(\"./peripherals/usb\");\r\nObject.defineProperty(exports, \"RPUSBController\", { enumerable: true, get: function () { return usb_1.RPUSBController; } });\r\nvar rp2040_1 = require(\"./rp2040\");\r\nObject.defineProperty(exports, \"RP2040\", { enumerable: true, get: function () { return rp2040_1.RP2040; } });\r\nvar cdc_1 = require(\"./usb/cdc\");\r\nObject.defineProperty(exports, \"USBCDC\", { enumerable: true, get: function () { return cdc_1.USBCDC; } });\r\nvar interfaces_1 = require(\"./usb/interfaces\");\r\nObject.defineProperty(exports, \"DataDirection\", { enumerable: true, get: function () { return interfaces_1.DataDirection; } });\r\nObject.defineProperty(exports, \"DescriptorType\", { enumerable: true, get: function () { return interfaces_1.DescriptorType; } });\r\nObject.defineProperty(exports, \"SetupRecipient\", { enumerable: true, get: function () { return interfaces_1.SetupRecipient; } });\r\nObject.defineProperty(exports, \"SetupRequest\", { enumerable: true, get: function () { return interfaces_1.SetupRequest; } });\r\nObject.defineProperty(exports, \"SetupType\", { enumerable: true, get: function () { return interfaces_1.SetupType; } });\r\nvar setup_1 = require(\"./usb/setup\");\r\nObject.defineProperty(exports, \"createSetupPacket\", { enumerable: true, get: function () { return setup_1.createSetupPacket; } });\r\nObject.defineProperty(exports, \"getDescriptorPacket\", { enumerable: true, get: function () { return setup_1.getDescriptorPacket; } });\r\nObject.defineProperty(exports, \"setDeviceAddressPacket\", { enumerable: true, get: function () { return setup_1.setDeviceAddressPacket; } });\r\nObject.defineProperty(exports, \"setDeviceConfigurationPacket\", { enumerable: true, get: function () { return setup_1.setDeviceConfigurationPacket; } });\r\nvar logging_1 = require(\"./utils/logging\");\r\nObject.defineProperty(exports, \"ConsoleLogger\", { enumerable: true, get: function () { return logging_1.ConsoleLogger; } });\r\nObject.defineProperty(exports, \"LogLevel\", { enumerable: true, get: function () { return logging_1.LogLevel; } });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Interpolator = exports.InterpolatorConfig = void 0;\r\nconst bit_1 = require(\"./utils/bit\");\r\nclass InterpolatorConfig {\r\n    constructor(value) {\r\n        this.shift = 0;\r\n        this.maskLSB = 0;\r\n        this.maskMSB = 0;\r\n        this.signed = false;\r\n        this.crossInput = false;\r\n        this.crossResult = false;\r\n        this.addRaw = false;\r\n        this.forceMSB = 0;\r\n        this.blend = false;\r\n        this.clamp = false;\r\n        this.overf0 = false;\r\n        this.overf1 = false;\r\n        this.overf = false;\r\n        this.shift = (value >>> 0) & 0b11111;\r\n        this.maskLSB = (value >>> 5) & 0b11111;\r\n        this.maskMSB = (value >>> 10) & 0b11111;\r\n        this.signed = Boolean((value >>> 15) & 1);\r\n        this.crossInput = Boolean((value >>> 16) & 1);\r\n        this.crossResult = Boolean((value >>> 17) & 1);\r\n        this.addRaw = Boolean((value >>> 18) & 1);\r\n        this.forceMSB = (value >>> 19) & 0b11;\r\n        this.blend = Boolean((value >>> 21) & 1);\r\n        this.clamp = Boolean((value >>> 22) & 1);\r\n        this.overf0 = Boolean((value >>> 23) & 1);\r\n        this.overf1 = Boolean((value >>> 24) & 1);\r\n        this.overf = Boolean((value >>> 25) & 1);\r\n    }\r\n    toUint32() {\r\n        return (((this.shift & 0b11111) << 0) |\r\n            ((this.maskLSB & 0b11111) << 5) |\r\n            ((this.maskMSB & 0b11111) << 10) |\r\n            ((Number(this.signed) & 1) << 15) |\r\n            ((Number(this.crossInput) & 1) << 16) |\r\n            ((Number(this.crossResult) & 1) << 17) |\r\n            ((Number(this.addRaw) & 1) << 18) |\r\n            ((this.forceMSB & 0b11) << 19) |\r\n            ((Number(this.blend) & 1) << 21) |\r\n            ((Number(this.clamp) & 1) << 22) |\r\n            ((Number(this.overf0) & 1) << 23) |\r\n            ((Number(this.overf1) & 1) << 24) |\r\n            ((Number(this.overf) & 1) << 25));\r\n    }\r\n}\r\nexports.InterpolatorConfig = InterpolatorConfig;\r\nclass Interpolator {\r\n    constructor(index) {\r\n        this.index = index;\r\n        this.accum0 = 0;\r\n        this.accum1 = 0;\r\n        this.base0 = 0;\r\n        this.base1 = 0;\r\n        this.base2 = 0;\r\n        this.ctrl0 = 0;\r\n        this.ctrl1 = 0;\r\n        this.result0 = 0;\r\n        this.result1 = 0;\r\n        this.result2 = 0;\r\n        this.smresult0 = 0;\r\n        this.smresult1 = 0;\r\n        this.update();\r\n    }\r\n    update() {\r\n        const N = this.index;\r\n        const ctrl0 = new InterpolatorConfig(this.ctrl0);\r\n        const ctrl1 = new InterpolatorConfig(this.ctrl1);\r\n        const do_clamp = ctrl0.clamp && N == 1;\r\n        const do_blend = ctrl0.blend && N == 0;\r\n        ctrl0.clamp = do_clamp;\r\n        ctrl0.blend = do_blend;\r\n        ctrl1.clamp = false;\r\n        ctrl1.blend = false;\r\n        ctrl1.overf0 = false;\r\n        ctrl1.overf1 = false;\r\n        ctrl1.overf = false;\r\n        const input0 = bit_1.s32(ctrl0.crossInput ? this.accum1 : this.accum0);\r\n        const input1 = bit_1.s32(ctrl1.crossInput ? this.accum0 : this.accum1);\r\n        const msbmask0 = ctrl0.maskMSB == 31 ? 0xffffffff : (1 << (ctrl0.maskMSB + 1)) - 1;\r\n        const msbmask1 = ctrl1.maskMSB == 31 ? 0xffffffff : (1 << (ctrl1.maskMSB + 1)) - 1;\r\n        const mask0 = msbmask0 & ~((1 << ctrl0.maskLSB) - 1);\r\n        const mask1 = msbmask1 & ~((1 << ctrl1.maskLSB) - 1);\r\n        const uresult0 = (input0 >>> ctrl0.shift) & mask0;\r\n        const uresult1 = (input1 >>> ctrl1.shift) & mask1;\r\n        const overf0 = Boolean((input0 >>> ctrl0.shift) & ~msbmask0);\r\n        const overf1 = Boolean((input1 >>> ctrl1.shift) & ~msbmask1);\r\n        const overf = overf0 || overf1;\r\n        const sextmask0 = uresult0 & (1 << ctrl0.maskMSB) ? -1 << ctrl0.maskMSB : 0;\r\n        const sextmask1 = uresult1 & (1 << ctrl1.maskMSB) ? -1 << ctrl1.maskMSB : 0;\r\n        const sresult0 = uresult0 | sextmask0;\r\n        const sresult1 = uresult1 | sextmask1;\r\n        const result0 = ctrl0.signed ? sresult0 : uresult0;\r\n        const result1 = ctrl1.signed ? sresult1 : uresult1;\r\n        const addresult0 = this.base0 + (ctrl0.addRaw ? input0 : result0);\r\n        const addresult1 = this.base1 + (ctrl1.addRaw ? input1 : result1);\r\n        const addresult2 = this.base2 + result0 + (do_blend ? 0 : result1);\r\n        const uclamp0 = bit_1.u32(result0) < bit_1.u32(this.base0)\r\n            ? this.base0\r\n            : bit_1.u32(result0) > bit_1.u32(this.base1)\r\n                ? this.base1\r\n                : result0;\r\n        const sclamp0 = bit_1.s32(result0) < bit_1.s32(this.base0)\r\n            ? this.base0\r\n            : bit_1.s32(result0) > bit_1.s32(this.base1)\r\n                ? this.base1\r\n                : result0;\r\n        const clamp0 = ctrl0.signed ? sclamp0 : uclamp0;\r\n        const alpha1 = result1 & 0xff;\r\n        const ublend1 = bit_1.u32(this.base0) + (Math.floor((alpha1 * (bit_1.u32(this.base1) - bit_1.u32(this.base0))) / 256) | 0);\r\n        const sblend1 = bit_1.s32(this.base0) + (Math.floor((alpha1 * (bit_1.s32(this.base1) - bit_1.s32(this.base0))) / 256) | 0);\r\n        const blend1 = ctrl1.signed ? sblend1 : ublend1;\r\n        this.smresult0 = bit_1.u32(result0);\r\n        this.smresult1 = bit_1.u32(result1);\r\n        this.result0 = bit_1.u32(do_blend ? alpha1 : (do_clamp ? clamp0 : addresult0) | (ctrl0.forceMSB << 28));\r\n        this.result1 = bit_1.u32((do_blend ? blend1 : addresult1) | (ctrl0.forceMSB << 28));\r\n        this.result2 = bit_1.u32(addresult2);\r\n        ctrl0.overf0 = overf0;\r\n        ctrl0.overf1 = overf1;\r\n        ctrl0.overf = overf;\r\n        this.ctrl0 = ctrl0.toUint32();\r\n        this.ctrl1 = ctrl1.toUint32();\r\n    }\r\n    writeback() {\r\n        const ctrl0 = new InterpolatorConfig(this.ctrl0);\r\n        const ctrl1 = new InterpolatorConfig(this.ctrl1);\r\n        this.accum0 = bit_1.u32(ctrl0.crossResult ? this.result1 : this.result0);\r\n        this.accum1 = bit_1.u32(ctrl1.crossResult ? this.result0 : this.result1);\r\n        this.update();\r\n    }\r\n    setBase01(value) {\r\n        const N = this.index;\r\n        const ctrl0 = new InterpolatorConfig(this.ctrl0);\r\n        const ctrl1 = new InterpolatorConfig(this.ctrl1);\r\n        const do_blend = ctrl0.blend && N == 0;\r\n        const input0 = value & 0xffff;\r\n        const input1 = (value >>> 16) & 0xffff;\r\n        const sextmask0 = input0 & (1 << 15) ? -1 << 15 : 0;\r\n        const sextmask1 = input1 & (1 << 15) ? -1 << 15 : 0;\r\n        const base0 = (do_blend ? ctrl1.signed : ctrl0.signed) ? input0 | sextmask0 : input0;\r\n        const base1 = ctrl1.signed ? input1 | sextmask1 : input1;\r\n        this.base0 = bit_1.u32(base0);\r\n        this.base1 = bit_1.u32(base1);\r\n        this.update();\r\n    }\r\n}\r\nexports.Interpolator = Interpolator;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MAX_HARDWARE_IRQ = exports.IRQ = void 0;\r\nvar IRQ;\r\n(function (IRQ) {\r\n    IRQ[IRQ[\"TIMER_0\"] = 0] = \"TIMER_0\";\r\n    IRQ[IRQ[\"TIMER_1\"] = 1] = \"TIMER_1\";\r\n    IRQ[IRQ[\"TIMER_2\"] = 2] = \"TIMER_2\";\r\n    IRQ[IRQ[\"TIMER_3\"] = 3] = \"TIMER_3\";\r\n    IRQ[IRQ[\"PWM_WRAP\"] = 4] = \"PWM_WRAP\";\r\n    IRQ[IRQ[\"USBCTRL\"] = 5] = \"USBCTRL\";\r\n    IRQ[IRQ[\"XIP\"] = 6] = \"XIP\";\r\n    IRQ[IRQ[\"PIO0_IRQ0\"] = 7] = \"PIO0_IRQ0\";\r\n    IRQ[IRQ[\"PIO0_IRQ1\"] = 8] = \"PIO0_IRQ1\";\r\n    IRQ[IRQ[\"PIO1_IRQ0\"] = 9] = \"PIO1_IRQ0\";\r\n    IRQ[IRQ[\"PIO1_IRQ1\"] = 10] = \"PIO1_IRQ1\";\r\n    IRQ[IRQ[\"DMA_IRQ0\"] = 11] = \"DMA_IRQ0\";\r\n    IRQ[IRQ[\"DMA_IRQ1\"] = 12] = \"DMA_IRQ1\";\r\n    IRQ[IRQ[\"IO_BANK0\"] = 13] = \"IO_BANK0\";\r\n    IRQ[IRQ[\"IO_QSPI\"] = 14] = \"IO_QSPI\";\r\n    IRQ[IRQ[\"SIO_PROC0\"] = 15] = \"SIO_PROC0\";\r\n    IRQ[IRQ[\"SIO_PROC1\"] = 16] = \"SIO_PROC1\";\r\n    IRQ[IRQ[\"CLOCKS\"] = 17] = \"CLOCKS\";\r\n    IRQ[IRQ[\"SPI0\"] = 18] = \"SPI0\";\r\n    IRQ[IRQ[\"SPI1\"] = 19] = \"SPI1\";\r\n    IRQ[IRQ[\"UART0\"] = 20] = \"UART0\";\r\n    IRQ[IRQ[\"UART1\"] = 21] = \"UART1\";\r\n    IRQ[IRQ[\"ADC_FIFO\"] = 22] = \"ADC_FIFO\";\r\n    IRQ[IRQ[\"I2C0\"] = 23] = \"I2C0\";\r\n    IRQ[IRQ[\"I2C1\"] = 24] = \"I2C1\";\r\n    IRQ[IRQ[\"RTC\"] = 25] = \"RTC\";\r\n})(IRQ = exports.IRQ || (exports.IRQ = {}));\r\nexports.MAX_HARDWARE_IRQ = IRQ.RTC;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPADC = void 0;\r\nconst irq_1 = require(\"../irq\");\r\nconst fifo_1 = require(\"../utils/fifo\");\r\nconst dma_1 = require(\"./dma\");\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst CS = 0x00; // ADC Control and Status\r\nconst RESULT = 0x04; // Result of most recent ADC conversion\r\nconst FCS = 0x08; // FIFO control and status\r\nconst FIFO_REG = 0x0c; // Conversion result FIFO\r\nconst DIV = 0x10; // Clock divider.0x14 INTR Raw Interrupts\r\nconst INTR = 0x14; // Raw Interrupts\r\nconst INTE = 0x18; // Interrupt Enable\r\nconst INTF = 0x1c; // Interrupt Force\r\nconst INTS = 0x20; // Interrupt status after masking & forcing\r\n// CS bits\r\nconst CS_RROBIN_MASK = 0x1f;\r\nconst CS_RROBIN_SHIFT = 16;\r\nconst CS_AINSEL_MASK = 0x7;\r\nconst CS_AINSEL_SHIFT = 12;\r\nconst CS_ERR_STICKY = 1 << 10;\r\nconst CS_ERR = 1 << 9;\r\nconst CS_READY = 1 << 8;\r\nconst CS_START_MANY = 1 << 3;\r\nconst CS_START_ONE = 1 << 2;\r\nconst CS_TS_EN = 1 << 1;\r\nconst CS_EN = 1 << 0;\r\nconst CS_WRITE_MASK = (CS_RROBIN_MASK << CS_RROBIN_SHIFT) |\r\n    (CS_AINSEL_MASK << CS_AINSEL_SHIFT) |\r\n    CS_START_MANY |\r\n    CS_START_ONE |\r\n    CS_TS_EN |\r\n    CS_EN;\r\n// FCS bits\r\nconst FCS_THRES_MASK = 0xf;\r\nconst FCS_THRESH_SHIFT = 24;\r\nconst FCS_LEVEL_MASK = 0xf;\r\nconst FCS_LEVEL_SHIFT = 16;\r\nconst FCS_OVER = 1 << 11;\r\nconst FCS_UNDER = 1 << 10;\r\nconst FCS_FULL = 1 << 9;\r\nconst FCS_EMPTY = 1 << 8;\r\nconst FCS_DREQ_EN = 1 << 3;\r\nconst FCS_ERR = 1 << 2;\r\nconst FCS_SHIFT = 1 << 1;\r\nconst FCS_EN = 1 << 0;\r\nconst FCS_WRITE_MASK = (FCS_THRES_MASK << FCS_THRESH_SHIFT) | FCS_DREQ_EN | FCS_ERR | FCS_SHIFT | FCS_EN;\r\n// FIFO_REG bits\r\nconst FIFO_ERR = 1 << 15;\r\n// DIV bits\r\nconst DIV_INT_MASK = 0xffff;\r\nconst DIV_INT_SHIFT = 8;\r\nconst DIV_FRAC_MASK = 0xff;\r\nconst DIV_FRAC_SHIFT = 0;\r\n// Interrupt bits\r\nconst FIFO_INT = 1 << 0;\r\nclass RPADC extends peripheral_1.BasePeripheral {\r\n    constructor(rp2040, name) {\r\n        super(rp2040, name);\r\n        /* Number of ADC channels */\r\n        this.numChannels = 5;\r\n        /** ADC resolution (in bits) */\r\n        this.resolution = 12;\r\n        /** Time to read a single sample, in microseconds */\r\n        this.sampleTime = 2;\r\n        /**\r\n         * ADC Channel values. Channels 0...3 are connected to GPIO 26...29, and channel 4 is connected to the built-in\r\n         * temperature sensor: T=27-(ADC_voltage-0.706)/0.001721.\r\n         *\r\n         * Changing the values will change the ADC reading, unless you override onADCRead() with a custom implementation.\r\n         */\r\n        this.channelValues = [0, 0, 0, 0, 0];\r\n        /**\r\n         * Invoked whenever the emulated code performs an ADC read.\r\n         *\r\n         * The default implementation reads the result from the `channelValues` array, and then calls\r\n         * completeADCRead() after `sampleTime` milliseconds.\r\n         *\r\n         * If you override the default implementation, make sure to call `completeADCRead()` after\r\n         * `sampleTime` milliseconds (or else the ADC read will never complete).\r\n         */\r\n        this.onADCRead = (channel) => {\r\n            // Default implementation\r\n            this.rp2040.clock.createTimer(this.sampleTime, () => this.completeADCRead(this.channelValues[channel], false));\r\n        };\r\n        this.fifo = new fifo_1.FIFO(4);\r\n        this.dreq = dma_1.DREQChannel.DREQ_ADC;\r\n        // Registers\r\n        this.cs = 0;\r\n        this.fcs = 0;\r\n        this.clockDiv = 0;\r\n        this.intEnable = 0;\r\n        this.intForce = 0;\r\n        this.result = 0;\r\n        // Status\r\n        this.busy = false;\r\n        this.err = false;\r\n    }\r\n    get temperatueEnable() {\r\n        return this.cs & CS_TS_EN;\r\n    }\r\n    get enabled() {\r\n        return this.cs & CS_EN;\r\n    }\r\n    get divider() {\r\n        return (1 +\r\n            ((this.clockDiv >> DIV_INT_SHIFT) & DIV_INT_MASK) +\r\n            ((this.clockDiv >> DIV_FRAC_SHIFT) & DIV_FRAC_MASK) / 256);\r\n    }\r\n    get intRaw() {\r\n        const thres = (this.fcs >> FCS_THRESH_SHIFT) & FCS_THRES_MASK;\r\n        return this.fifo.itemCount >= thres ? FIFO_INT : 0;\r\n    }\r\n    get intStatus() {\r\n        return (this.intRaw & this.intEnable) | this.intForce;\r\n    }\r\n    get activeChannel() {\r\n        return (this.cs >> CS_AINSEL_SHIFT) & CS_AINSEL_MASK;\r\n    }\r\n    set activeChannel(channel) {\r\n        this.cs &= ~(CS_AINSEL_MASK << CS_AINSEL_SHIFT);\r\n        this.cs |= (channel & CS_AINSEL_SHIFT) << CS_AINSEL_SHIFT;\r\n    }\r\n    checkInterrupts() {\r\n        this.rp2040.setInterrupt(irq_1.IRQ.ADC_FIFO, !!this.intStatus);\r\n    }\r\n    startADCRead() {\r\n        this.busy = true;\r\n        this.onADCRead(this.activeChannel);\r\n    }\r\n    updateDMA() {\r\n        if (this.fcs & FCS_DREQ_EN) {\r\n            const thres = (this.fcs >> FCS_THRESH_SHIFT) & FCS_THRES_MASK;\r\n            if (this.fifo.itemCount >= thres) {\r\n                this.rp2040.dma.setDREQ(this.dreq);\r\n            }\r\n            else {\r\n                this.rp2040.dma.clearDREQ(this.dreq);\r\n            }\r\n        }\r\n    }\r\n    completeADCRead(value, error) {\r\n        this.busy = false;\r\n        this.result = value;\r\n        if (error) {\r\n            this.cs |= CS_ERR_STICKY | CS_ERR;\r\n        }\r\n        else {\r\n            this.cs &= ~CS_ERR;\r\n        }\r\n        // FIFO\r\n        if (this.fcs & FCS_EN) {\r\n            if (this.fifo.full) {\r\n                this.fcs |= FCS_OVER;\r\n            }\r\n            else {\r\n                value &= 0xfff; // 12 bits\r\n                if (this.fcs & FCS_SHIFT) {\r\n                    value >>= 4;\r\n                }\r\n                if (error && this.fcs & FCS_ERR) {\r\n                    value |= FIFO_ERR;\r\n                }\r\n                this.fifo.push(value);\r\n                this.updateDMA();\r\n                this.checkInterrupts();\r\n            }\r\n        }\r\n        // Round-robin\r\n        const round = (this.cs >> CS_RROBIN_SHIFT) & CS_RROBIN_MASK;\r\n        if (round) {\r\n            let channel = this.activeChannel + 1;\r\n            while (!(round & (1 << channel))) {\r\n                channel = (channel + 1) % this.numChannels;\r\n            }\r\n            this.activeChannel = channel;\r\n        }\r\n        // Multi-shot conversions\r\n        if (this.cs & CS_START_MANY) {\r\n            const clockMHZ = 48;\r\n            const sampleTicks = clockMHZ * this.sampleTime;\r\n            if (this.divider > sampleTicks) {\r\n                // clock runs at 48MHz, subtract 2uS\r\n                const micros = (this.divider - sampleTicks) / clockMHZ;\r\n                this.rp2040.clock.createTimer(micros, () => {\r\n                    if (this.cs & CS_START_MANY) {\r\n                        this.startADCRead();\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                this.startADCRead();\r\n            }\r\n        }\r\n    }\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case CS:\r\n                return this.cs | (this.err ? CS_ERR : 0) | (this.busy ? 0 : CS_READY);\r\n            case RESULT:\r\n                return this.result;\r\n            case FCS:\r\n                return (this.fcs |\r\n                    ((this.fifo.itemCount & FCS_LEVEL_MASK) << FCS_LEVEL_SHIFT) |\r\n                    (this.fifo.full ? FCS_FULL : 0) |\r\n                    (this.fifo.empty ? FCS_EMPTY : 0));\r\n            case FIFO_REG:\r\n                if (this.fifo.empty) {\r\n                    this.fcs |= FCS_UNDER;\r\n                    return 0;\r\n                }\r\n                else {\r\n                    const value = this.fifo.pull();\r\n                    this.updateDMA();\r\n                    return value;\r\n                }\r\n            case DIV:\r\n                return this.clockDiv;\r\n            case INTR:\r\n                return this.intRaw;\r\n            case INTE:\r\n                return this.intEnable;\r\n            case INTF:\r\n                return this.intForce;\r\n            case INTS:\r\n                return this.intStatus;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        switch (offset) {\r\n            case CS:\r\n                this.fcs &= ~(value & CS_ERR_STICKY); // Write-clear bits\r\n                this.cs = (this.cs & ~CS_WRITE_MASK) | (value & CS_WRITE_MASK);\r\n                if (value & CS_EN && !this.busy && (value & CS_START_ONE || value & CS_START_MANY)) {\r\n                    this.startADCRead();\r\n                }\r\n                break;\r\n            case FCS:\r\n                this.fcs &= ~(value & (FCS_OVER | FCS_UNDER)); // Write-clear bits\r\n                this.fcs = (this.fcs & ~FCS_WRITE_MASK) | (value & FCS_WRITE_MASK);\r\n                this.checkInterrupts();\r\n                break;\r\n            case DIV:\r\n                this.clockDiv = value;\r\n                break;\r\n            case INTE:\r\n                this.intEnable = value & FIFO_INT;\r\n                this.checkInterrupts();\r\n                break;\r\n            case INTF:\r\n                this.intForce = value & FIFO_INT;\r\n                this.checkInterrupts();\r\n                break;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n}\r\nexports.RPADC = RPADC;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPClocks = void 0;\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst CLK_REF_CTRL = 0x30;\r\nconst CLK_REF_SELECTED = 0x38;\r\nconst CLK_SYS_CTRL = 0x3c;\r\nconst CLK_SYS_SELECTED = 0x44;\r\nclass RPClocks extends peripheral_1.BasePeripheral {\r\n    constructor(rp2040, name) {\r\n        super(rp2040, name);\r\n        this.refCtrl = 0;\r\n        this.sysCtrl = 0;\r\n    }\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case CLK_REF_CTRL:\r\n                return this.refCtrl;\r\n            case CLK_REF_SELECTED:\r\n                return 1 << (this.refCtrl & 0x03);\r\n            case CLK_SYS_CTRL:\r\n                return this.sysCtrl;\r\n            case CLK_SYS_SELECTED:\r\n                return 1 << (this.sysCtrl & 0x01);\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        switch (offset) {\r\n            case CLK_REF_CTRL:\r\n                this.refCtrl = value;\r\n                break;\r\n            case CLK_SYS_CTRL:\r\n                this.sysCtrl = value;\r\n                break;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n                break;\r\n        }\r\n    }\r\n}\r\nexports.RPClocks = RPClocks;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPDMA = exports.RPDMAChannel = exports.DREQChannel = void 0;\r\nconst irq_1 = require(\"../irq\");\r\nconst peripheral_1 = require(\"./peripheral\");\r\nvar DREQChannel;\r\n(function (DREQChannel) {\r\n    DREQChannel[DREQChannel[\"DREQ_PIO0_TX0\"] = 0] = \"DREQ_PIO0_TX0\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO0_TX1\"] = 1] = \"DREQ_PIO0_TX1\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO0_TX2\"] = 2] = \"DREQ_PIO0_TX2\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO0_TX3\"] = 3] = \"DREQ_PIO0_TX3\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO0_RX0\"] = 4] = \"DREQ_PIO0_RX0\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO0_RX1\"] = 5] = \"DREQ_PIO0_RX1\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO0_RX2\"] = 6] = \"DREQ_PIO0_RX2\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO0_RX3\"] = 7] = \"DREQ_PIO0_RX3\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO1_TX0\"] = 8] = \"DREQ_PIO1_TX0\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO1_TX1\"] = 9] = \"DREQ_PIO1_TX1\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO1_TX2\"] = 10] = \"DREQ_PIO1_TX2\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO1_TX3\"] = 11] = \"DREQ_PIO1_TX3\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO1_RX0\"] = 12] = \"DREQ_PIO1_RX0\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO1_RX1\"] = 13] = \"DREQ_PIO1_RX1\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO1_RX2\"] = 14] = \"DREQ_PIO1_RX2\";\r\n    DREQChannel[DREQChannel[\"DREQ_PIO1_RX3\"] = 15] = \"DREQ_PIO1_RX3\";\r\n    DREQChannel[DREQChannel[\"DREQ_SPI0_TX\"] = 16] = \"DREQ_SPI0_TX\";\r\n    DREQChannel[DREQChannel[\"DREQ_SPI0_RX\"] = 17] = \"DREQ_SPI0_RX\";\r\n    DREQChannel[DREQChannel[\"DREQ_SPI1_TX\"] = 18] = \"DREQ_SPI1_TX\";\r\n    DREQChannel[DREQChannel[\"DREQ_SPI1_RX\"] = 19] = \"DREQ_SPI1_RX\";\r\n    DREQChannel[DREQChannel[\"DREQ_UART0_TX\"] = 20] = \"DREQ_UART0_TX\";\r\n    DREQChannel[DREQChannel[\"DREQ_UART0_RX\"] = 21] = \"DREQ_UART0_RX\";\r\n    DREQChannel[DREQChannel[\"DREQ_UART1_TX\"] = 22] = \"DREQ_UART1_TX\";\r\n    DREQChannel[DREQChannel[\"DREQ_UART1_RX\"] = 23] = \"DREQ_UART1_RX\";\r\n    DREQChannel[DREQChannel[\"DREQ_PWM_WRAP0\"] = 24] = \"DREQ_PWM_WRAP0\";\r\n    DREQChannel[DREQChannel[\"DREQ_PWM_WRAP1\"] = 25] = \"DREQ_PWM_WRAP1\";\r\n    DREQChannel[DREQChannel[\"DREQ_PWM_WRAP2\"] = 26] = \"DREQ_PWM_WRAP2\";\r\n    DREQChannel[DREQChannel[\"DREQ_PWM_WRAP3\"] = 27] = \"DREQ_PWM_WRAP3\";\r\n    DREQChannel[DREQChannel[\"DREQ_PWM_WRAP4\"] = 28] = \"DREQ_PWM_WRAP4\";\r\n    DREQChannel[DREQChannel[\"DREQ_PWM_WRAP5\"] = 29] = \"DREQ_PWM_WRAP5\";\r\n    DREQChannel[DREQChannel[\"DREQ_PWM_WRAP6\"] = 30] = \"DREQ_PWM_WRAP6\";\r\n    DREQChannel[DREQChannel[\"DREQ_PWM_WRAP7\"] = 31] = \"DREQ_PWM_WRAP7\";\r\n    DREQChannel[DREQChannel[\"DREQ_I2C0_TX\"] = 32] = \"DREQ_I2C0_TX\";\r\n    DREQChannel[DREQChannel[\"DREQ_I2C0_RX\"] = 33] = \"DREQ_I2C0_RX\";\r\n    DREQChannel[DREQChannel[\"DREQ_I2C1_TX\"] = 34] = \"DREQ_I2C1_TX\";\r\n    DREQChannel[DREQChannel[\"DREQ_I2C1_RX\"] = 35] = \"DREQ_I2C1_RX\";\r\n    DREQChannel[DREQChannel[\"DREQ_ADC\"] = 36] = \"DREQ_ADC\";\r\n    DREQChannel[DREQChannel[\"DREQ_XIP_STREAM\"] = 37] = \"DREQ_XIP_STREAM\";\r\n    DREQChannel[DREQChannel[\"DREQ_XIP_SSITX\"] = 38] = \"DREQ_XIP_SSITX\";\r\n    DREQChannel[DREQChannel[\"DREQ_XIP_SSIRX\"] = 39] = \"DREQ_XIP_SSIRX\";\r\n    DREQChannel[DREQChannel[\"DREQ_MAX\"] = 40] = \"DREQ_MAX\";\r\n})(DREQChannel = exports.DREQChannel || (exports.DREQChannel = {}));\r\nvar TREQ;\r\n(function (TREQ) {\r\n    TREQ[TREQ[\"Timer0\"] = 59] = \"Timer0\";\r\n    TREQ[TREQ[\"Timer1\"] = 60] = \"Timer1\";\r\n    TREQ[TREQ[\"Timer2\"] = 61] = \"Timer2\";\r\n    TREQ[TREQ[\"Timer3\"] = 62] = \"Timer3\";\r\n    TREQ[TREQ[\"Permanent\"] = 63] = \"Permanent\";\r\n})(TREQ || (TREQ = {}));\r\n// Per-channel registers\r\nconst CHn_READ_ADDR = 0x000; // DMA Channel n Read Address pointer\r\nconst CHn_WRITE_ADDR = 0x004; // DMA Channel n Write Address pointer\r\nconst CHn_TRANS_COUNT = 0x008; // DMA Channel n Transfer Count\r\nconst CHn_CTRL_TRIG = 0x00c; // DMA Channel n Control and Status\r\nconst CHn_AL1_CTRL = 0x010; // Alias for channel n CTRL register\r\nconst CHn_AL1_READ_ADDR = 0x014; // Alias for channel n READ_ADDR register\r\nconst CHn_AL1_WRITE_ADDR = 0x018; // Alias for channel n WRITE_ADDR register\r\nconst CHn_AL1_TRANS_COUNT_TRIG = 0x01c; // Alias for channel n TRANS_COUNT register\r\nconst CHn_AL2_CTRL = 0x020; // Alias for channel n CTRL register\r\nconst CHn_AL2_TRANS_COUNT = 0x024; // Alias for channel n TRANS_COUNT register\r\nconst CHn_AL2_READ_ADDR = 0x028; // Alias for channel n READ_ADDR register\r\nconst CHn_AL2_WRITE_ADDR_TRIG = 0x02c; // Alias for channel n WRITE_ADDR register\r\nconst CHn_AL3_CTRL = 0x030; // Alias for channel n CTRL register\r\nconst CHn_AL3_WRITE_ADDR = 0x034; // Alias for channel n WRITE_ADDR register\r\nconst CHn_AL3_TRANS_COUNT = 0x038; // Alias for channel n TRANS_COUNT register\r\nconst CHn_AL3_READ_ADDR_TRIG = 0x03c; // Alias for channel n READ_ADDR register\r\nconst CHn_DBG_CTDREQ = 0x800;\r\nconst CHn_DBG_TCR = 0x804;\r\nconst CHANNEL_REGISTERS_SIZE = 12 * 0x40;\r\nconst CHANNEL_REGISTERS_MASK = 0x83f;\r\n// General DMA registers\r\nconst INTR = 0x400; // Interrupt Status (raw)\r\nconst INTE0 = 0x404; // Interrupt Enables for IRQ 0\r\nconst INTF0 = 0x408; // Force Interrupts\r\nconst INTS0 = 0x40c; // Interrupt Status for IRQ 0\r\nconst INTE1 = 0x414; // Interrupt Enables for IRQ 1\r\nconst INTF1 = 0x418; // Force Interrupts for IRQ 1\r\nconst INTS1 = 0x41c; // Interrupt Status (masked) for IRQ 1\r\nconst TIMER0 = 0x420; // Pacing (X/Y) Fractional Timer\r\nconst TIMER1 = 0x424; // Pacing (X/Y) Fractional Timer\r\nconst TIMER2 = 0x428; // Pacing (X/Y) Fractional Timer\r\nconst TIMER3 = 0x42c; // Pacing (X/Y) Fractional Timer\r\nconst MULTI_CHAN_TRIGGER = 0x430; // Trigger one or more channels simultaneously\r\nconst SNIFF_CTRL = 0x434; // Sniffer Control\r\nconst SNIFF_DATA = 0x438; // Data accumulator for sniff hardware\r\nconst FIFO_LEVELS = 0x440; // Debug RAF, WAF, TDF levels\r\nconst CHAN_ABORT = 0x444; // Abort an in-progress transfer sequence on one or more channels\r\nconst N_CHANNELS = 0x448;\r\n// CHn_CTRL_TRIG bits\r\nconst AHB_ERROR = 1 << 31;\r\nconst READ_ERROR = 1 << 30;\r\nconst WRITE_ERROR = 1 << 29;\r\nconst BUSY = 1 << 24;\r\nconst SNIFF_EN = 1 << 23;\r\nconst BSWAP = 1 << 22;\r\nconst IRQ_QUIET = 1 << 21;\r\nconst TREQ_SEL_MASK = 0x3f;\r\nconst TREQ_SEL_SHIFT = 15;\r\nconst CHAIN_TO_MASK = 0xf;\r\nconst CHAIN_TO_SHIFT = 11;\r\nconst RING_SEL = 1 << 10;\r\nconst RING_SIZE_MASK = 0xf;\r\nconst RING_SIZE_SHIFT = 6;\r\nconst INCR_WRITE = 1 << 5;\r\nconst INCR_READ = 1 << 4;\r\nconst DATA_SIZE_MASK = 0x3;\r\nconst DATA_SIZE_SHIFT = 2;\r\nconst HIGH_PRIORITY = 1 << 1;\r\nconst EN = 1 << 0;\r\nconst CHn_CTRL_TRIG_WRITE_MASK = 0xffffff;\r\nconst CHn_CTRL_TRIG_WC_MASK = READ_ERROR | WRITE_ERROR;\r\nclass RPDMAChannel {\r\n    constructor(dma, rp2040, index) {\r\n        this.dma = dma;\r\n        this.rp2040 = rp2040;\r\n        this.index = index;\r\n        this.ctrl = 0;\r\n        this.readAddr = 0;\r\n        this.writeAddr = 0;\r\n        this.transCount = 0;\r\n        this.dreqCounter = 0;\r\n        this.transCountReload = 0;\r\n        this.treqValue = 0;\r\n        this.dataSize = 1;\r\n        this.chainTo = 0;\r\n        this.ringMask = 0;\r\n        this.transferFn = () => 0;\r\n        this.transferTimer = null;\r\n        this.transfer8 = () => {\r\n            const { rp2040 } = this;\r\n            rp2040.writeUint8(this.writeAddr, rp2040.readUint8(this.readAddr));\r\n        };\r\n        this.transfer16 = () => {\r\n            const { rp2040 } = this;\r\n            rp2040.writeUint16(this.writeAddr, rp2040.readUint16(this.readAddr));\r\n        };\r\n        this.transferSwap16 = () => {\r\n            const { rp2040 } = this;\r\n            const input = rp2040.readUint16(this.readAddr);\r\n            rp2040.writeUint16(this.writeAddr, ((input & 0xff) << 8) | (input >> 8));\r\n        };\r\n        this.transfer32 = () => {\r\n            const { rp2040 } = this;\r\n            rp2040.writeUint32(this.writeAddr, rp2040.readUint32(this.readAddr));\r\n        };\r\n        this.transferSwap32 = () => {\r\n            const { rp2040 } = this;\r\n            const input = rp2040.readUint32(this.readAddr);\r\n            rp2040.writeUint32(this.writeAddr, ((input & 0x000000ff) << 24) |\r\n                ((input & 0x0000ff00) << 8) |\r\n                ((input & 0x00ff0000) >> 8) |\r\n                ((input >> 24) & 0xff));\r\n        };\r\n        this.transfer = () => {\r\n            var _a;\r\n            const { ctrl, dataSize, ringMask } = this;\r\n            this.transferTimer = null;\r\n            this.transferFn();\r\n            if (ctrl & INCR_READ) {\r\n                if (ringMask && !(ctrl & RING_SEL)) {\r\n                    this.readAddr = (this.readAddr & ~ringMask) | ((this.readAddr + dataSize) & ringMask);\r\n                }\r\n                else {\r\n                    this.readAddr += dataSize;\r\n                }\r\n            }\r\n            if (ctrl & INCR_WRITE) {\r\n                if (ringMask && ctrl & RING_SEL) {\r\n                    this.writeAddr = (this.writeAddr & ~ringMask) | ((this.writeAddr + dataSize) & ringMask);\r\n                }\r\n                else {\r\n                    this.writeAddr += dataSize;\r\n                }\r\n            }\r\n            this.transCount--;\r\n            if (this.transCount > 0) {\r\n                this.scheduleTransfer();\r\n            }\r\n            else {\r\n                this.ctrl &= ~BUSY;\r\n                if (!(this.ctrl & IRQ_QUIET)) {\r\n                    this.dma.intRaw |= 1 << this.index;\r\n                    this.dma.checkInterrupts();\r\n                }\r\n                if (this.chainTo !== this.index) {\r\n                    (_a = this.dma.channels[this.chainTo]) === null || _a === void 0 ? void 0 : _a.start();\r\n                }\r\n            }\r\n        };\r\n        this.reset();\r\n    }\r\n    start() {\r\n        if (!(this.ctrl & EN) || this.ctrl & BUSY) {\r\n            return;\r\n        }\r\n        this.ctrl |= BUSY;\r\n        this.transCount = this.transCountReload;\r\n        if (this.transCount) {\r\n            this.scheduleTransfer();\r\n        }\r\n    }\r\n    get treq() {\r\n        return this.treqValue;\r\n    }\r\n    get active() {\r\n        return this.ctrl & EN && this.ctrl & BUSY;\r\n    }\r\n    scheduleTransfer() {\r\n        if (this.transferTimer) {\r\n            // Already scheduled; do nothing.\r\n            return;\r\n        }\r\n        if (this.dma.dreq[this.treqValue] || this.treqValue === TREQ.Permanent) {\r\n            this.transferTimer = this.rp2040.clock.createTimer(0, this.transfer);\r\n        }\r\n        else {\r\n            const delay = this.dma.getTimer(this.treqValue);\r\n            if (delay) {\r\n                this.transferTimer = this.rp2040.clock.createTimer(delay, this.transfer);\r\n            }\r\n        }\r\n    }\r\n    abort() {\r\n        this.ctrl &= ~BUSY;\r\n        if (this.transferTimer) {\r\n            this.rp2040.clock.deleteTimer(this.transferTimer);\r\n            this.transferTimer = null;\r\n        }\r\n    }\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case CHn_READ_ADDR:\r\n            case CHn_AL1_READ_ADDR:\r\n            case CHn_AL2_READ_ADDR:\r\n            case CHn_AL3_READ_ADDR_TRIG:\r\n                return this.readAddr;\r\n            case CHn_WRITE_ADDR:\r\n            case CHn_AL1_WRITE_ADDR:\r\n            case CHn_AL2_WRITE_ADDR_TRIG:\r\n            case CHn_AL3_WRITE_ADDR:\r\n                return this.writeAddr;\r\n            case CHn_TRANS_COUNT:\r\n            case CHn_AL1_TRANS_COUNT_TRIG:\r\n            case CHn_AL2_TRANS_COUNT:\r\n            case CHn_AL3_TRANS_COUNT:\r\n                return this.transCount;\r\n            case CHn_CTRL_TRIG:\r\n            case CHn_AL1_CTRL:\r\n            case CHn_AL2_CTRL:\r\n            case CHn_AL3_CTRL:\r\n                return this.ctrl;\r\n            case CHn_DBG_CTDREQ:\r\n                return this.dreqCounter;\r\n            case CHn_DBG_TCR:\r\n                return this.transCountReload;\r\n        }\r\n        return 0;\r\n    }\r\n    writeUint32(offset, value) {\r\n        switch (offset) {\r\n            case CHn_READ_ADDR:\r\n            case CHn_AL1_READ_ADDR:\r\n            case CHn_AL2_READ_ADDR:\r\n            case CHn_AL3_READ_ADDR_TRIG:\r\n                this.readAddr = value;\r\n                break;\r\n            case CHn_WRITE_ADDR:\r\n            case CHn_AL1_WRITE_ADDR:\r\n            case CHn_AL2_WRITE_ADDR_TRIG:\r\n            case CHn_AL3_WRITE_ADDR:\r\n                this.writeAddr = value;\r\n                break;\r\n            case CHn_TRANS_COUNT:\r\n            case CHn_AL1_TRANS_COUNT_TRIG:\r\n            case CHn_AL2_TRANS_COUNT:\r\n            case CHn_AL3_TRANS_COUNT:\r\n                this.transCountReload = value;\r\n                break;\r\n            case CHn_CTRL_TRIG:\r\n            case CHn_AL1_CTRL:\r\n            case CHn_AL2_CTRL:\r\n            case CHn_AL3_CTRL: {\r\n                this.ctrl = (this.ctrl & ~CHn_CTRL_TRIG_WRITE_MASK) | (value & CHn_CTRL_TRIG_WRITE_MASK);\r\n                this.ctrl &= ~(value & CHn_CTRL_TRIG_WC_MASK); // Handle write-clear (WC) bits\r\n                this.treqValue = (this.ctrl >> TREQ_SEL_SHIFT) & TREQ_SEL_MASK;\r\n                this.chainTo = (this.ctrl >> CHAIN_TO_SHIFT) & CHAIN_TO_MASK;\r\n                const ringSize = (this.ctrl >> RING_SIZE_SHIFT) & RING_SIZE_MASK;\r\n                this.ringMask = ringSize ? (1 << ringSize) - 1 : 0;\r\n                switch ((this.ctrl >> DATA_SIZE_SHIFT) & DATA_SIZE_MASK) {\r\n                    case 1:\r\n                        this.dataSize = 2;\r\n                        this.transferFn = this.ctrl & BSWAP ? this.transferSwap16 : this.transfer16;\r\n                        break;\r\n                    case 2:\r\n                        this.dataSize = 4;\r\n                        this.transferFn = this.ctrl & BSWAP ? this.transferSwap32 : this.transfer32;\r\n                        break;\r\n                    case 0:\r\n                    default:\r\n                        this.transferFn = this.transfer8;\r\n                        this.dataSize = 1;\r\n                }\r\n                if (this.ctrl & EN && this.ctrl & BUSY) {\r\n                    this.scheduleTransfer();\r\n                }\r\n                if (!(this.ctrl & EN) && this.transferTimer) {\r\n                    this.rp2040.clock.deleteTimer(this.transferTimer);\r\n                    this.transferTimer = null;\r\n                }\r\n                break;\r\n            }\r\n            case CHn_DBG_CTDREQ:\r\n                this.dreqCounter = 0;\r\n                break;\r\n        }\r\n        if (offset === CHn_AL3_READ_ADDR_TRIG ||\r\n            offset === CHn_AL2_WRITE_ADDR_TRIG ||\r\n            offset === CHn_AL1_TRANS_COUNT_TRIG ||\r\n            offset === CHn_CTRL_TRIG) {\r\n            if (value) {\r\n                this.start();\r\n            }\r\n            else if (this.ctrl & IRQ_QUIET) {\r\n                // Null trigger interrupts\r\n                this.dma.intRaw |= 1 << this.index;\r\n                this.dma.checkInterrupts();\r\n            }\r\n        }\r\n    }\r\n    reset() {\r\n        this.writeUint32(CHn_CTRL_TRIG, this.index << CHAIN_TO_SHIFT);\r\n    }\r\n}\r\nexports.RPDMAChannel = RPDMAChannel;\r\nclass RPDMA extends peripheral_1.BasePeripheral {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.channels = [\r\n            new RPDMAChannel(this, this.rp2040, 0),\r\n            new RPDMAChannel(this, this.rp2040, 1),\r\n            new RPDMAChannel(this, this.rp2040, 2),\r\n            new RPDMAChannel(this, this.rp2040, 3),\r\n            new RPDMAChannel(this, this.rp2040, 4),\r\n            new RPDMAChannel(this, this.rp2040, 5),\r\n            new RPDMAChannel(this, this.rp2040, 6),\r\n            new RPDMAChannel(this, this.rp2040, 7),\r\n            new RPDMAChannel(this, this.rp2040, 8),\r\n            new RPDMAChannel(this, this.rp2040, 9),\r\n            new RPDMAChannel(this, this.rp2040, 10),\r\n            new RPDMAChannel(this, this.rp2040, 11),\r\n        ];\r\n        this.intRaw = 0;\r\n        this.intEnable0 = 0;\r\n        this.intForce0 = 0;\r\n        this.intEnable1 = 0;\r\n        this.intForce1 = 0;\r\n        this.timer0 = 0;\r\n        this.timer1 = 0;\r\n        this.timer2 = 0;\r\n        this.timer3 = 0;\r\n        this.dreq = Array(DREQChannel.DREQ_MAX);\r\n    }\r\n    get intStatus0() {\r\n        return (this.intRaw & this.intEnable0) | this.intForce0;\r\n    }\r\n    get intStatus1() {\r\n        return (this.intRaw & this.intEnable1) | this.intForce1;\r\n    }\r\n    readUint32(offset) {\r\n        if ((offset & 0x7ff) <= CHANNEL_REGISTERS_SIZE) {\r\n            const channelIndex = (offset & 0x7ff) >> 6;\r\n            return this.channels[channelIndex].readUint32(offset & CHANNEL_REGISTERS_MASK);\r\n        }\r\n        switch (offset) {\r\n            case TIMER0:\r\n                return this.timer0;\r\n            case TIMER1:\r\n                return this.timer1;\r\n            case TIMER2:\r\n                return this.timer2;\r\n            case TIMER3:\r\n                return this.timer3;\r\n            case INTR:\r\n                return this.intRaw;\r\n            case INTE0:\r\n                return this.intEnable0;\r\n            case INTF0:\r\n                return this.intForce0;\r\n            case INTS0:\r\n                return this.intStatus0;\r\n            case INTE1:\r\n                return this.intEnable1;\r\n            case INTF1:\r\n                return this.intForce1;\r\n            case INTS1:\r\n                return this.intStatus1;\r\n            case N_CHANNELS:\r\n                return this.channels.length;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        if ((offset & 0x7ff) <= CHANNEL_REGISTERS_SIZE) {\r\n            const channelIndex = (offset & 0x7ff) >> 6;\r\n            this.channels[channelIndex].writeUint32(offset & CHANNEL_REGISTERS_MASK, value);\r\n            return;\r\n        }\r\n        switch (offset) {\r\n            case TIMER0:\r\n                this.timer0 = value;\r\n                return;\r\n            case TIMER1:\r\n                this.timer1 = value;\r\n                return;\r\n            case TIMER2:\r\n                this.timer2 = value;\r\n                return;\r\n            case TIMER3:\r\n                this.timer3 = value;\r\n                return;\r\n            case INTR:\r\n            case INTS0:\r\n            case INTS1:\r\n                this.intRaw &= ~this.rawWriteValue;\r\n                this.checkInterrupts();\r\n                return;\r\n            case INTE0:\r\n                this.intEnable0 = value & 0xffff;\r\n                this.checkInterrupts();\r\n                return;\r\n            case INTF0:\r\n                this.intForce0 = value & 0xffff;\r\n                this.checkInterrupts();\r\n                return;\r\n            case INTE1:\r\n                this.intEnable1 = value & 0xffff;\r\n                this.checkInterrupts();\r\n                return;\r\n            case INTF1:\r\n                this.intForce1 = value & 0xffff;\r\n                this.checkInterrupts();\r\n                return;\r\n            case MULTI_CHAN_TRIGGER:\r\n                for (const chan of this.channels) {\r\n                    if (value & (1 << chan.index)) {\r\n                        chan.start();\r\n                    }\r\n                }\r\n                return;\r\n            case CHAN_ABORT:\r\n                for (const chan of this.channels) {\r\n                    if (value & (1 << chan.index)) {\r\n                        chan.abort();\r\n                    }\r\n                }\r\n                return;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n    setDREQ(dreqChannel) {\r\n        const { dreq } = this;\r\n        if (!dreq[dreqChannel]) {\r\n            dreq[dreqChannel] = true;\r\n            for (const channel of this.channels) {\r\n                if (channel.treq === dreqChannel && channel.active) {\r\n                    channel.scheduleTransfer();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    clearDREQ(dreqChannel) {\r\n        this.dreq[dreqChannel] = false;\r\n    }\r\n    /**\r\n     * Returns the number of microseconds for a cycle of the given DMA timer, or 0 if the timer is disabled.\r\n     */\r\n    getTimer(treq) {\r\n        let dividend = 0, divisor = 1;\r\n        switch (treq) {\r\n            case TREQ.Permanent:\r\n                dividend = 1;\r\n                divisor = 1;\r\n                break;\r\n            case TREQ.Timer0:\r\n                dividend = this.timer0 >>> 16;\r\n                divisor = this.timer0 & 0xffff;\r\n                break;\r\n            case TREQ.Timer1:\r\n                dividend = this.timer1 >>> 16;\r\n                divisor = this.timer1 & 0xffff;\r\n                break;\r\n            case TREQ.Timer2:\r\n                dividend = this.timer2 >>> 16;\r\n                divisor = this.timer2 & 0xffff;\r\n                break;\r\n            case TREQ.Timer3:\r\n                dividend = this.timer3 >>> 36;\r\n                divisor = this.timer3 & 0xffff;\r\n                break;\r\n        }\r\n        if (divisor === 0) {\r\n            return 0;\r\n        }\r\n        return ((dividend / divisor) * 1e6) / this.rp2040.clkSys;\r\n    }\r\n    checkInterrupts() {\r\n        this.rp2040.setInterrupt(irq_1.IRQ.DMA_IRQ0, !!this.intStatus0);\r\n        this.rp2040.setInterrupt(irq_1.IRQ.DMA_IRQ1, !!this.intStatus1);\r\n    }\r\n}\r\nexports.RPDMA = RPDMA;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPI2C = exports.I2CSpeed = exports.I2CMode = void 0;\r\nconst fifo_1 = require(\"../utils/fifo\");\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst IC_CON = 0x00; // I2C Control Register\r\nconst IC_TAR = 0x04; // I2C Target Address Register\r\nconst IC_SAR = 0x08; // I2C Slave Address Register\r\nconst IC_DATA_CMD = 0x10; // I2C Rx/Tx Data Buffer and Command Register\r\nconst IC_SS_SCL_HCNT = 0x14; // Standard Speed I2C Clock SCL High Count Register\r\nconst IC_SS_SCL_LCNT = 0x18; // Standard Speed I2C Clock SCL Low Count Register\r\nconst IC_FS_SCL_HCNT = 0x1c; // Fast Mode or Fast Mode Plus I2C Clock SCL High Count Register\r\nconst IC_FS_SCL_LCNT = 0x20; // Fast Mode or Fast Mode Plus I2C Clock SCL Low Count Register\r\nconst IC_INTR_STAT = 0x2c; // I2C Interrupt Status Register\r\nconst IC_INTR_MASK = 0x30; // I2C Interrupt Mask Register\r\nconst IC_RAW_INTR_STAT = 0x34; // I2C Raw Interrupt Status Register\r\nconst IC_RX_TL = 0x38; // I2C Receive FIFO Threshold Register\r\nconst IC_TX_TL = 0x3c; // I2C Transmit FIFO Threshold Register\r\nconst IC_CLR_INTR = 0x40; // Clear Combined and Individual Interrupt Register\r\nconst IC_CLR_RX_UNDER = 0x44; // Clear RX_UNDER Interrupt Register\r\nconst IC_CLR_RX_OVER = 0x48; // Clear RX_OVER Interrupt Register\r\nconst IC_CLR_TX_OVER = 0x4c; // Clear TX_OVER Interrupt Register\r\nconst IC_CLR_RD_REQ = 0x50; // Clear RD_REQ Interrupt Register\r\nconst IC_CLR_TX_ABRT = 0x54; // Clear TX_ABRT Interrupt Register\r\nconst IC_CLR_RX_DONE = 0x58; // Clear RX_DONE Interrupt Register\r\nconst IC_CLR_ACTIVITY = 0x5c; // Clear ACTIVITY Interrupt Register\r\nconst IC_CLR_STOP_DET = 0x60; // Clear STOP_DET Interrupt Register\r\nconst IC_CLR_START_DET = 0x64; // Clear START_DET Interrupt Register\r\nconst IC_CLR_GEN_CALL = 0x68; // Clear GEN_CALL Interrupt Register\r\nconst IC_ENABLE = 0x6c; // I2C ENABLE Register\r\nconst IC_STATUS = 0x70; // I2C STATUS Register\r\nconst IC_TXFLR = 0x74; // I2C Transmit FIFO Level Register\r\nconst IC_RXFLR = 0x78; // I2C Receive FIFO Level Register\r\nconst IC_SDA_HOLD = 0x7c; // I2C SDA Hold Time Length Register\r\nconst IC_TX_ABRT_SOURCE = 0x80; // I2C Transmit Abort Source Register\r\nconst IC_SLV_DATA_NACK_ONLY = 0x84; // Generate Slave Data NACK Register\r\nconst IC_DMA_CR = 0x88; // DMA Control Register\r\nconst IC_DMA_TDLR = 0x8c; // DMA Transmit Data Level Register\r\nconst IC_DMA_RDLR = 0x90; // DMA Transmit Data Level Register\r\nconst IC_SDA_SETUP = 0x94; // I2C SDA Setup Register\r\nconst IC_ACK_GENERAL_CALL = 0x98; // I2C ACK General Call Register\r\nconst IC_ENABLE_STATUS = 0x9c; // I2C Enable Status Register\r\nconst IC_FS_SPKLEN = 0xa0; // I2C SS, FS or FM+ spike suppression limit\r\nconst IC_CLR_RESTART_DET = 0xa8; // Clear RESTART_DET Interrupt Register\r\nconst IC_COMP_PARAM_1 = 0xf4; // Component Parameter Register 1\r\nconst IC_COMP_VERSION = 0xf8; // I2C Component Version Register\r\nconst IC_COMP_TYPE = 0xfc; // I2C Component Type Register\r\n// IC_CON bits:\r\nconst STOP_DET_IF_MASTER_ACTIVE = 1 << 10;\r\nconst RX_FIFO_FULL_HLD_CTRL = 1 << 9;\r\nconst TX_EMPTY_CTRL = 1 << 8;\r\nconst STOP_DET_IFADDRESSED = 1 << 7;\r\nconst IC_SLAVE_DISABLE = 1 << 6;\r\nconst IC_RESTART_EN = 1 << 5;\r\nconst IC_10BITADDR_MASTER = 1 << 4;\r\nconst IC_10BITADDR_SLAVE = 1 << 3;\r\nconst SPEED_SHIFT = 1;\r\nconst SPEED_MASK = 0x3;\r\nconst MASTER_MODE = 1 << 0;\r\n// IC_TAR bits:\r\nconst SPECIAL = 1 << 11;\r\nconst GC_OR_START = 1 << 10;\r\n// IC_STATUS bits:\r\nconst SLV_ACTIVITY = 1 << 6;\r\nconst MST_ACTIVITY = 1 << 5;\r\nconst RFF = 1 << 4;\r\nconst RFNE = 1 << 3;\r\nconst TFE = 1 << 2;\r\nconst TFNF = 1 << 1;\r\nconst ACTIVITY = 1 << 0;\r\n// IC_ENABLE bits:\r\nconst TX_CMD_BLOCK = 1 << 2;\r\nconst ABORT = 1 << 1;\r\nconst ENABLE = 1 << 0;\r\n// IC_TX_ABRT_SOURCE bits:\r\nconst TX_FLUSH_CNT_MASK = 0x1ff;\r\nconst TX_FLUSH_CNT_SHIFT = 23;\r\nconst ABRT_USER_ABRT = 1 << 16;\r\nconst ABRT_SLVRD_INT = 1 << 15;\r\nconst ABRT_SLV_ARBLOST = 1 << 14;\r\nconst ABRT_SLVFLUSH_TXFIFO = 1 << 13;\r\nconst ARB_LOST = 1 << 12;\r\nconst ABRT_MASTER_DIS = 1 << 11;\r\nconst ABRT_10B_RD_NORSTRT = 1 << 10;\r\nconst ABRT_SBYTE_NORSTRT = 1 << 9;\r\nconst ABRT_HS_NORSTRT = 1 << 8;\r\nconst ABRT_SBYTE_ACKDET = 1 << 7;\r\nconst ABRT_HS_ACKDET = 1 << 6;\r\nconst ABRT_GCALL_READ = 1 << 5;\r\nconst ABRT_GCALL_NOACK = 1 << 4;\r\nconst ABRT_TXDATA_NOACK = 1 << 3;\r\nconst ABRT_10ADDR2_NOACK = 1 << 2;\r\nconst ABRT_10ADDR1_NOACK = 1 << 1;\r\nconst ABRT_7B_ADDR_NOACK = 1 << 0;\r\n/* Connection parameters */\r\nvar I2CMode;\r\n(function (I2CMode) {\r\n    I2CMode[I2CMode[\"Write\"] = 0] = \"Write\";\r\n    I2CMode[I2CMode[\"Read\"] = 1] = \"Read\";\r\n})(I2CMode = exports.I2CMode || (exports.I2CMode = {}));\r\nvar I2CSpeed;\r\n(function (I2CSpeed) {\r\n    I2CSpeed[I2CSpeed[\"Invalid\"] = 0] = \"Invalid\";\r\n    /* standard mode (100 kbit/s) */\r\n    I2CSpeed[I2CSpeed[\"Standard\"] = 1] = \"Standard\";\r\n    /* fast mode (<=400 kbit/s) or fast mode plus (<=1000Kbit/s) */\r\n    I2CSpeed[I2CSpeed[\"FastMode\"] = 2] = \"FastMode\";\r\n    /*  high speed mode (3.4 Mbit/s) */\r\n    I2CSpeed[I2CSpeed[\"HighSpeedMode\"] = 3] = \"HighSpeedMode\";\r\n})(I2CSpeed = exports.I2CSpeed || (exports.I2CSpeed = {}));\r\nvar I2CState;\r\n(function (I2CState) {\r\n    I2CState[I2CState[\"Idle\"] = 0] = \"Idle\";\r\n    I2CState[I2CState[\"Start\"] = 1] = \"Start\";\r\n    I2CState[I2CState[\"Connect\"] = 2] = \"Connect\";\r\n    I2CState[I2CState[\"Connected\"] = 3] = \"Connected\";\r\n    I2CState[I2CState[\"Stop\"] = 4] = \"Stop\";\r\n})(I2CState || (I2CState = {}));\r\n// Interrupts\r\nconst R_RESTART_DET = 1 << 12; // Slave mode only\r\nconst R_GEN_CALL = 1 << 11;\r\nconst R_START_DET = 1 << 10;\r\nconst R_STOP_DET = 1 << 9;\r\nconst R_ACTIVITY = 1 << 8;\r\nconst R_RX_DONE = 1 << 7;\r\nconst R_TX_ABRT = 1 << 6;\r\nconst R_RD_REQ = 1 << 5;\r\nconst R_TX_EMPTY = 1 << 4;\r\nconst R_TX_OVER = 1 << 3;\r\nconst R_RX_FULL = 1 << 2;\r\nconst R_RX_OVER = 1 << 1;\r\nconst R_RX_UNDER = 1 << 0;\r\n// FIFO entry bits\r\nconst FIRST_DATA_BYTE = 1 << 10;\r\nconst RESTART = 1 << 10;\r\nconst STOP = 1 << 9;\r\nconst CMD = 1 << 8; // 0 for write, 1 for read\r\nclass RPI2C extends peripheral_1.BasePeripheral {\r\n    constructor(rp2040, name, irq) {\r\n        super(rp2040, name);\r\n        this.irq = irq;\r\n        this.state = I2CState.Idle;\r\n        this.busy = false;\r\n        this.stop = false;\r\n        this.pendingRestart = false;\r\n        this.firstByte = false;\r\n        this.rxFIFO = new fifo_1.FIFO(16);\r\n        this.txFIFO = new fifo_1.FIFO(16);\r\n        // user provided callbacks\r\n        this.onStart = () => this.completeStart();\r\n        this.onConnect = () => this.completeConnect(false);\r\n        this.onWriteByte = () => this.completeWrite(false);\r\n        this.onReadByte = () => this.completeRead(0xff);\r\n        this.onStop = () => this.completeStop();\r\n        this.enable = 0;\r\n        this.rxThreshold = 0;\r\n        this.txThreshold = 0;\r\n        this.control = IC_SLAVE_DISABLE | IC_RESTART_EN | (I2CSpeed.FastMode << SPEED_SHIFT) | MASTER_MODE;\r\n        this.targetAddress = 0x55;\r\n        this.slaveAddress = 0x55;\r\n        this.abortSource = 0;\r\n        this.intRaw = 0;\r\n        this.intEnable = 0;\r\n    }\r\n    get intStatus() {\r\n        return this.intRaw & this.intEnable;\r\n    }\r\n    get speed() {\r\n        return ((this.control >> SPEED_SHIFT) & SPEED_MASK);\r\n    }\r\n    get masterBits() {\r\n        return this.control & IC_10BITADDR_MASTER ? 10 : 7;\r\n    }\r\n    checkInterrupts() {\r\n        this.rp2040.setInterrupt(this.irq, !!this.intStatus);\r\n    }\r\n    clearInterrupts(mask) {\r\n        if (this.intRaw & mask) {\r\n            this.intRaw &= ~mask;\r\n            this.checkInterrupts();\r\n            return 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    setInterrupts(mask) {\r\n        if (!(this.intRaw & mask)) {\r\n            this.intRaw |= mask;\r\n            this.checkInterrupts();\r\n        }\r\n    }\r\n    abort(reason) {\r\n        this.abortSource &= ~TX_FLUSH_CNT_MASK;\r\n        this.abortSource |= reason | (this.txFIFO.itemCount << TX_FLUSH_CNT_SHIFT);\r\n        this.txFIFO.reset();\r\n        this.setInterrupts(R_TX_ABRT);\r\n    }\r\n    nextCommand() {\r\n        const enabled = this.enable & ENABLE;\r\n        const blocked = this.enable & TX_CMD_BLOCK;\r\n        if (this.txFIFO.empty || this.busy || blocked || !enabled) {\r\n            return;\r\n        }\r\n        this.busy = true;\r\n        const restart = !!(this.txFIFO.peek() & RESTART) && !this.pendingRestart && !this.stop;\r\n        if (this.state === I2CState.Idle || restart) {\r\n            this.pendingRestart = restart;\r\n            this.stop = false;\r\n            this.state = I2CState.Start;\r\n            this.onStart(restart);\r\n            return;\r\n        }\r\n        this.pendingRestart = false;\r\n        const cmd = this.txFIFO.pull();\r\n        const readMode = !!(cmd & CMD);\r\n        this.stop = !!(cmd & STOP);\r\n        if (readMode) {\r\n            this.onReadByte(!this.stop);\r\n        }\r\n        else {\r\n            this.onWriteByte(cmd & 0xff);\r\n        }\r\n        if (this.txFIFO.itemCount <= this.txThreshold) {\r\n            this.setInterrupts(R_TX_EMPTY);\r\n        }\r\n    }\r\n    pushRX(value) {\r\n        if (this.rxFIFO.full) {\r\n            this.setInterrupts(R_RX_OVER);\r\n            return;\r\n        }\r\n        this.rxFIFO.push(value);\r\n        if (this.rxFIFO.itemCount > this.rxThreshold) {\r\n            this.setInterrupts(R_RX_FULL);\r\n        }\r\n    }\r\n    completeStart() {\r\n        if (this.txFIFO.empty || this.state !== I2CState.Start || this.stop) {\r\n            this.onStop();\r\n            return;\r\n        }\r\n        const mode = this.txFIFO.peek() & CMD ? I2CMode.Read : I2CMode.Write;\r\n        this.state = I2CState.Connect;\r\n        this.setInterrupts(R_START_DET);\r\n        const addressMask = this.masterBits === 10 ? 0x3ff : 0xff;\r\n        this.onConnect(this.targetAddress & addressMask, mode);\r\n    }\r\n    completeConnect(ack, nackByte = 0) {\r\n        if (!ack || this.stop) {\r\n            if (!ack) {\r\n                if (!this.targetAddress) {\r\n                    this.abort(ABRT_GCALL_NOACK);\r\n                }\r\n                else if (this.control & IC_10BITADDR_MASTER) {\r\n                    this.abort(nackByte === 0 ? ABRT_10ADDR1_NOACK : ABRT_10ADDR2_NOACK);\r\n                }\r\n                else {\r\n                    this.abort(ABRT_7B_ADDR_NOACK);\r\n                }\r\n            }\r\n            this.state = I2CState.Stop;\r\n            this.onStop();\r\n            return;\r\n        }\r\n        this.state = I2CState.Connected;\r\n        this.busy = false;\r\n        this.firstByte = true;\r\n        this.nextCommand();\r\n    }\r\n    completeWrite(ack) {\r\n        if (!ack || this.stop) {\r\n            if (!ack) {\r\n                this.abort(ABRT_TXDATA_NOACK);\r\n            }\r\n            this.state = I2CState.Stop;\r\n            this.onStop();\r\n            return;\r\n        }\r\n        this.busy = false;\r\n        this.nextCommand();\r\n    }\r\n    completeRead(value) {\r\n        this.pushRX(value | (this.firstByte ? FIRST_DATA_BYTE : 0));\r\n        if (this.stop) {\r\n            this.state = I2CState.Stop;\r\n            this.onStop();\r\n            return;\r\n        }\r\n        this.firstByte = false;\r\n        this.busy = false;\r\n        this.nextCommand();\r\n    }\r\n    completeStop() {\r\n        this.state = I2CState.Idle;\r\n        this.setInterrupts(R_STOP_DET);\r\n        this.busy = false;\r\n        this.pendingRestart = false;\r\n        if (this.enable & ABORT) {\r\n            this.enable &= ~ABORT;\r\n        }\r\n        else {\r\n            this.nextCommand();\r\n        }\r\n    }\r\n    arbitrationLost() {\r\n        this.state = I2CState.Idle;\r\n        this.busy = false;\r\n        this.abort(ARB_LOST);\r\n    }\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case IC_CON:\r\n                return this.control;\r\n            case IC_TAR:\r\n                return this.targetAddress;\r\n            case IC_SAR:\r\n                return this.slaveAddress;\r\n            case IC_DATA_CMD:\r\n                if (this.rxFIFO.empty) {\r\n                    this.setInterrupts(R_RX_UNDER);\r\n                    return 0;\r\n                }\r\n                this.clearInterrupts(R_RX_FULL);\r\n                return this.rxFIFO.pull();\r\n            case IC_INTR_STAT:\r\n                return this.intStatus;\r\n            case IC_INTR_MASK:\r\n                return this.intEnable;\r\n            case IC_RAW_INTR_STAT:\r\n                return this.intRaw;\r\n            case IC_RX_TL:\r\n                return this.rxThreshold;\r\n            case IC_TX_TL:\r\n                return this.txThreshold;\r\n            case IC_CLR_INTR:\r\n                this.abortSource &= ABRT_SBYTE_NORSTRT; // Clear IC_TX_ABRT_SOURCE, expect for bit 9\r\n                return this.clearInterrupts(R_RX_UNDER |\r\n                    R_RX_OVER |\r\n                    R_TX_OVER |\r\n                    R_RD_REQ |\r\n                    R_TX_ABRT |\r\n                    R_RX_DONE |\r\n                    R_ACTIVITY |\r\n                    R_STOP_DET |\r\n                    R_START_DET |\r\n                    R_GEN_CALL);\r\n            case IC_CLR_RX_UNDER:\r\n                return this.clearInterrupts(R_RX_UNDER);\r\n            case IC_CLR_RX_OVER:\r\n                return this.clearInterrupts(R_RX_OVER);\r\n            case IC_CLR_TX_OVER:\r\n                return this.clearInterrupts(R_TX_OVER);\r\n            case IC_CLR_RD_REQ:\r\n                return this.clearInterrupts(R_RD_REQ);\r\n            case IC_CLR_TX_ABRT:\r\n                this.abortSource &= ABRT_SBYTE_NORSTRT; // Clear IC_TX_ABRT_SOURCE, expect for bit 9\r\n                return this.clearInterrupts(R_TX_ABRT);\r\n            case IC_CLR_RX_DONE:\r\n                return this.clearInterrupts(R_RX_DONE);\r\n            case IC_CLR_ACTIVITY:\r\n                return this.clearInterrupts(R_ACTIVITY);\r\n            case IC_CLR_STOP_DET:\r\n                return this.clearInterrupts(R_STOP_DET);\r\n            case IC_CLR_START_DET:\r\n                return this.clearInterrupts(R_START_DET);\r\n            case IC_CLR_GEN_CALL:\r\n                return this.clearInterrupts(R_GEN_CALL);\r\n            case IC_ENABLE:\r\n                return this.enable;\r\n            case IC_STATUS:\r\n                return ((this.state !== I2CState.Idle ? MST_ACTIVITY | ACTIVITY : 0) |\r\n                    (this.rxFIFO.full ? RFF : 0) |\r\n                    (!this.rxFIFO.empty ? RFNE : 0) |\r\n                    (this.txFIFO.empty ? TFE : 0) |\r\n                    (!this.txFIFO.full ? TFNF : 0));\r\n            case IC_TXFLR:\r\n                return this.txFIFO.itemCount;\r\n            case IC_RXFLR:\r\n                return this.rxFIFO.itemCount;\r\n            case IC_TX_ABRT_SOURCE: {\r\n                const value = this.abortSource;\r\n                this.abortSource &= ABRT_SBYTE_NORSTRT; // Clear IC_TX_ABRT_SOURCE, expect for bit 9\r\n                return value;\r\n            }\r\n            case IC_COMP_PARAM_1:\r\n                // From the datasheet:\r\n                // Note This register is not implemented and therefore reads as 0. If it was implemented it would be a constant read-only\r\n                // register that contains encoded information about the component's parameter settings.\r\n                return 0;\r\n            case IC_COMP_VERSION:\r\n                return 0x3230312a;\r\n            case IC_COMP_TYPE:\r\n                return 0x44570140;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        switch (offset) {\r\n            case IC_CON:\r\n                if (((value >> SPEED_SHIFT) & SPEED_MASK) === I2CSpeed.Invalid) {\r\n                    value = (value & ~(SPEED_MASK << SPEED_SHIFT)) | (I2CSpeed.HighSpeedMode << SPEED_SHIFT);\r\n                }\r\n                this.control = value;\r\n                return;\r\n            case IC_TAR:\r\n                this.targetAddress = value & 0x3ff;\r\n                return;\r\n            case IC_SAR:\r\n                this.slaveAddress = value & 0x3ff;\r\n                return;\r\n            case IC_DATA_CMD:\r\n                if (this.txFIFO.full) {\r\n                    this.setInterrupts(R_TX_OVER);\r\n                }\r\n                else {\r\n                    this.txFIFO.push(value);\r\n                    this.clearInterrupts(R_TX_EMPTY);\r\n                    this.nextCommand();\r\n                }\r\n                return;\r\n            case IC_RX_TL:\r\n                this.rxThreshold = value & 0xff;\r\n                if (this.rxThreshold > this.rxFIFO.size) {\r\n                    this.rxThreshold = this.rxFIFO.size;\r\n                }\r\n                return;\r\n            case IC_TX_TL:\r\n                this.txThreshold = value & 0xff;\r\n                if (this.txThreshold > this.txFIFO.size) {\r\n                    this.txThreshold = this.txFIFO.size;\r\n                }\r\n                return;\r\n            case IC_ENABLE:\r\n                // ABORT bit can only be set by software, not cleared.\r\n                value |= this.enable & ABORT;\r\n                if (value & ABORT) {\r\n                    if (this.state === I2CState.Idle) {\r\n                        value &= ~ABORT;\r\n                    }\r\n                    else {\r\n                        this.abort(ABRT_USER_ABRT);\r\n                        this.stop = true;\r\n                    }\r\n                }\r\n                if (!(value & ENABLE)) {\r\n                    this.txFIFO.reset();\r\n                    this.rxFIFO.reset();\r\n                }\r\n                this.enable = value;\r\n                this.nextCommand(); // TX_CMD_BLOCK may have changed\r\n                return;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n}\r\nexports.RPI2C = RPI2C;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPIO = void 0;\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst GPIO_CTRL_LAST = 0x0ec;\r\nconst INTR0 = 0xf0;\r\nconst PROC0_INTE0 = 0x100;\r\nconst PROC0_INTF0 = 0x110;\r\nconst PROC0_INTS0 = 0x120;\r\nconst PROC0_INTS3 = 0x12c;\r\nclass RPIO extends peripheral_1.BasePeripheral {\r\n    constructor(rp2040, name) {\r\n        super(rp2040, name);\r\n    }\r\n    getPinFromOffset(offset) {\r\n        const gpioIndex = offset >>> 3;\r\n        return {\r\n            gpio: this.rp2040.gpio[gpioIndex],\r\n            isCtrl: !!(offset & 0x4),\r\n        };\r\n    }\r\n    readUint32(offset) {\r\n        if (offset <= GPIO_CTRL_LAST) {\r\n            const { gpio, isCtrl } = this.getPinFromOffset(offset);\r\n            return isCtrl ? gpio.ctrl : gpio.status;\r\n        }\r\n        if (offset >= INTR0 && offset <= PROC0_INTS3) {\r\n            const startIndex = (offset & 0xf) * 2;\r\n            const register = offset & ~0xf;\r\n            const { gpio } = this.rp2040;\r\n            let result = 0;\r\n            for (let index = 7; index >= 0; index--) {\r\n                const pin = gpio[index + startIndex];\r\n                if (!pin) {\r\n                    continue;\r\n                }\r\n                result <<= 4;\r\n                switch (register) {\r\n                    case INTR0:\r\n                        result |= pin.irqStatus;\r\n                        break;\r\n                    case PROC0_INTE0:\r\n                        result |= pin.irqEnableMask;\r\n                        break;\r\n                    case PROC0_INTF0:\r\n                        result |= pin.irqForceMask;\r\n                        break;\r\n                    case PROC0_INTS0:\r\n                        result |= (pin.irqStatus & pin.irqEnableMask) | pin.irqForceMask;\r\n                        break;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        if (offset <= GPIO_CTRL_LAST) {\r\n            const { gpio, isCtrl } = this.getPinFromOffset(offset);\r\n            if (isCtrl) {\r\n                gpio.ctrl = value;\r\n                gpio.checkForUpdates();\r\n            }\r\n            return;\r\n        }\r\n        if (offset >= INTR0 && offset <= PROC0_INTS3) {\r\n            const startIndex = (offset & 0xf) * 2;\r\n            const register = offset & ~0xf;\r\n            const { gpio } = this.rp2040;\r\n            for (let index = 0; index < 8; index++) {\r\n                const pin = gpio[index + startIndex];\r\n                if (!pin) {\r\n                    continue;\r\n                }\r\n                const pinValue = (value >> (index * 4)) & 0xf;\r\n                const pinRawWriteValue = (this.rawWriteValue >> (index * 4)) & 0xf;\r\n                switch (register) {\r\n                    case INTR0:\r\n                        pin.updateIRQValue(pinRawWriteValue);\r\n                        break;\r\n                    case PROC0_INTE0:\r\n                        pin.irqEnableMask = pinValue;\r\n                        break;\r\n                    case PROC0_INTF0:\r\n                        pin.irqForceMask = pinValue;\r\n                        break;\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        super.writeUint32(offset, value);\r\n    }\r\n}\r\nexports.RPIO = RPIO;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPPADS = void 0;\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst VOLTAGE_SELECT = 0;\r\nconst GPIO_FIRST = 0x4;\r\nconst GPIO_LAST = 0x78;\r\nconst QSPI_FIRST = 0x4;\r\nconst QSPI_LAST = 0x18;\r\nclass RPPADS extends peripheral_1.BasePeripheral {\r\n    constructor(rp2040, name, bank) {\r\n        super(rp2040, name);\r\n        this.bank = bank;\r\n        this.voltageSelect = 0;\r\n        this.firstPadRegister = this.bank === 'qspi' ? QSPI_FIRST : GPIO_FIRST;\r\n        this.lastPadRegister = this.bank === 'qspi' ? QSPI_LAST : GPIO_LAST;\r\n    }\r\n    getPinFromOffset(offset) {\r\n        const gpioIndex = (offset - this.firstPadRegister) >>> 2;\r\n        if (this.bank === 'qspi') {\r\n            return this.rp2040.qspi[gpioIndex];\r\n        }\r\n        else {\r\n            return this.rp2040.gpio[gpioIndex];\r\n        }\r\n    }\r\n    readUint32(offset) {\r\n        if (offset >= this.firstPadRegister && offset <= this.lastPadRegister) {\r\n            const gpio = this.getPinFromOffset(offset);\r\n            return gpio.padValue;\r\n        }\r\n        switch (offset) {\r\n            case VOLTAGE_SELECT:\r\n                return this.voltageSelect;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        if (offset >= this.firstPadRegister && offset <= this.lastPadRegister) {\r\n            const gpio = this.getPinFromOffset(offset);\r\n            const oldInputEnable = gpio.inputEnable;\r\n            gpio.padValue = value;\r\n            gpio.checkForUpdates();\r\n            if (oldInputEnable !== gpio.inputEnable) {\r\n                gpio.refreshInput();\r\n            }\r\n            return;\r\n        }\r\n        switch (offset) {\r\n            case VOLTAGE_SELECT:\r\n                this.voltageSelect = value & 1;\r\n                break;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n}\r\nexports.RPPADS = RPPADS;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UnimplementedPeripheral = exports.BasePeripheral = exports.atomicUpdate = void 0;\r\nconst ATOMIC_NORMAL = 0;\r\nconst ATOMIC_XOR = 1;\r\nconst ATOMIC_SET = 2;\r\nconst ATOMIC_CLEAR = 3;\r\nfunction atomicUpdate(currentValue, atomicType, newValue) {\r\n    switch (atomicType) {\r\n        case ATOMIC_XOR:\r\n            return currentValue ^ newValue;\r\n        case ATOMIC_SET:\r\n            return currentValue | newValue;\r\n        case ATOMIC_CLEAR:\r\n            return currentValue & ~newValue;\r\n        default:\r\n            console.warn('Atomic update called with invalid writeType', atomicType);\r\n            return newValue;\r\n    }\r\n}\r\nexports.atomicUpdate = atomicUpdate;\r\nclass BasePeripheral {\r\n    constructor(rp2040, name) {\r\n        this.rp2040 = rp2040;\r\n        this.name = name;\r\n        this.rawWriteValue = 0;\r\n    }\r\n    readUint32(offset) {\r\n        this.warn(`Unimplemented peripheral read from ${offset.toString(16)}`);\r\n        if (offset > 0x1000) {\r\n            this.warn('Unimplemented read from peripheral in the atomic operation region');\r\n        }\r\n        return 0xffffffff;\r\n    }\r\n    writeUint32(offset, value) {\r\n        this.warn(`Unimplemented peripheral write to ${offset.toString(16)}: ${value}`);\r\n    }\r\n    writeUint32Atomic(offset, value, atomicType) {\r\n        this.rawWriteValue = value;\r\n        const newValue = atomicType != ATOMIC_NORMAL\r\n            ? atomicUpdate(this.readUint32(offset), atomicType, value)\r\n            : value;\r\n        this.writeUint32(offset, newValue);\r\n    }\r\n    debug(msg) {\r\n        this.rp2040.logger.debug(this.name, msg);\r\n    }\r\n    info(msg) {\r\n        this.rp2040.logger.info(this.name, msg);\r\n    }\r\n    warn(msg) {\r\n        this.rp2040.logger.warn(this.name, msg);\r\n    }\r\n    error(msg) {\r\n        this.rp2040.logger.error(this.name, msg);\r\n    }\r\n}\r\nexports.BasePeripheral = BasePeripheral;\r\nclass UnimplementedPeripheral extends BasePeripheral {\r\n}\r\nexports.UnimplementedPeripheral = UnimplementedPeripheral;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPPIO = exports.StateMachine = exports.WaitType = void 0;\r\nconst fifo_1 = require(\"../utils/fifo\");\r\nconst dma_1 = require(\"./dma\");\r\nconst peripheral_1 = require(\"./peripheral\");\r\n// Generic registers\r\nconst CTRL = 0x000;\r\nconst FSTAT = 0x004;\r\nconst FDEBUG = 0x008;\r\nconst FLEVEL = 0x00c;\r\nconst IRQ = 0x030;\r\nconst IRQ_FORCE = 0x034;\r\nconst INPUT_SYNC_BYPASS = 0x038;\r\nconst DBG_PADOUT = 0x03c;\r\nconst DBG_PADOE = 0x040;\r\nconst DBG_CFGINFO = 0x044;\r\nconst INSTR_MEM0 = 0x48;\r\nconst INSTR_MEM31 = 0x0c4;\r\nconst INTR = 0x128; // Raw Interrupts\r\nconst IRQ0_INTE = 0x12c; // Interrupt Enable for irq0\r\nconst IRQ0_INTF = 0x130; // Interrupt Force for irq0\r\nconst IRQ0_INTS = 0x134; // Interrupt status after masking & forcing for irq0\r\nconst IRQ1_INTE = 0x138; // Interrupt Enable for irq1\r\nconst IRQ1_INTF = 0x13c; // Interrupt Force for irq1\r\nconst IRQ1_INTS = 0x140; // Interrupt status after masking & forcing for irq1\r\n// State-machine specific registers\r\nconst TXF0 = 0x010;\r\nconst TXF1 = 0x014;\r\nconst TXF2 = 0x018;\r\nconst TXF3 = 0x01c;\r\nconst RXF0 = 0x020;\r\nconst RXF1 = 0x024;\r\nconst RXF2 = 0x028;\r\nconst RXF3 = 0x02c;\r\nconst SM0_CLKDIV = 0x0c8; // Clock divisor register for state machine 0\r\nconst SM0_EXECCTRL = 0x0cc; // Execution/behavioural settings for state machine 0\r\nconst SM0_SHIFTCTRL = 0x0d0; // Control behaviour of the input/output shift registers for state machine 0\r\nconst SM0_ADDR = 0x0d4; // Current instruction address of state machine 0\r\nconst SM0_INSTR = 0x0d8; // Write to execute an instruction immediately (including jumps) and then resume execution.\r\nconst SM0_PINCTRL = 0x0dc; //State machine pin control\r\nconst SM1_CLKDIV = 0x0e0;\r\nconst SM1_PINCTRL = 0x0f4;\r\nconst SM2_CLKDIV = 0x0f8;\r\nconst SM2_PINCTRL = 0x10c;\r\nconst SM3_CLKDIV = 0x110;\r\nconst SM3_PINCTRL = 0x124;\r\n// FSTAT bits\r\nconst FSTAT_TXEMPTY = 1 << 24;\r\nconst FSTAT_TXFULL = 1 << 16;\r\nconst FSTAT_RXEMPTY = 1 << 8;\r\nconst FSTAT_RXFULL = 1 << 0;\r\n// FDEBUG bits\r\nconst FDEBUG_TXSTALL = 1 << 24;\r\nconst FDEBUG_TXOVER = 1 << 16;\r\nconst FDEBUG_RXUNDER = 1 << 8;\r\nconst FDEBUG_RXSTALL = 1 << 0;\r\n// SHIFTCTRL bits\r\nconst SHIFTCTRL_AUTOPUSH = 1 << 16;\r\nconst SHIFTCTRL_AUTOPULL = 1 << 17;\r\nconst SHIFTCTRL_IN_SHIFTDIR = 1 << 18; // 1 = shift input shift register to right (data enters from left). 0 = to left\r\nconst SHIFTCTRL_OUT_SHIFTDIR = 1 << 19; // 1 = shift out of output shift register to right. 0 = to left\r\n// EXECCTRL bits\r\nconst EXECCTRL_STATUS_SEL = 1 << 4;\r\nconst EXECCTRL_SIDE_PINDIR = 1 << 29;\r\nconst EXECCTRL_SIDE_EN = 1 << 30;\r\nconst EXECCTRL_EXEC_STALLED = 1 << 31;\r\nvar WaitType;\r\n(function (WaitType) {\r\n    WaitType[WaitType[\"None\"] = 0] = \"None\";\r\n    WaitType[WaitType[\"Pin\"] = 1] = \"Pin\";\r\n    WaitType[WaitType[\"rxFIFO\"] = 2] = \"rxFIFO\";\r\n    WaitType[WaitType[\"txFIFO\"] = 3] = \"txFIFO\";\r\n    WaitType[WaitType[\"IRQ\"] = 4] = \"IRQ\";\r\n    WaitType[WaitType[\"Out\"] = 5] = \"Out\";\r\n})(WaitType = exports.WaitType || (exports.WaitType = {}));\r\nfunction bitReverse(x) {\r\n    x = ((x & 0x55555555) << 1) | ((x & 0xaaaaaaaa) >>> 1);\r\n    x = ((x & 0x33333333) << 2) | ((x & 0xcccccccc) >>> 2);\r\n    x = ((x & 0x0f0f0f0f) << 4) | ((x & 0xf0f0f0f0) >>> 4);\r\n    x = ((x & 0x00ff00ff) << 8) | ((x & 0xff00ff00) >>> 8);\r\n    x = ((x & 0x0000ffff) << 16) | ((x & 0xffff0000) >>> 16);\r\n    return x >>> 0;\r\n}\r\nfunction irqIndex(irq, machineIndex) {\r\n    const rel = !!(irq & 0x10);\r\n    return rel ? (irq & 0x4) | (((irq & 0x3) + machineIndex) & 0x3) : irq & 0x7;\r\n}\r\nconst dreqRx0 = [\r\n    dma_1.DREQChannel.DREQ_PIO0_RX0,\r\n    dma_1.DREQChannel.DREQ_PIO0_RX1,\r\n    dma_1.DREQChannel.DREQ_PIO0_RX2,\r\n    dma_1.DREQChannel.DREQ_PIO0_RX3,\r\n];\r\nconst dreqTx0 = [\r\n    dma_1.DREQChannel.DREQ_PIO0_TX0,\r\n    dma_1.DREQChannel.DREQ_PIO0_TX1,\r\n    dma_1.DREQChannel.DREQ_PIO0_TX2,\r\n    dma_1.DREQChannel.DREQ_PIO0_TX3,\r\n];\r\nconst dreqRx1 = [\r\n    dma_1.DREQChannel.DREQ_PIO1_RX0,\r\n    dma_1.DREQChannel.DREQ_PIO1_RX1,\r\n    dma_1.DREQChannel.DREQ_PIO1_RX2,\r\n    dma_1.DREQChannel.DREQ_PIO1_RX3,\r\n];\r\nconst dreqTx1 = [\r\n    dma_1.DREQChannel.DREQ_PIO1_TX0,\r\n    dma_1.DREQChannel.DREQ_PIO1_TX1,\r\n    dma_1.DREQChannel.DREQ_PIO1_TX2,\r\n    dma_1.DREQChannel.DREQ_PIO1_TX3,\r\n];\r\nclass StateMachine {\r\n    constructor(rp2040, pio, index) {\r\n        this.rp2040 = rp2040;\r\n        this.pio = pio;\r\n        this.index = index;\r\n        this.enabled = false;\r\n        // State machine registers\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.pc = 0;\r\n        this.inputShiftReg = 0;\r\n        this.inputShiftCount = 0;\r\n        this.outputShiftReg = 0;\r\n        this.outputShiftCount = 0;\r\n        this.cycles = 0;\r\n        this.execOpcode = 0;\r\n        this.execValid = false;\r\n        this.updatePC = true;\r\n        this.clockDivInt = 1;\r\n        this.clockDivFrac = 0;\r\n        this.execCtrl = 0x1f << 12;\r\n        this.shiftCtrl = 0b11 << 18;\r\n        this.pinCtrl = 0x5 << 26;\r\n        this.rxFIFO = new fifo_1.FIFO(4);\r\n        this.txFIFO = new fifo_1.FIFO(4);\r\n        this.outPinValues = 0;\r\n        this.outPinDirection = 0;\r\n        this.waiting = false;\r\n        this.waitType = WaitType.None;\r\n        this.waitIndex = 0;\r\n        this.waitPolarity = false;\r\n        this.waitDelay = -1;\r\n        this.dreqRx = this.pio.dreqRx[this.index];\r\n        this.dreqTx = this.pio.dreqTx[this.index];\r\n        this.updateDMARx();\r\n        this.updateDMATx();\r\n    }\r\n    updateDMATx() {\r\n        if (this.txFIFO.full) {\r\n            this.rp2040.dma.clearDREQ(this.dreqTx);\r\n        }\r\n        else {\r\n            this.rp2040.dma.setDREQ(this.dreqTx);\r\n        }\r\n    }\r\n    updateDMARx() {\r\n        if (this.rxFIFO.empty) {\r\n            this.rp2040.dma.clearDREQ(this.dreqRx);\r\n        }\r\n        else {\r\n            this.rp2040.dma.setDREQ(this.dreqRx);\r\n        }\r\n    }\r\n    writeFIFO(value) {\r\n        if (this.txFIFO.full) {\r\n            this.pio.fdebug |= FDEBUG_TXOVER << this.index;\r\n            return;\r\n        }\r\n        this.txFIFO.push(value);\r\n        this.updateDMATx();\r\n        this.checkWait();\r\n        if (this.txFIFO.full) {\r\n            this.pio.checkInterrupts();\r\n        }\r\n    }\r\n    readFIFO() {\r\n        if (this.rxFIFO.empty) {\r\n            this.pio.fdebug |= FDEBUG_RXUNDER << this.index;\r\n            return 0;\r\n        }\r\n        const result = this.rxFIFO.pull();\r\n        this.updateDMARx();\r\n        this.checkWait();\r\n        if (this.rxFIFO.empty) {\r\n            this.pio.checkInterrupts();\r\n        }\r\n        return result;\r\n    }\r\n    get status() {\r\n        const statusN = this.execCtrl & 0xf;\r\n        if (this.execCtrl & EXECCTRL_STATUS_SEL) {\r\n            return this.rxFIFO.itemCount < statusN ? 0xffffffff : 0;\r\n        }\r\n        else {\r\n            return this.txFIFO.itemCount < statusN ? 0xffffffff : 0;\r\n        }\r\n    }\r\n    jmpCondition(condition) {\r\n        switch (condition) {\r\n            // (no condition): Always\r\n            case 0b000:\r\n                return true;\r\n            // !X: scratch X zero\r\n            case 0b001:\r\n                return this.x === 0;\r\n            // X--: scratch X non-zero, post-decrement\r\n            case 0b010: {\r\n                const oldX = this.x;\r\n                this.x = (this.x - 1) >>> 0;\r\n                return oldX !== 0;\r\n            }\r\n            // !Y: scratch Y zero\r\n            case 0b011:\r\n                return this.y === 0;\r\n            // Y--: scratch Y non-zero, post-decrement\r\n            case 0b100: {\r\n                const oldY = this.y;\r\n                this.y = (this.y - 1) >>> 0;\r\n                return oldY !== 0;\r\n            }\r\n            // X!=Y: scratch X not equal scratch Y\r\n            case 0b101:\r\n                return this.x >>> 0 !== this.y >>> 0;\r\n            // PIN: branch on input pin\r\n            case 0b110: {\r\n                const { gpio } = this.rp2040;\r\n                const { jmpPin } = this;\r\n                return jmpPin < gpio.length ? gpio[jmpPin].inputValue : false;\r\n            }\r\n            // !OSRE: output shift register not empty\r\n            case 0b111:\r\n                return this.outputShiftCount < this.pullThreshold;\r\n        }\r\n        this.pio.error(`jmpCondition with unsupported condition: ${condition}`);\r\n        return false;\r\n    }\r\n    get inPins() {\r\n        const { gpioValues } = this.rp2040;\r\n        const { inBase } = this;\r\n        return inBase ? (gpioValues << (32 - inBase)) | (gpioValues >>> inBase) : gpioValues;\r\n    }\r\n    inSourceValue(source) {\r\n        switch (source) {\r\n            // PINS\r\n            case 0b000:\r\n                return this.inPins;\r\n            // X (scratch register X)\r\n            case 0b001:\r\n                return this.x;\r\n            // Y (scratch register Y)\r\n            case 0b010:\r\n                return this.y;\r\n            // NULL (all zeroes)\r\n            case 0b011:\r\n                return 0;\r\n            // Reserved\r\n            case 0b100:\r\n                return 0;\r\n            // Reserved for IN, STATUS for MOV\r\n            case 0b101:\r\n                return this.status;\r\n            // ISR\r\n            case 0b110:\r\n                return this.inputShiftReg;\r\n            // OSR\r\n            case 0b111:\r\n                return this.outputShiftReg;\r\n        }\r\n        this.pio.error(`inSourceValue with unsupported source: ${source}`);\r\n        return 0;\r\n    }\r\n    writeOutValue(destination, value, bitCount) {\r\n        switch (destination) {\r\n            // PINS\r\n            case 0b000:\r\n                this.setOutPins(value);\r\n                break;\r\n            // X (scratch register X)\r\n            case 0b001:\r\n                this.x = value;\r\n                break;\r\n            // Y (scratch register Y)\r\n            case 0b010:\r\n                this.y = value;\r\n                break;\r\n            // NULL (discard data)\r\n            case 0b011:\r\n                break;\r\n            // PINDIRS\r\n            case 0b100:\r\n                this.setOutPinDirs(value);\r\n                break;\r\n            // PC\r\n            case 0b101:\r\n                this.pc = value & 0x1f;\r\n                this.updatePC = false;\r\n                break;\r\n            // ISR (also sets ISR shift counter to Bit count)\r\n            case 0b110:\r\n                this.inputShiftReg = value;\r\n                this.inputShiftCount = bitCount;\r\n                break;\r\n            // EXEC (Execute OSR shift data as instruction)\r\n            case 0b111:\r\n                this.execOpcode = value;\r\n                this.execValid = true;\r\n                break;\r\n        }\r\n    }\r\n    get pushThreshold() {\r\n        const value = (this.shiftCtrl >> 20) & 0x1f;\r\n        return value ? value : 32;\r\n    }\r\n    get pullThreshold() {\r\n        const value = (this.shiftCtrl >> 25) & 0x1f;\r\n        return value ? value : 32;\r\n    }\r\n    get sidesetCount() {\r\n        return (this.pinCtrl >> 29) & 0x7;\r\n    }\r\n    get setCount() {\r\n        return (this.pinCtrl >> 26) & 0x7;\r\n    }\r\n    get outCount() {\r\n        return (this.pinCtrl >> 20) & 0x3f;\r\n    }\r\n    get inBase() {\r\n        return (this.pinCtrl >> 15) & 0x1f;\r\n    }\r\n    get sidesetBase() {\r\n        return (this.pinCtrl >> 10) & 0x1f;\r\n    }\r\n    get setBase() {\r\n        return (this.pinCtrl >> 5) & 0x1f;\r\n    }\r\n    get outBase() {\r\n        return (this.pinCtrl >> 0) & 0x1f;\r\n    }\r\n    get jmpPin() {\r\n        return (this.execCtrl >> 24) & 0x1f;\r\n    }\r\n    get wrapTop() {\r\n        return (this.execCtrl >> 12) & 0x1f;\r\n    }\r\n    get wrapBottom() {\r\n        return (this.execCtrl >> 7) & 0x1f;\r\n    }\r\n    setOutPinDirs(value) {\r\n        this.outPinDirection = value;\r\n        this.pio.pinDirectionsChanged(value, this.outBase, this.outCount);\r\n    }\r\n    setOutPins(value) {\r\n        this.outPinValues = value;\r\n        this.pio.pinValuesChanged(value, this.outBase, this.outCount);\r\n    }\r\n    outInstruction(arg) {\r\n        const bitCount = arg & 0x1f;\r\n        const destination = arg >> 5;\r\n        if (bitCount === 0) {\r\n            this.writeOutValue(destination, this.outputShiftReg, 32);\r\n            this.outputShiftCount = 32;\r\n        }\r\n        else {\r\n            if (this.shiftCtrl & SHIFTCTRL_OUT_SHIFTDIR) {\r\n                const value = this.outputShiftReg & ((1 << bitCount) - 1);\r\n                this.outputShiftReg >>>= bitCount;\r\n                this.writeOutValue(destination, value, bitCount);\r\n            }\r\n            else {\r\n                const value = this.outputShiftReg >>> (32 - bitCount);\r\n                this.outputShiftReg <<= bitCount;\r\n                this.writeOutValue(destination, value, bitCount);\r\n            }\r\n            this.outputShiftCount += bitCount;\r\n            if (this.outputShiftCount > 32) {\r\n                this.outputShiftCount = 32;\r\n            }\r\n        }\r\n    }\r\n    executeInstruction(opcode) {\r\n        const arg = opcode & 0xff;\r\n        switch (opcode >>> 13) {\r\n            /* JMP */\r\n            case 0b000:\r\n                if (this.jmpCondition(arg >> 5)) {\r\n                    this.pc = arg & 0x1f;\r\n                    this.updatePC = false;\r\n                }\r\n                break;\r\n            /* WAIT */\r\n            case 0b001: {\r\n                const polarity = !!(arg & 0x80);\r\n                const source = (arg >> 5) & 0x3;\r\n                const index = arg & 0x1f;\r\n                switch (source) {\r\n                    // GPIO:\r\n                    case 0b00:\r\n                        this.wait(WaitType.Pin, polarity, index);\r\n                        break;\r\n                    // PIN:\r\n                    case 0b01:\r\n                        this.wait(WaitType.Pin, polarity, (index + this.inBase) % 32);\r\n                        break;\r\n                    // IRQ:\r\n                    case 0b10:\r\n                        this.wait(WaitType.IRQ, polarity, irqIndex(index, this.index));\r\n                        break;\r\n                }\r\n                break;\r\n            }\r\n            /* IN */\r\n            case 0b010: {\r\n                const bitCount = arg & 0x1f;\r\n                let sourceValue = this.inSourceValue(arg >> 5);\r\n                if (bitCount == 0) {\r\n                    this.inputShiftReg = sourceValue;\r\n                    this.inputShiftCount = 32;\r\n                }\r\n                else {\r\n                    sourceValue &= (1 << bitCount) - 1;\r\n                    if (this.shiftCtrl & SHIFTCTRL_IN_SHIFTDIR) {\r\n                        this.inputShiftReg >>>= bitCount;\r\n                        this.inputShiftReg |= sourceValue << (32 - bitCount);\r\n                    }\r\n                    else {\r\n                        this.inputShiftReg <<= bitCount;\r\n                        this.inputShiftReg |= sourceValue;\r\n                    }\r\n                    this.inputShiftCount += bitCount;\r\n                    if (this.inputShiftCount > 32) {\r\n                        this.inputShiftCount = 32;\r\n                    }\r\n                }\r\n                if (this.shiftCtrl & SHIFTCTRL_AUTOPUSH && this.inputShiftCount >= this.pushThreshold) {\r\n                    if (!this.rxFIFO.full) {\r\n                        this.rxFIFO.push(this.inputShiftReg);\r\n                        this.updateDMARx();\r\n                        this.pio.checkInterrupts();\r\n                    }\r\n                    else {\r\n                        this.pio.fdebug |= FDEBUG_RXSTALL << this.index;\r\n                        this.wait(WaitType.rxFIFO, false, this.inputShiftReg);\r\n                    }\r\n                    this.inputShiftCount = 0;\r\n                    this.inputShiftReg = 0;\r\n                }\r\n                break;\r\n            }\r\n            /* OUT */\r\n            case 0b011: {\r\n                if (this.shiftCtrl & SHIFTCTRL_AUTOPULL && this.outputShiftCount >= this.pullThreshold) {\r\n                    this.outputShiftCount = 0;\r\n                    if (!this.txFIFO.empty) {\r\n                        this.outputShiftReg = this.txFIFO.pull();\r\n                        this.updateDMATx();\r\n                        this.pio.checkInterrupts();\r\n                    }\r\n                    else {\r\n                        this.pio.fdebug |= FDEBUG_TXSTALL << this.index;\r\n                        this.wait(WaitType.Out, false, arg);\r\n                    }\r\n                }\r\n                if (!this.waiting) {\r\n                    this.outInstruction(arg);\r\n                }\r\n                break;\r\n            }\r\n            /* PUSH/PULL */\r\n            case 0b100: {\r\n                const block = !!(arg & (1 << 5));\r\n                const ifFullOrEmpty = !!(arg & (1 << 6));\r\n                if (arg & 0x1f) {\r\n                    // Unknown instruction\r\n                    break;\r\n                }\r\n                if (arg & 0x80) {\r\n                    // PULL\r\n                    if (ifFullOrEmpty &&\r\n                        this.shiftCtrl & SHIFTCTRL_AUTOPULL &&\r\n                        this.outputShiftCount < this.pullThreshold) {\r\n                        break;\r\n                    }\r\n                    if (!this.txFIFO.empty) {\r\n                        this.outputShiftReg = this.txFIFO.pull();\r\n                        this.updateDMATx();\r\n                        this.pio.checkInterrupts();\r\n                    }\r\n                    else {\r\n                        this.pio.fdebug |= FDEBUG_TXSTALL << this.index;\r\n                        if (block) {\r\n                            this.wait(WaitType.txFIFO, false, 0);\r\n                        }\r\n                        else {\r\n                            this.outputShiftReg = this.x;\r\n                        }\r\n                    }\r\n                    this.outputShiftCount = 0;\r\n                }\r\n                else {\r\n                    // PUSH\r\n                    if (ifFullOrEmpty &&\r\n                        this.shiftCtrl & SHIFTCTRL_AUTOPUSH &&\r\n                        this.inputShiftCount < this.pushThreshold) {\r\n                        break;\r\n                    }\r\n                    if (!this.rxFIFO.full) {\r\n                        this.rxFIFO.push(this.inputShiftReg);\r\n                        this.updateDMARx();\r\n                        this.pio.checkInterrupts();\r\n                    }\r\n                    else {\r\n                        this.pio.fdebug |= FDEBUG_RXSTALL << this.index;\r\n                        if (block) {\r\n                            this.wait(WaitType.rxFIFO, false, this.inputShiftReg);\r\n                        }\r\n                    }\r\n                    this.inputShiftReg = 0;\r\n                    this.inputShiftCount = 0;\r\n                }\r\n                break;\r\n            }\r\n            /* MOV */\r\n            case 0b101: {\r\n                const source = arg & 0x7;\r\n                const op = (arg >> 3) & 0x3;\r\n                const destination = (arg >> 5) & 0x7;\r\n                const value = this.inSourceValue(source);\r\n                const transformedValue = this.transformMovValue(value, op) >>> 0;\r\n                this.setMovDestination(destination, transformedValue);\r\n                break;\r\n            }\r\n            /* IRQ */\r\n            case 0b110: {\r\n                if (arg & 0x80) {\r\n                    // Unknown instruction\r\n                    break;\r\n                }\r\n                const clear = !!(arg & 0x40);\r\n                const wait = !!(arg & 0x20);\r\n                const irq = irqIndex(arg & 0x1f, this.index);\r\n                if (clear) {\r\n                    this.pio.irq &= ~(1 << irq);\r\n                    this.pio.irqUpdated();\r\n                }\r\n                else {\r\n                    this.pio.irq |= 1 << irq;\r\n                    this.pio.irqUpdated();\r\n                    if (wait) {\r\n                        this.wait(WaitType.IRQ, false, irq);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            /* SET */\r\n            case 0b111: {\r\n                const data = arg & 0x1f;\r\n                const destination = arg >> 5;\r\n                switch (destination) {\r\n                    case 0b000:\r\n                        this.setSetPins(data);\r\n                        break;\r\n                    case 0b001:\r\n                        this.x = data;\r\n                        break;\r\n                    case 0b010:\r\n                        this.y = data;\r\n                        break;\r\n                    case 0b100:\r\n                        this.setSetPinDirs(data);\r\n                        break;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        this.cycles++;\r\n        const { sidesetCount, execCtrl } = this;\r\n        const delaySideset = (opcode >> 8) & 0x1f;\r\n        const sideEn = !!(execCtrl & EXECCTRL_SIDE_EN);\r\n        const delay = delaySideset & ((1 << (5 - sidesetCount)) - 1);\r\n        if (sidesetCount && (!sideEn || delaySideset & 0x10)) {\r\n            const sideset = delaySideset >> (5 - sidesetCount);\r\n            this.setSideset(sideset, sideEn ? sidesetCount - 1 : sidesetCount);\r\n        }\r\n        if (this.execValid) {\r\n            this.execValid = false;\r\n            this.executeInstruction(this.execOpcode);\r\n        }\r\n        else if (this.waiting) {\r\n            if (this.waitDelay < 0) {\r\n                this.waitDelay = delay;\r\n            }\r\n            this.checkWait();\r\n        }\r\n        else {\r\n            this.cycles += delay;\r\n        }\r\n    }\r\n    wait(type, polarity, index) {\r\n        this.waiting = true;\r\n        this.waitType = type;\r\n        this.waitPolarity = polarity;\r\n        this.waitIndex = index;\r\n        this.waitDelay = -1;\r\n        this.updatePC = false;\r\n    }\r\n    nextPC() {\r\n        if (this.pc === this.wrapTop) {\r\n            this.pc = this.wrapBottom;\r\n        }\r\n        else {\r\n            this.pc = (this.pc + 1) & 0x1f;\r\n        }\r\n    }\r\n    step() {\r\n        if (this.waiting) {\r\n            this.checkWait();\r\n            if (this.waiting) {\r\n                return;\r\n            }\r\n        }\r\n        this.updatePC = true;\r\n        this.executeInstruction(this.pio.instructions[this.pc]);\r\n        if (this.updatePC) {\r\n            this.nextPC();\r\n        }\r\n    }\r\n    setSetPinDirs(value) {\r\n        this.pio.pinDirectionsChanged(value, this.setBase, this.setCount);\r\n    }\r\n    setSetPins(value) {\r\n        this.pio.pinValuesChanged(value, this.setBase, this.setCount);\r\n    }\r\n    setSideset(value, count) {\r\n        if (this.execCtrl & EXECCTRL_SIDE_PINDIR) {\r\n            this.pio.pinDirectionsChanged(value, this.sidesetBase, count);\r\n        }\r\n        else {\r\n            this.pio.pinValuesChanged(value, this.sidesetBase, count);\r\n        }\r\n    }\r\n    transformMovValue(value, op) {\r\n        switch (op) {\r\n            case 0b00:\r\n                return value;\r\n            case 0b01:\r\n                return ~value;\r\n            case 0b10:\r\n                return bitReverse(value);\r\n            case 0b11:\r\n            default:\r\n                return value; // reserved\r\n        }\r\n    }\r\n    setMovDestination(destination, value) {\r\n        switch (destination) {\r\n            // PINS\r\n            case 0b000:\r\n                this.setOutPins(value);\r\n                break;\r\n            // X (scratch register X)\r\n            case 0b001:\r\n                this.x = value;\r\n                break;\r\n            // Y (scratch register Y)\r\n            case 0b010:\r\n                this.y = value;\r\n                break;\r\n            // reserved (discard data)\r\n            case 0b011:\r\n                break;\r\n            // EXEC\r\n            case 0b100:\r\n                this.execOpcode = value;\r\n                this.execValid = true;\r\n                break;\r\n            // PC\r\n            case 0b101:\r\n                this.pc = value & 0x1f;\r\n                this.updatePC = false;\r\n                break;\r\n            // ISR (Input shift counter is reset to 0 by this operation, i.e. empty)\r\n            case 0b110:\r\n                this.inputShiftReg = value;\r\n                this.inputShiftCount = 0;\r\n                break;\r\n            // OSR (Output shift counter is reset to 0 by this operation, i.e. full)\r\n            case 0b111:\r\n                this.outputShiftReg = value;\r\n                this.outputShiftCount = 0;\r\n                break;\r\n        }\r\n    }\r\n    readUint32(offset) {\r\n        switch (offset + SM0_CLKDIV) {\r\n            case SM0_CLKDIV:\r\n                return (this.clockDivInt << 16) | (this.clockDivFrac << 8);\r\n            case SM0_EXECCTRL:\r\n                return this.execCtrl;\r\n            case SM0_SHIFTCTRL:\r\n                return this.shiftCtrl;\r\n            case SM0_ADDR:\r\n                return this.pc;\r\n            case SM0_INSTR:\r\n                return this.pio.instructions[this.pc];\r\n            case SM0_PINCTRL:\r\n                return this.pinCtrl;\r\n        }\r\n        this.pio.error(`Read from invalid state machine register: ${offset}`);\r\n        return 0;\r\n    }\r\n    writeUint32(offset, value) {\r\n        switch (offset + SM0_CLKDIV) {\r\n            case SM0_CLKDIV:\r\n                this.clockDivFrac = (value >>> 8) & 0xff;\r\n                this.clockDivInt = value >>> 16;\r\n                break;\r\n            case SM0_EXECCTRL:\r\n                this.execCtrl = ((value & 0x7fffffff) | (this.execCtrl & 0x80000000)) >>> 0;\r\n                break;\r\n            case SM0_SHIFTCTRL:\r\n                this.shiftCtrl = value;\r\n                break;\r\n            case SM0_ADDR:\r\n                /* read-only */\r\n                break;\r\n            case SM0_INSTR:\r\n                this.executeInstruction(value & 0xffff);\r\n                if (this.waiting) {\r\n                    this.execCtrl |= EXECCTRL_EXEC_STALLED;\r\n                }\r\n                break;\r\n            case SM0_PINCTRL:\r\n                this.pinCtrl = value;\r\n                break;\r\n            default:\r\n                this.pio.error(`Write to invalid state machine register: ${offset}`);\r\n        }\r\n    }\r\n    get fifoStat() {\r\n        const result = (this.txFIFO.empty ? FSTAT_TXEMPTY : 0) |\r\n            (this.txFIFO.full ? FSTAT_TXFULL : 0) |\r\n            (this.rxFIFO.empty ? FSTAT_RXEMPTY : 0) |\r\n            (this.rxFIFO.full ? FSTAT_RXFULL : 0);\r\n        return result << this.index;\r\n    }\r\n    restart() {\r\n        this.cycles = 0;\r\n        this.inputShiftCount = 0;\r\n        this.outputShiftCount = 32;\r\n        this.inputShiftReg = 0;\r\n        this.waiting = false;\r\n        // TODO any pin write left asserted due to OUT_STICKY.\r\n    }\r\n    clkDivRestart() {\r\n        this.pio.warn('clkDivRestart not implemented');\r\n    }\r\n    checkWait() {\r\n        if (!this.waiting) {\r\n            return;\r\n        }\r\n        switch (this.waitType) {\r\n            case WaitType.IRQ: {\r\n                const irqValue = !!(this.pio.irq & (1 << this.waitIndex));\r\n                if (irqValue === this.waitPolarity) {\r\n                    this.waiting = false;\r\n                    if (irqValue) {\r\n                        this.pio.irq &= ~(1 << this.waitIndex);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case WaitType.Pin: {\r\n                if (this.waitIndex < this.rp2040.gpio.length &&\r\n                    this.rp2040.gpio[this.waitIndex].inputValue === this.waitPolarity) {\r\n                    this.waiting = false;\r\n                }\r\n                break;\r\n            }\r\n            case WaitType.rxFIFO: {\r\n                if (!this.rxFIFO.full) {\r\n                    this.rxFIFO.push(this.waitIndex);\r\n                    this.waiting = false;\r\n                    this.updateDMARx();\r\n                    this.pio.checkInterrupts();\r\n                }\r\n                break;\r\n            }\r\n            case WaitType.txFIFO: {\r\n                if (!this.txFIFO.empty) {\r\n                    this.outputShiftReg = this.txFIFO.pull();\r\n                    this.waiting = false;\r\n                    this.updateDMATx();\r\n                    this.pio.checkInterrupts();\r\n                }\r\n                break;\r\n            }\r\n            case WaitType.Out: {\r\n                if (!this.txFIFO.empty) {\r\n                    this.outputShiftReg = this.txFIFO.pull();\r\n                    this.outInstruction(this.waitIndex);\r\n                    this.waiting = false;\r\n                    this.updateDMATx();\r\n                    this.pio.checkInterrupts();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if (!this.waiting) {\r\n            this.nextPC();\r\n            this.cycles += this.waitDelay;\r\n            this.execCtrl &= ~EXECCTRL_EXEC_STALLED;\r\n        }\r\n    }\r\n}\r\nexports.StateMachine = StateMachine;\r\nclass RPPIO extends peripheral_1.BasePeripheral {\r\n    constructor(rp2040, name, firstIrq, index) {\r\n        super(rp2040, name);\r\n        this.firstIrq = firstIrq;\r\n        this.index = index;\r\n        this.instructions = new Uint32Array(32);\r\n        this.dreqRx = this.index ? dreqRx1 : dreqRx0;\r\n        this.dreqTx = this.index ? dreqTx1 : dreqTx0;\r\n        this.machines = [\r\n            new StateMachine(this.rp2040, this, 0),\r\n            new StateMachine(this.rp2040, this, 1),\r\n            new StateMachine(this.rp2040, this, 2),\r\n            new StateMachine(this.rp2040, this, 3),\r\n        ];\r\n        this.stopped = true;\r\n        this.fdebug = 0;\r\n        this.inputSyncBypass = 0;\r\n        this.irq = 0;\r\n        this.pinValues = 0;\r\n        this.pinDirections = 0;\r\n        this.oldPinValues = 0;\r\n        this.oldPinDirections = 0;\r\n        this.runTimer = null;\r\n        this.irq0IntEnable = 0;\r\n        this.irq0IntForce = 0;\r\n        this.irq1IntEnable = 0;\r\n        this.irq1IntForce = 0;\r\n    }\r\n    get intRaw() {\r\n        return (((this.irq & 0xf) << 8) |\r\n            (!this.machines[3].txFIFO.full ? 0x80 : 0) |\r\n            (!this.machines[2].txFIFO.full ? 0x40 : 0) |\r\n            (!this.machines[1].txFIFO.full ? 0x20 : 0) |\r\n            (!this.machines[0].txFIFO.full ? 0x10 : 0) |\r\n            (!this.machines[3].rxFIFO.empty ? 0x08 : 0) |\r\n            (!this.machines[2].rxFIFO.empty ? 0x04 : 0) |\r\n            (!this.machines[1].rxFIFO.empty ? 0x02 : 0) |\r\n            (!this.machines[0].rxFIFO.empty ? 0x01 : 0));\r\n    }\r\n    get irq0IntStatus() {\r\n        return (this.intRaw & this.irq0IntEnable) | this.irq0IntForce;\r\n    }\r\n    get irq1IntStatus() {\r\n        return (this.intRaw & this.irq1IntEnable) | this.irq1IntForce;\r\n    }\r\n    readUint32(offset) {\r\n        if (offset >= SM0_CLKDIV && offset <= SM0_PINCTRL) {\r\n            return this.machines[0].readUint32(offset - SM0_CLKDIV);\r\n        }\r\n        if (offset >= SM1_CLKDIV && offset <= SM1_PINCTRL) {\r\n            return this.machines[1].readUint32(offset - SM1_CLKDIV);\r\n        }\r\n        if (offset >= SM2_CLKDIV && offset <= SM2_PINCTRL) {\r\n            return this.machines[2].readUint32(offset - SM2_CLKDIV);\r\n        }\r\n        if (offset >= SM3_CLKDIV && offset <= SM3_PINCTRL) {\r\n            return this.machines[3].readUint32(offset - SM3_CLKDIV);\r\n        }\r\n        switch (offset) {\r\n            case CTRL:\r\n                return ((this.machines[0].enabled ? 1 << 0 : 0) |\r\n                    (this.machines[1].enabled ? 1 << 1 : 0) |\r\n                    (this.machines[2].enabled ? 1 << 2 : 0) |\r\n                    (this.machines[3].enabled ? 1 << 3 : 0));\r\n            case FSTAT:\r\n                return (this.machines[0].fifoStat |\r\n                    this.machines[1].fifoStat |\r\n                    this.machines[2].fifoStat |\r\n                    this.machines[3].fifoStat);\r\n            case FDEBUG:\r\n                return this.fdebug;\r\n            case FLEVEL:\r\n                return ((this.machines[0].txFIFO.itemCount & 0xf) |\r\n                    ((this.machines[0].rxFIFO.itemCount & 0xf) << 4) |\r\n                    ((this.machines[1].txFIFO.itemCount & 0xf) << 8) |\r\n                    ((this.machines[1].rxFIFO.itemCount & 0xf) << 12) |\r\n                    ((this.machines[2].txFIFO.itemCount & 0xf) << 16) |\r\n                    ((this.machines[2].rxFIFO.itemCount & 0xf) << 20) |\r\n                    ((this.machines[3].txFIFO.itemCount & 0xf) << 24) |\r\n                    ((this.machines[3].rxFIFO.itemCount & 0xf) << 28));\r\n            case RXF0:\r\n                return this.machines[0].readFIFO();\r\n            case RXF1:\r\n                return this.machines[1].readFIFO();\r\n            case RXF2:\r\n                return this.machines[2].readFIFO();\r\n            case RXF3:\r\n                return this.machines[3].readFIFO();\r\n            case IRQ:\r\n                return this.irq;\r\n            case IRQ_FORCE:\r\n                return 0;\r\n            case INPUT_SYNC_BYPASS:\r\n                return this.inputSyncBypass;\r\n            case DBG_PADOUT:\r\n                return this.pinValues;\r\n            case DBG_PADOE:\r\n                return this.pinDirections;\r\n            case DBG_CFGINFO:\r\n                return 0x200404;\r\n            case INTR:\r\n                return this.intRaw;\r\n            case IRQ0_INTE:\r\n                return this.irq0IntEnable;\r\n            case IRQ0_INTF:\r\n                return this.irq0IntForce;\r\n            case IRQ0_INTS:\r\n                return this.irq0IntStatus;\r\n            case IRQ1_INTE:\r\n                return this.irq1IntEnable;\r\n            case IRQ1_INTF:\r\n                return this.irq1IntForce;\r\n            case IRQ1_INTS:\r\n                return this.irq1IntStatus;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        if (offset >= INSTR_MEM0 && offset <= INSTR_MEM31) {\r\n            const index = (offset - INSTR_MEM0) >> 2;\r\n            this.instructions[index] = value & 0xffff;\r\n            return;\r\n        }\r\n        if (offset >= SM0_CLKDIV && offset <= SM0_PINCTRL) {\r\n            this.machines[0].writeUint32(offset - SM0_CLKDIV, value);\r\n            return;\r\n        }\r\n        if (offset >= SM1_CLKDIV && offset <= SM1_PINCTRL) {\r\n            this.machines[1].writeUint32(offset - SM1_CLKDIV, value);\r\n            return;\r\n        }\r\n        if (offset >= SM2_CLKDIV && offset <= SM2_PINCTRL) {\r\n            this.machines[2].writeUint32(offset - SM2_CLKDIV, value);\r\n            return;\r\n        }\r\n        if (offset >= SM3_CLKDIV && offset <= SM3_PINCTRL) {\r\n            this.machines[3].writeUint32(offset - SM3_CLKDIV, value);\r\n            return;\r\n        }\r\n        switch (offset) {\r\n            case CTRL: {\r\n                for (let index = 0; index < 4; index++) {\r\n                    this.machines[index].enabled = value & (1 << index) ? true : false;\r\n                    if (value & (1 << (4 + index))) {\r\n                        this.machines[index].restart();\r\n                    }\r\n                    if (value & (1 << (8 + index))) {\r\n                        this.machines[index].clkDivRestart();\r\n                    }\r\n                }\r\n                const shouldRun = value & 0xf;\r\n                if (this.stopped && shouldRun) {\r\n                    this.stopped = false;\r\n                    this.run();\r\n                }\r\n                if (!shouldRun) {\r\n                    this.stopped = true;\r\n                }\r\n                break;\r\n            }\r\n            case FDEBUG:\r\n                this.fdebug &= ~this.rawWriteValue;\r\n                break;\r\n            case TXF0:\r\n                this.machines[0].writeFIFO(value);\r\n                break;\r\n            case TXF1:\r\n                this.machines[1].writeFIFO(value);\r\n                break;\r\n            case TXF2:\r\n                this.machines[2].writeFIFO(value);\r\n                break;\r\n            case TXF3:\r\n                this.machines[3].writeFIFO(value);\r\n                break;\r\n            case IRQ:\r\n                this.irq &= ~this.rawWriteValue;\r\n                this.irqUpdated();\r\n                break;\r\n            case INPUT_SYNC_BYPASS:\r\n                this.inputSyncBypass = value;\r\n                break;\r\n            case IRQ_FORCE:\r\n                this.irq |= value;\r\n                this.irqUpdated();\r\n                break;\r\n            case IRQ0_INTE:\r\n                this.irq0IntEnable = value & 0xfff;\r\n                this.checkInterrupts();\r\n                break;\r\n            case IRQ0_INTF:\r\n                this.irq0IntForce = value & 0xfff;\r\n                this.checkInterrupts();\r\n                break;\r\n            case IRQ1_INTE:\r\n                this.irq1IntEnable = value & 0xfff;\r\n                this.checkInterrupts();\r\n                break;\r\n            case IRQ1_INTF:\r\n                this.irq1IntForce = value & 0xfff;\r\n                this.checkInterrupts();\r\n                break;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n    pinValuesChanged(value, firstPin, count) {\r\n        // TODO: wrapping after pin 31\r\n        const mask = count > 31 ? 0xffffffff : ((1 << count) - 1) << firstPin;\r\n        const newValue = ((this.pinValues & ~mask) | ((value << firstPin) & mask)) & 0x3fffffff;\r\n        this.pinValues = newValue;\r\n    }\r\n    pinDirectionsChanged(value, firstPin, count) {\r\n        // TODO: wrapping after pin 31\r\n        const mask = count > 31 ? 0xffffffff : ((1 << count) - 1) << firstPin;\r\n        const newValue = ((this.pinDirections & ~mask) | ((value << firstPin) & mask)) & 0x3fffffff;\r\n        this.pinDirections = newValue;\r\n    }\r\n    checkInterrupts() {\r\n        const { firstIrq } = this;\r\n        this.rp2040.setInterrupt(firstIrq, !!this.irq0IntStatus);\r\n        this.rp2040.setInterrupt(firstIrq + 1, !!this.irq1IntStatus);\r\n    }\r\n    irqUpdated() {\r\n        for (const machine of this.machines) {\r\n            machine.checkWait();\r\n        }\r\n        this.checkInterrupts();\r\n    }\r\n    checkChangedPins() {\r\n        const changedPins = (this.oldPinDirections ^ this.pinDirections) | (this.oldPinValues ^ this.pinValues);\r\n        if (changedPins) {\r\n            this.oldPinDirections = this.pinDirections;\r\n            this.oldPinValues = this.pinValues;\r\n            // Notify GPIO about the changed pins\r\n            const { gpio } = this.rp2040;\r\n            for (let gpioIndex = 0; gpioIndex < gpio.length; gpioIndex++) {\r\n                if (changedPins & (1 << gpioIndex)) {\r\n                    gpio[gpioIndex].checkForUpdates();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    step() {\r\n        for (const machine of this.machines) {\r\n            machine.step();\r\n        }\r\n        this.checkChangedPins();\r\n    }\r\n    run() {\r\n        for (let i = 0; i < 1000 && !this.stopped; i++) {\r\n            this.step();\r\n        }\r\n        if (!this.stopped) {\r\n            this.runTimer = setTimeout(() => this.run(), 0);\r\n        }\r\n    }\r\n    stop() {\r\n        for (const machine of this.machines) {\r\n            machine.enabled = false;\r\n        }\r\n        this.stopped = true;\r\n        if (this.runTimer) {\r\n            clearTimeout(this.runTimer);\r\n            this.runTimer = null;\r\n        }\r\n    }\r\n}\r\nexports.RPPIO = RPPIO;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPPPB = exports.SHPR3 = exports.SHPR2 = exports.VTOR = exports.ICSR = exports.CPUID = void 0;\r\nconst irq_1 = require(\"../irq\");\r\nconst peripheral_1 = require(\"./peripheral\");\r\nexports.CPUID = 0xd00;\r\nexports.ICSR = 0xd04;\r\nexports.VTOR = 0xd08;\r\nexports.SHPR2 = 0xd1c;\r\nexports.SHPR3 = 0xd20;\r\nconst SYST_CSR = 0x010; // SysTick Control and Status Register\r\nconst SYST_RVR = 0x014; // SysTick Reload Value Register\r\nconst SYST_CVR = 0x018; // SysTick Current Value Register\r\nconst SYST_CALIB = 0x01c; // SysTick Calibration Value Register\r\nconst NVIC_ISER = 0x100; // Interrupt Set-Enable Register\r\nconst NVIC_ICER = 0x180; // Interrupt Clear-Enable Register\r\nconst NVIC_ISPR = 0x200; // Interrupt Set-Pending Register\r\nconst NVIC_ICPR = 0x280; // Interrupt Clear-Pending Register\r\n// Interrupt priority registers:\r\nconst NVIC_IPR0 = 0x400;\r\nconst NVIC_IPR1 = 0x404;\r\nconst NVIC_IPR2 = 0x408;\r\nconst NVIC_IPR3 = 0x40c;\r\nconst NVIC_IPR4 = 0x410;\r\nconst NVIC_IPR5 = 0x414;\r\nconst NVIC_IPR6 = 0x418;\r\nconst NVIC_IPR7 = 0x41c;\r\n/** ICSR Bits */\r\nconst NMIPENDSET = 1 << 31;\r\nconst PENDSVSET = 1 << 28;\r\nconst PENDSVCLR = 1 << 27;\r\nconst PENDSTSET = 1 << 26;\r\nconst PENDSTCLR = 1 << 25;\r\nconst ISRPREEMPT = 1 << 23;\r\nconst ISRPENDING = 1 << 22;\r\nconst VECTPENDING_MASK = 0x1ff;\r\nconst VECTPENDING_SHIFT = 12;\r\nconst VECTACTIVE_MASK = 0x1ff;\r\nconst VECTACTIVE_SHIFT = 0;\r\n/** PPB stands for Private Periphral Bus.\r\n * These are peripherals that are part of the ARM Cortex Core, and there's one copy for each processor core.\r\n *\r\n * Included peripheral: NVIC, SysTick timer\r\n */\r\nclass RPPPB extends peripheral_1.BasePeripheral {\r\n    constructor() {\r\n        super(...arguments);\r\n        // Systick\r\n        this.systickCountFlag = false;\r\n        this.systickControl = 0;\r\n        this.systickLastZero = 0;\r\n        this.systickReload = 0;\r\n        this.systickTimer = null;\r\n    }\r\n    readUint32(offset) {\r\n        const { rp2040 } = this;\r\n        const { core } = rp2040;\r\n        switch (offset) {\r\n            case exports.CPUID:\r\n                return 0x410cc601; /* Verified against actual hardware */\r\n            case exports.ICSR: {\r\n                const pendingInterrupts = core.pendingInterrupts || core.pendingPendSV || core.pendingSystick || core.pendingSVCall;\r\n                const vectPending = core.vectPending;\r\n                return ((core.pendingNMI ? NMIPENDSET : 0) |\r\n                    (core.pendingPendSV ? PENDSVSET : 0) |\r\n                    (core.pendingSystick ? PENDSTSET : 0) |\r\n                    (pendingInterrupts ? ISRPENDING : 0) |\r\n                    (vectPending << VECTPENDING_SHIFT) |\r\n                    ((core.IPSR & VECTACTIVE_MASK) << VECTACTIVE_SHIFT));\r\n            }\r\n            case exports.VTOR:\r\n                return core.VTOR;\r\n            /* NVIC */\r\n            case NVIC_ISPR:\r\n                return core.pendingInterrupts >>> 0;\r\n            case NVIC_ICPR:\r\n                return core.pendingInterrupts >>> 0;\r\n            case NVIC_ISER:\r\n                return core.enabledInterrupts >>> 0;\r\n            case NVIC_ICER:\r\n                return core.enabledInterrupts >>> 0;\r\n            case NVIC_IPR0:\r\n            case NVIC_IPR1:\r\n            case NVIC_IPR2:\r\n            case NVIC_IPR3:\r\n            case NVIC_IPR4:\r\n            case NVIC_IPR5:\r\n            case NVIC_IPR6:\r\n            case NVIC_IPR7: {\r\n                const regIndex = (offset - NVIC_IPR0) >> 2;\r\n                let result = 0;\r\n                for (let byteIndex = 0; byteIndex < 4; byteIndex++) {\r\n                    const interruptNumber = regIndex * 4 + byteIndex;\r\n                    for (let priority = 0; priority < core.interruptPriorities.length; priority++) {\r\n                        if (core.interruptPriorities[priority] & (1 << interruptNumber)) {\r\n                            result |= priority << (8 * byteIndex + 6);\r\n                        }\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n            case exports.SHPR2:\r\n                return core.SHPR2;\r\n            case exports.SHPR3:\r\n                return core.SHPR3;\r\n            /* SysTick */\r\n            case SYST_CSR: {\r\n                const countFlagValue = this.systickCountFlag ? 1 << 16 : 0;\r\n                this.systickCountFlag = false;\r\n                return countFlagValue | (this.systickControl & 0x7);\r\n            }\r\n            case SYST_CVR: {\r\n                const delta = (rp2040.clock.micros - this.systickLastZero) % (this.systickReload + 1);\r\n                if (!delta) {\r\n                    return 0;\r\n                }\r\n                return this.systickReload - (delta - 1);\r\n            }\r\n            case SYST_RVR:\r\n                return this.systickReload;\r\n            case SYST_CALIB:\r\n                return 0x0000270f;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        const { rp2040 } = this;\r\n        const { core } = rp2040;\r\n        const hardwareInterruptMask = (1 << irq_1.MAX_HARDWARE_IRQ) - 1;\r\n        switch (offset) {\r\n            case exports.ICSR:\r\n                if (value & NMIPENDSET) {\r\n                    core.pendingNMI = true;\r\n                    core.interruptsUpdated = true;\r\n                }\r\n                if (value & PENDSVSET) {\r\n                    core.pendingPendSV = true;\r\n                    core.interruptsUpdated = true;\r\n                }\r\n                if (value & PENDSVCLR) {\r\n                    core.pendingPendSV = false;\r\n                }\r\n                if (value & PENDSTSET) {\r\n                    core.pendingSystick = true;\r\n                    core.interruptsUpdated = true;\r\n                }\r\n                if (value & PENDSTCLR) {\r\n                    core.pendingSystick = false;\r\n                }\r\n                return;\r\n            case exports.VTOR:\r\n                core.VTOR = value;\r\n                return;\r\n            /* NVIC */\r\n            case NVIC_ISPR:\r\n                core.pendingInterrupts |= value;\r\n                core.interruptsUpdated = true;\r\n                return;\r\n            case NVIC_ICPR:\r\n                core.pendingInterrupts &= ~value | hardwareInterruptMask;\r\n                return;\r\n            case NVIC_ISER:\r\n                core.enabledInterrupts |= value;\r\n                core.interruptsUpdated = true;\r\n                return;\r\n            case NVIC_ICER:\r\n                core.enabledInterrupts &= ~value;\r\n                return;\r\n            case NVIC_IPR0:\r\n            case NVIC_IPR1:\r\n            case NVIC_IPR2:\r\n            case NVIC_IPR3:\r\n            case NVIC_IPR4:\r\n            case NVIC_IPR5:\r\n            case NVIC_IPR6:\r\n            case NVIC_IPR7: {\r\n                const regIndex = (offset - NVIC_IPR0) >> 2;\r\n                for (let byteIndex = 0; byteIndex < 4; byteIndex++) {\r\n                    const interruptNumber = regIndex * 4 + byteIndex;\r\n                    const newPriority = (value >> (8 * byteIndex + 6)) & 0x3;\r\n                    for (let priority = 0; priority < core.interruptPriorities.length; priority++) {\r\n                        core.interruptPriorities[priority] &= ~(1 << interruptNumber);\r\n                    }\r\n                    core.interruptPriorities[newPriority] |= 1 << interruptNumber;\r\n                }\r\n                core.interruptsUpdated = true;\r\n                return;\r\n            }\r\n            case exports.SHPR2:\r\n                core.SHPR2 = value;\r\n                return;\r\n            case exports.SHPR3:\r\n                core.SHPR3 = value;\r\n                return;\r\n            // SysTick\r\n            case SYST_CSR:\r\n                {\r\n                    const prevInterrupt = this.systickControl === 0x7;\r\n                    const interrupt = value === 0x7;\r\n                    if (interrupt && !prevInterrupt) {\r\n                        // TODO: adjust the timer based on the current systick value\r\n                        const systickCallback = () => {\r\n                            core.pendingSystick = true;\r\n                            core.interruptsUpdated = true;\r\n                            if (core.waiting && core.checkForInterrupts()) {\r\n                                core.waiting = false;\r\n                            }\r\n                            this.systickTimer = rp2040.clock.createTimer(this.systickReload + 1, systickCallback);\r\n                        };\r\n                        this.systickTimer = rp2040.clock.createTimer(this.systickReload + 1, systickCallback);\r\n                    }\r\n                    if (prevInterrupt && interrupt) {\r\n                        if (this.systickTimer) {\r\n                            rp2040.clock.deleteTimer(this.systickTimer);\r\n                        }\r\n                        this.systickTimer = null;\r\n                    }\r\n                    this.systickControl = value & 0x7;\r\n                }\r\n                return;\r\n            case SYST_CVR:\r\n                this.warn(`SYSTICK CVR: not implemented yet, value=${value}`);\r\n                return;\r\n            case SYST_RVR:\r\n                this.systickReload = value;\r\n                return;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n}\r\nexports.RPPPB = RPPPB;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPPWM = void 0;\r\nconst irq_1 = require(\"../irq\");\r\nconst timer32_1 = require(\"../utils/timer32\");\r\nconst dma_1 = require(\"./dma\");\r\nconst peripheral_1 = require(\"./peripheral\");\r\n/** Control and status register */\r\nconst CHn_CSR = 0x00;\r\n/**\r\n * INT and FRAC form a fixed-point fractional number.\r\n * Counting rate is system clock frequency divided by this number.\r\n * Fractional division uses simple 1st-order sigma-delta.\r\n */\r\nconst CHn_DIV = 0x04;\r\n/** Direct access to the PWM counter */\r\nconst CHn_CTR = 0x08;\r\n/** Counter compare values */\r\nconst CHn_CC = 0x0c;\r\n/** Counter wrap value */\r\nconst CHn_TOP = 0x10;\r\n/**\r\n * This register aliases the CSR_EN bits for all channels.\r\n * Writing to this register allows multiple channels to be enabled\r\n * or disabled simultaneously, so they can run in perfect sync.\r\n * For each channel, there is only one physical EN register bit,\r\n * which can be accessed through here or CHx_CSR.\r\n */\r\nconst EN = 0xa0;\r\n/** Raw Interrupts */\r\nconst INTR = 0xa4;\r\n/** Interrupt Enable */\r\nconst INTE = 0xa8;\r\n/** Interrupt Force */\r\nconst INTF = 0xac;\r\n/** Interrupt status after masking & forcing */\r\nconst INTS = 0xb0;\r\nconst INT_MASK = 0xff;\r\n/* CHn_CSR bits */\r\nconst CSR_PH_ADV = 1 << 7;\r\nconst CSR_PH_RET = 1 << 6;\r\nconst CSR_DIVMODE_SHIFT = 4;\r\nconst CSR_DIVMODE_MASK = 0x3;\r\nconst CSR_B_INV = 1 << 3;\r\nconst CSR_A_INV = 1 << 2;\r\nconst CSR_PH_CORRECT = 1 << 1;\r\nconst CSR_EN = 1 << 0;\r\nvar PWMDivMode;\r\n(function (PWMDivMode) {\r\n    PWMDivMode[PWMDivMode[\"FreeRunning\"] = 0] = \"FreeRunning\";\r\n    PWMDivMode[PWMDivMode[\"BGated\"] = 1] = \"BGated\";\r\n    PWMDivMode[PWMDivMode[\"BRisingEdge\"] = 2] = \"BRisingEdge\";\r\n    PWMDivMode[PWMDivMode[\"BFallingEdge\"] = 3] = \"BFallingEdge\";\r\n})(PWMDivMode || (PWMDivMode = {}));\r\nclass PWMChannel {\r\n    constructor(pwm, clock, index) {\r\n        this.pwm = pwm;\r\n        this.clock = clock;\r\n        this.index = index;\r\n        this.timer = new timer32_1.Timer32(this.clock, this.pwm.clockFreq);\r\n        this.alarmA = new timer32_1.Timer32PeriodicAlarm(this.timer, () => {\r\n            this.setA(false);\r\n        });\r\n        this.alarmB = new timer32_1.Timer32PeriodicAlarm(this.timer, () => {\r\n            this.setB(false);\r\n        });\r\n        this.alarmBottom = new timer32_1.Timer32PeriodicAlarm(this.timer, () => this.wrap());\r\n        this.csr = 0;\r\n        this.div = 0;\r\n        this.cc = 0;\r\n        this.top = 0;\r\n        this.lastBValue = false;\r\n        this.countingUp = true;\r\n        this.ccUpdated = false;\r\n        this.topUpdated = false;\r\n        this.tickCounter = 0;\r\n        this.divMode = PWMDivMode.FreeRunning;\r\n        // GPIO pin indices: Table 525. Mapping of PWM channels to GPIO pins on RP2040\r\n        this.pinA1 = this.index * 2;\r\n        this.pinB1 = this.index * 2 + 1;\r\n        this.pinA2 = this.index < 7 ? 16 + this.index * 2 + 1 : -1;\r\n        this.pinB2 = this.index < 7 ? 16 + this.index * 2 + 1 : -1;\r\n        this.alarmA.enable = true;\r\n        this.alarmB.enable = true;\r\n        this.alarmBottom.enable = true;\r\n    }\r\n    readRegister(offset) {\r\n        switch (offset) {\r\n            case CHn_CSR:\r\n                return this.csr;\r\n            case CHn_DIV:\r\n                return this.div;\r\n            case CHn_CTR:\r\n                return this.timer.counter;\r\n            case CHn_CC:\r\n                return this.cc;\r\n            case CHn_TOP:\r\n                return this.top;\r\n        }\r\n        /* Shouldn't get here */\r\n        return 0;\r\n    }\r\n    writeRegister(offset, value) {\r\n        switch (offset) {\r\n            case CHn_CSR:\r\n                if (value & CSR_EN && !(this.csr & CSR_EN)) {\r\n                    this.updateDoubleBuffered();\r\n                }\r\n                this.csr = value & ~(CSR_PH_ADV | CSR_PH_RET);\r\n                if (this.csr & CSR_PH_ADV) {\r\n                    this.timer.advance(1);\r\n                }\r\n                if (this.csr & CSR_PH_RET) {\r\n                    this.timer.advance(-1);\r\n                }\r\n                this.divMode = (this.csr >> CSR_DIVMODE_SHIFT) & CSR_DIVMODE_MASK;\r\n                this.setBDirection(this.divMode === PWMDivMode.FreeRunning);\r\n                this.updateEnable();\r\n                this.lastBValue = this.gpioBValue;\r\n                this.timer.mode = value & CSR_PH_CORRECT ? timer32_1.TimerMode.ZigZag : timer32_1.TimerMode.Increment;\r\n                break;\r\n            case CHn_DIV: {\r\n                this.div = value & 1048575;\r\n                const intValue = (value >> 4) & 0xff;\r\n                const fracValue = value & 0xf;\r\n                this.timer.prescaler = (intValue ? intValue : 256) + fracValue / 16;\r\n                break;\r\n            }\r\n            case CHn_CTR:\r\n                this.timer.set(value & 0xffff);\r\n                break;\r\n            case CHn_CC:\r\n                this.cc = value;\r\n                this.ccUpdated = true;\r\n                break;\r\n            case CHn_TOP:\r\n                this.top = value & 0xffff;\r\n                this.topUpdated = true;\r\n                break;\r\n        }\r\n    }\r\n    reset() {\r\n        this.writeRegister(CHn_CSR, 0);\r\n        this.writeRegister(CHn_DIV, 0x01 << 4);\r\n        this.writeRegister(CHn_CTR, 0);\r\n        this.writeRegister(CHn_CC, 0);\r\n        this.writeRegister(CHn_TOP, 0xffff);\r\n        this.countingUp = true;\r\n        this.timer.enable = false;\r\n        this.timer.reset();\r\n    }\r\n    updateDoubleBuffered() {\r\n        if (this.ccUpdated) {\r\n            this.alarmB.target = this.cc >>> 16;\r\n            this.alarmA.target = this.cc & 0xffff;\r\n            this.ccUpdated = false;\r\n        }\r\n        if (this.topUpdated) {\r\n            this.timer.top = this.top;\r\n            this.topUpdated = false;\r\n        }\r\n    }\r\n    wrap() {\r\n        this.pwm.channelInterrupt(this.index);\r\n        this.updateDoubleBuffered();\r\n        if (!(this.csr & CSR_PH_CORRECT)) {\r\n            this.setA(this.alarmA.target > 0);\r\n            this.setB(this.alarmB.target > 0);\r\n        }\r\n    }\r\n    setA(value) {\r\n        if (this.csr & CSR_A_INV) {\r\n            value = !value;\r\n        }\r\n        this.pwm.gpioSet(this.pinA1, value);\r\n        if (this.pinA2 >= 0) {\r\n            this.pwm.gpioSet(this.pinA2, value);\r\n        }\r\n    }\r\n    setB(value) {\r\n        if (this.csr & CSR_B_INV) {\r\n            value = !value;\r\n        }\r\n        this.pwm.gpioSet(this.pinB1, value);\r\n        if (this.pinB2 >= 0) {\r\n            this.pwm.gpioSet(this.pinB2, value);\r\n        }\r\n    }\r\n    get gpioBValue() {\r\n        return (this.pwm.gpioRead(this.pinB1) || (this.pinB2 > 0 ? this.pwm.gpioRead(this.pinB2) : false));\r\n    }\r\n    setBDirection(value) {\r\n        this.pwm.gpioSetDir(this.pinB1, value);\r\n        if (this.pinB2 >= 0) {\r\n            this.pwm.gpioSetDir(this.pinB2, value);\r\n        }\r\n    }\r\n    gpioBChanged() {\r\n        const value = this.gpioBValue;\r\n        if (value === this.lastBValue) {\r\n            return;\r\n        }\r\n        this.lastBValue = value;\r\n        switch (this.divMode) {\r\n            case PWMDivMode.BGated:\r\n                this.updateEnable();\r\n                break;\r\n            case PWMDivMode.BRisingEdge:\r\n                if (value) {\r\n                    this.tickCounter++;\r\n                }\r\n                break;\r\n            case PWMDivMode.BFallingEdge:\r\n                if (!value) {\r\n                    this.tickCounter++;\r\n                }\r\n                break;\r\n        }\r\n        if (this.tickCounter >= this.timer.prescaler) {\r\n            this.timer.advance(1);\r\n            this.tickCounter -= this.timer.prescaler;\r\n        }\r\n    }\r\n    updateEnable() {\r\n        const { csr, divMode } = this;\r\n        const enable = !!(csr & CSR_EN);\r\n        this.timer.enable =\r\n            enable &&\r\n                (divMode === PWMDivMode.FreeRunning || (divMode === PWMDivMode.BGated && this.gpioBValue));\r\n    }\r\n    set en(value) {\r\n        if (value && !(this.csr & CSR_EN)) {\r\n            this.updateDoubleBuffered();\r\n        }\r\n        if (value) {\r\n            this.csr |= CSR_EN;\r\n        }\r\n        else {\r\n            this.csr &= ~CSR_EN;\r\n        }\r\n        this.updateEnable();\r\n    }\r\n}\r\nclass RPPWM extends peripheral_1.BasePeripheral {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.channels = [\r\n            new PWMChannel(this, this.rp2040.clock, 0),\r\n            new PWMChannel(this, this.rp2040.clock, 1),\r\n            new PWMChannel(this, this.rp2040.clock, 2),\r\n            new PWMChannel(this, this.rp2040.clock, 3),\r\n            new PWMChannel(this, this.rp2040.clock, 4),\r\n            new PWMChannel(this, this.rp2040.clock, 5),\r\n            new PWMChannel(this, this.rp2040.clock, 6),\r\n            new PWMChannel(this, this.rp2040.clock, 7),\r\n        ];\r\n        this.intRaw = 0;\r\n        this.intEnable = 0;\r\n        this.intForce = 0;\r\n        this.gpioValue = 0;\r\n        this.gpioDirection = 0;\r\n    }\r\n    get intStatus() {\r\n        return (this.intRaw & this.intEnable) | this.intForce;\r\n    }\r\n    readUint32(offset) {\r\n        if (offset < EN) {\r\n            const channel = Math.floor(offset / 0x14);\r\n            return this.channels[channel].readRegister(offset % 0x14);\r\n        }\r\n        switch (offset) {\r\n            case EN:\r\n                return ((this.channels[7].en << 7) |\r\n                    (this.channels[6].en << 6) |\r\n                    (this.channels[5].en << 5) |\r\n                    (this.channels[4].en << 4) |\r\n                    (this.channels[3].en << 3) |\r\n                    (this.channels[2].en << 2) |\r\n                    (this.channels[1].en << 1) |\r\n                    (this.channels[0].en << 0));\r\n            case INTR:\r\n                return this.intRaw;\r\n            case INTE:\r\n                return this.intEnable;\r\n            case INTF:\r\n                return this.intForce;\r\n            case INTS:\r\n                return this.intStatus;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        if (offset < EN) {\r\n            const channel = Math.floor(offset / 0x14);\r\n            return this.channels[channel].writeRegister(offset % 0x14, value);\r\n        }\r\n        switch (offset) {\r\n            case EN:\r\n                this.channels[7].en = value & (1 << 7);\r\n                this.channels[6].en = value & (1 << 6);\r\n                this.channels[5].en = value & (1 << 5);\r\n                this.channels[4].en = value & (1 << 4);\r\n                this.channels[3].en = value & (1 << 3);\r\n                this.channels[2].en = value & (1 << 2);\r\n                this.channels[1].en = value & (1 << 1);\r\n                this.channels[0].en = value & (1 << 0);\r\n                break;\r\n            case INTR:\r\n                this.intRaw &= ~(value & INT_MASK);\r\n                this.checkInterrupts();\r\n                break;\r\n            case INTE:\r\n                this.intEnable = value & INT_MASK;\r\n                this.checkInterrupts();\r\n                break;\r\n            case INTF:\r\n                this.intForce = value & INT_MASK;\r\n                this.checkInterrupts();\r\n                break;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n    get clockFreq() {\r\n        return this.rp2040.clkSys;\r\n    }\r\n    channelInterrupt(index) {\r\n        this.intRaw |= 1 << index;\r\n        this.checkInterrupts();\r\n        // We also set the DMA Request (DREQ) for the channel\r\n        this.rp2040.dma.setDREQ(dma_1.DREQChannel.DREQ_PWM_WRAP0 + index);\r\n    }\r\n    checkInterrupts() {\r\n        this.rp2040.setInterrupt(irq_1.IRQ.PWM_WRAP, !!this.intStatus);\r\n    }\r\n    gpioSet(index, value) {\r\n        const bit = 1 << index;\r\n        const newGpioValue = value ? this.gpioValue | bit : this.gpioValue & ~bit;\r\n        if (this.gpioValue != newGpioValue) {\r\n            this.gpioValue = newGpioValue;\r\n            this.rp2040.gpio[index].checkForUpdates();\r\n        }\r\n    }\r\n    gpioSetDir(index, output) {\r\n        const bit = 1 << index;\r\n        const newGpioDirection = output ? this.gpioDirection | bit : this.gpioDirection & ~bit;\r\n        if (this.gpioDirection != newGpioDirection) {\r\n            this.gpioDirection = newGpioDirection;\r\n            this.rp2040.gpio[index].checkForUpdates();\r\n        }\r\n    }\r\n    gpioRead(index) {\r\n        return this.rp2040.gpio[index].inputValue;\r\n    }\r\n    gpioOnInput(index) {\r\n        if (this.gpioDirection && 1 << index) {\r\n            return;\r\n        }\r\n        for (const channel of this.channels) {\r\n            if (channel.pinB1 === index || channel.pinB2 === index) {\r\n                channel.gpioBChanged();\r\n            }\r\n        }\r\n    }\r\n    reset() {\r\n        this.gpioDirection = 0xffffffff;\r\n        for (const channel of this.channels) {\r\n            channel.reset();\r\n        }\r\n    }\r\n}\r\nexports.RPPWM = RPPWM;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPReset = void 0;\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst RESET = 0x0; //Reset control.\r\nconst WDSEL = 0x4; //Watchdog select.\r\nconst RESET_DONE = 0x8; //Reset Done\r\nclass RPReset extends peripheral_1.BasePeripheral {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.reset = 0;\r\n        this.wdsel = 0;\r\n        this.reset_done = 0x1ffffff;\r\n    }\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case RESET:\r\n                return this.reset;\r\n            case WDSEL:\r\n                return this.wdsel;\r\n            case RESET_DONE:\r\n                return this.reset_done;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        switch (offset) {\r\n            case RESET:\r\n                this.reset = value & 0x1ffffff;\r\n                break;\r\n            case WDSEL:\r\n                this.wdsel = value & 0x1ffffff;\r\n                break;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n                break;\r\n        }\r\n    }\r\n}\r\nexports.RPReset = RPReset;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RP2040RTC = void 0;\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst RTC_SETUP0 = 0x04;\r\nconst RTC_SETUP1 = 0x08;\r\nconst RTC_CTRL = 0x0c;\r\nconst IRQ_SETUP_0 = 0x10;\r\nconst RTC_RTC1 = 0x18;\r\nconst RTC_RTC0 = 0x1c;\r\nconst RTC_ENABLE_BITS = 0x01;\r\nconst RTC_ACTIVE_BITS = 0x2;\r\nconst RTC_LOAD_BITS = 0x10;\r\nclass RP2040RTC extends peripheral_1.BasePeripheral {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.setup0 = 0;\r\n        this.setup1 = 0;\r\n        this.rtc1 = 0;\r\n        this.rtc0 = 0;\r\n        this.ctrl = 0;\r\n    }\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case RTC_SETUP0:\r\n                return this.setup0;\r\n            case RTC_SETUP1:\r\n                return this.setup1;\r\n            case RTC_CTRL:\r\n                return this.ctrl;\r\n            case IRQ_SETUP_0:\r\n                return 0;\r\n            case RTC_RTC1:\r\n                return this.rtc1;\r\n            case RTC_RTC0:\r\n                return this.rtc0;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        switch (offset) {\r\n            case RTC_SETUP0:\r\n                this.setup0 = value;\r\n                break;\r\n            case RTC_SETUP1:\r\n                this.setup1 = value;\r\n                break;\r\n            case RTC_CTRL:\r\n                // Though RTC_LOAD_BITS is type SC and should be cleared on next cycle, pico-sdk write\r\n                // RTC_LOAD_BITS & RTC_ENABLE_BITS seperatly.\r\n                // https://github.com/raspberrypi/pico-sdk/blob/master/src/rp2_common/hardware_rtc/rtc.c#L76-L80\r\n                if (value & RTC_LOAD_BITS) {\r\n                    this.ctrl |= RTC_LOAD_BITS;\r\n                }\r\n                if (value & RTC_ENABLE_BITS) {\r\n                    this.ctrl |= RTC_ENABLE_BITS;\r\n                    this.ctrl |= RTC_ACTIVE_BITS;\r\n                    if (this.ctrl & RTC_LOAD_BITS) {\r\n                        this.rtc1 = this.setup0;\r\n                        this.rtc0 = this.setup1;\r\n                        this.ctrl &= ~RTC_LOAD_BITS;\r\n                    }\r\n                }\r\n                else {\r\n                    this.ctrl &= ~RTC_ENABLE_BITS;\r\n                    this.ctrl &= ~RTC_ACTIVE_BITS;\r\n                }\r\n                break;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n}\r\nexports.RP2040RTC = RP2040RTC;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPSPI = void 0;\r\nconst fifo_1 = require(\"../utils/fifo\");\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst SSPCR0 = 0x000; // Control register 0, SSPCR0 on page 3-4\r\nconst SSPCR1 = 0x004; // Control register 1, SSPCR1 on page 3-5\r\nconst SSPDR = 0x008; // Data register, SSPDR on page 3-6\r\nconst SSPSR = 0x00c; // Status register, SSPSR on page 3-7\r\nconst SSPCPSR = 0x010; // Clock prescale register, SSPCPSR on page 3-8\r\nconst SSPIMSC = 0x014; // Interrupt mask set or clear register, SSPIMSC on page 3-9\r\nconst SSPRIS = 0x018; // Raw interrupt status register, SSPRIS on page 3-10\r\nconst SSPMIS = 0x01c; // Masked interrupt status register, SSPMIS on page 3-11\r\nconst SSPICR = 0x020; // Interrupt clear register, SSPICR on page 3-11\r\nconst SSPDMACR = 0x024; // DMA control register, SSPDMACR on page 3-12\r\nconst SSPPERIPHID0 = 0xfe0; // Peripheral identification registers, SSPPeriphID0-3 on page 3-13\r\nconst SSPPERIPHID1 = 0xfe4; // Peripheral identification registers, SSPPeriphID0-3 on page 3-13\r\nconst SSPPERIPHID2 = 0xfe8; // Peripheral identification registers, SSPPeriphID0-3 on page 3-13\r\nconst SSPPERIPHID3 = 0xfec; // Peripheral identification registers, SSPPeriphID0-3 on page 3-13\r\nconst SSPPCELLID0 = 0xff0; // PrimeCell identification registers, SSPPCellID0-3 on page 3-16\r\nconst SSPPCELLID1 = 0xff4; // PrimeCell identification registers, SSPPCellID0-3 on page 3-16\r\nconst SSPPCELLID2 = 0xff8; // PrimeCell identification registers, SSPPCellID0-3 on page 3-16\r\nconst SSPPCELLID3 = 0xffc; // PrimeCell identification registers, SSPPCellID0-3 on page 3-16\r\n// SSPCR0 bits:\r\nconst SCR_MASK = 0xff;\r\nconst SCR_SHIFT = 8;\r\nconst SPH = 1 << 7;\r\nconst SPO = 1 << 6;\r\nconst FRF_MASK = 0x3;\r\nconst FRF_SHIFT = 4;\r\nconst DSS_MASK = 0xf;\r\nconst DSS_SHIFT = 0;\r\n// SSPCR1 bits:\r\nconst SOD = 1 << 3;\r\nconst MS = 1 << 2;\r\nconst SSE = 1 << 1;\r\nconst LBM = 1 << 0;\r\n// SSPSR bits:\r\nconst BSY = 1 << 4;\r\nconst RFF = 1 << 3;\r\nconst RNE = 1 << 2;\r\nconst TNF = 1 << 1;\r\nconst TFE = 1 << 0;\r\n// SSPCPSR bits:\r\nconst CPSDVSR_MASK = 0xfe;\r\nconst CPSDVSR_SHIFT = 0;\r\n// SSPDMACR bits:\r\nconst TXDMAE = 1 << 1;\r\nconst RXDMAE = 1 << 0;\r\n// Interrupts:\r\nconst SSPTXINTR = 1 << 3;\r\nconst SSPRXINTR = 1 << 2;\r\nconst SSPRTINTR = 1 << 1;\r\nconst SSPRORINTR = 1 << 0;\r\nclass RPSPI extends peripheral_1.BasePeripheral {\r\n    constructor(rp2040, name, irq) {\r\n        super(rp2040, name);\r\n        this.irq = irq;\r\n        this.rxFIFO = new fifo_1.FIFO(8);\r\n        this.txFIFO = new fifo_1.FIFO(8);\r\n        // User provided callbacks\r\n        this.onTransmit = () => this.completeTransmit(0);\r\n        this.busy = false;\r\n        this.control0 = 0;\r\n        this.control1 = 0;\r\n        this.dmaControl = 0;\r\n        this.clockDivisor = 0;\r\n        this.intRaw = 0;\r\n        this.intEnable = 0;\r\n    }\r\n    get intStatus() {\r\n        return this.intRaw & this.intEnable;\r\n    }\r\n    get enabled() {\r\n        return !!(this.control1 & SSE);\r\n    }\r\n    /** Data size in bits: 4 to 16 bits */\r\n    get dataBits() {\r\n        return ((this.control0 >> DSS_SHIFT) & DSS_MASK) + 1;\r\n    }\r\n    get masterMode() {\r\n        return !(this.control0 & MS);\r\n    }\r\n    get spiMode() {\r\n        const cpol = this.control0 & SPO;\r\n        const cpha = this.control0 & SPH;\r\n        return cpol ? (cpha ? 2 : 3) : cpha ? 1 : 0;\r\n    }\r\n    get clockFrequency() {\r\n        if (!this.clockDivisor) {\r\n            return 0;\r\n        }\r\n        const scr = (this.control0 >> SCR_SHIFT) & SCR_MASK;\r\n        return this.rp2040.clkPeri / (this.clockDivisor * (1 + scr));\r\n    }\r\n    doTX() {\r\n        if (!this.busy && !this.txFIFO.empty) {\r\n            const value = this.txFIFO.pull();\r\n            this.busy = true;\r\n            this.onTransmit(value);\r\n            this.fifosUpdated();\r\n        }\r\n    }\r\n    completeTransmit(rxValue) {\r\n        this.busy = false;\r\n        if (!this.rxFIFO.full) {\r\n            this.rxFIFO.push(rxValue);\r\n        }\r\n        else {\r\n            this.intRaw |= SSPRORINTR;\r\n        }\r\n        this.fifosUpdated();\r\n        this.doTX();\r\n    }\r\n    checkInterrupts() {\r\n        this.rp2040.setInterrupt(this.irq, !!this.intStatus);\r\n    }\r\n    fifosUpdated() {\r\n        const prevStatus = this.intStatus;\r\n        if (this.txFIFO.itemCount <= this.txFIFO.size / 2) {\r\n            this.intRaw |= SSPTXINTR;\r\n        }\r\n        else {\r\n            this.intRaw &= ~SSPTXINTR;\r\n        }\r\n        if (this.rxFIFO.itemCount >= this.rxFIFO.size / 2) {\r\n            this.intRaw |= SSPRXINTR;\r\n        }\r\n        else {\r\n            this.intRaw &= ~SSPRXINTR;\r\n        }\r\n        if (this.intStatus !== prevStatus) {\r\n            this.checkInterrupts();\r\n        }\r\n    }\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case SSPCR0:\r\n                return this.control0;\r\n            case SSPCR1:\r\n                return this.control1;\r\n            case SSPDR:\r\n                if (!this.rxFIFO.empty) {\r\n                    const value = this.rxFIFO.pull();\r\n                    this.fifosUpdated();\r\n                    return value;\r\n                }\r\n                return 0;\r\n            case SSPSR:\r\n                return ((this.busy || !this.txFIFO.empty ? BSY : 0) |\r\n                    (this.rxFIFO.full ? RFF : 0) |\r\n                    (!this.rxFIFO.empty ? RNE : 0) |\r\n                    (!this.txFIFO.full ? TNF : 0) |\r\n                    (this.txFIFO.empty ? TFE : 0));\r\n            case SSPCPSR:\r\n                return this.clockDivisor;\r\n            case SSPIMSC:\r\n                return this.intEnable;\r\n            case SSPRIS:\r\n                return this.intRaw;\r\n            case SSPMIS:\r\n                return this.intStatus;\r\n            case SSPDMACR:\r\n                return this.dmaControl;\r\n            case SSPPERIPHID0:\r\n                return 0x22;\r\n            case SSPPERIPHID1:\r\n                return 0x10;\r\n            case SSPPERIPHID2:\r\n                return 0x34;\r\n            case SSPPERIPHID3:\r\n                return 0x00;\r\n            case SSPPCELLID0:\r\n                return 0x0d;\r\n            case SSPPCELLID1:\r\n                return 0xf0;\r\n            case SSPPCELLID2:\r\n                return 0x05;\r\n            case SSPPCELLID3:\r\n                return 0xb1;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        switch (offset) {\r\n            case SSPCR0:\r\n                this.control0 = value;\r\n                return;\r\n            case SSPCR1:\r\n                this.control1 = value;\r\n                return;\r\n            case SSPDR:\r\n                if (!this.txFIFO.full) {\r\n                    this.txFIFO.push(value);\r\n                    this.doTX();\r\n                    this.fifosUpdated();\r\n                }\r\n                return;\r\n            case SSPCPSR:\r\n                this.clockDivisor = value & CPSDVSR_MASK;\r\n                return;\r\n            case SSPIMSC:\r\n                this.intEnable = value;\r\n                this.checkInterrupts();\r\n                return;\r\n            case SSPDMACR:\r\n                this.dmaControl = value;\r\n                return;\r\n            case SSPICR:\r\n                this.intRaw &= ~(value & (SSPRTINTR | SSPRORINTR));\r\n                this.checkInterrupts();\r\n                return;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n}\r\nexports.RPSPI = RPSPI;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPSSI = void 0;\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst SSI_TXFLR = 0x00000020;\r\nconst SSI_RXFLR = 0x00000024;\r\nconst SSI_SR = 0x00000028;\r\nconst SSI_DR0 = 0x00000060;\r\nconst SSI_SR_TFNF_BITS = 0x00000002;\r\nconst SSI_SR_TFE_BITS = 0x00000004;\r\nconst SSI_SR_RFNE_BITS = 0x00000008;\r\nconst CMD_READ_STATUS = 0x05;\r\nclass RPSSI extends peripheral_1.BasePeripheral {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.dr0 = 0;\r\n    }\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case SSI_TXFLR:\r\n                return 0;\r\n            case SSI_RXFLR:\r\n                return 0;\r\n            case SSI_SR:\r\n                return SSI_SR_TFE_BITS | SSI_SR_RFNE_BITS | SSI_SR_TFNF_BITS;\r\n            case SSI_DR0:\r\n                return this.dr0;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        switch (offset) {\r\n            case SSI_DR0:\r\n                if (value === CMD_READ_STATUS) {\r\n                    this.dr0 = 0; // tell stage2 that we completed a write\r\n                }\r\n                return;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n}\r\nexports.RPSSI = RPSSI;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RP2040SysCfg = void 0;\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst PROC0_NMI_MASK = 0;\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst PROC1_NMI_MASK = 4;\r\nclass RP2040SysCfg extends peripheral_1.BasePeripheral {\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case PROC0_NMI_MASK:\r\n                return this.rp2040.core.interruptNMIMask;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        switch (offset) {\r\n            case PROC0_NMI_MASK:\r\n                this.rp2040.core.interruptNMIMask = value;\r\n                break;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n}\r\nexports.RP2040SysCfg = RP2040SysCfg;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RP2040SysInfo = void 0;\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst CHIP_ID = 0;\r\nconst PLATFORM = 0x4;\r\nconst GITREF_RP2040 = 0x40;\r\nclass RP2040SysInfo extends peripheral_1.BasePeripheral {\r\n    readUint32(offset) {\r\n        // All the values here were verified against the silicon\r\n        switch (offset) {\r\n            case CHIP_ID:\r\n                return 0x10002927;\r\n            case PLATFORM:\r\n                return 0x00000002;\r\n            case GITREF_RP2040:\r\n                return 0xe0c912e8;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n}\r\nexports.RP2040SysInfo = RP2040SysInfo;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPTBMAN = void 0;\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst PLATFORM = 0;\r\nconst ASIC = 1;\r\nclass RPTBMAN extends peripheral_1.BasePeripheral {\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case PLATFORM:\r\n                return ASIC;\r\n            default:\r\n                return super.readUint32(offset);\r\n        }\r\n    }\r\n}\r\nexports.RPTBMAN = RPTBMAN;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPTimer = void 0;\r\nconst irq_1 = require(\"../irq\");\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst TIMEHR = 0x08;\r\nconst TIMELR = 0x0c;\r\nconst TIMERAWH = 0x24;\r\nconst TIMERAWL = 0x28;\r\nconst ALARM0 = 0x10;\r\nconst ALARM1 = 0x14;\r\nconst ALARM2 = 0x18;\r\nconst ALARM3 = 0x1c;\r\nconst ARMED = 0x20;\r\nconst PAUSE = 0x30;\r\nconst INTR = 0x34;\r\nconst INTE = 0x38;\r\nconst INTF = 0x3c;\r\nconst INTS = 0x40;\r\nconst ALARM_0 = 1 << 0;\r\nconst ALARM_1 = 1 << 1;\r\nconst ALARM_2 = 1 << 2;\r\nconst ALARM_3 = 1 << 3;\r\nconst timerInterrupts = [irq_1.IRQ.TIMER_0, irq_1.IRQ.TIMER_1, irq_1.IRQ.TIMER_2, irq_1.IRQ.TIMER_3];\r\nclass RPTimerAlarm {\r\n    constructor(name, bitValue) {\r\n        this.name = name;\r\n        this.bitValue = bitValue;\r\n        this.armed = false;\r\n        this.targetMicros = 0;\r\n        this.timer = null;\r\n    }\r\n}\r\nclass RPTimer extends peripheral_1.BasePeripheral {\r\n    constructor(rp2040, name) {\r\n        super(rp2040, name);\r\n        this.latchedTimeHigh = 0;\r\n        this.alarms = [\r\n            new RPTimerAlarm('Alarm 0', ALARM_0),\r\n            new RPTimerAlarm('Alarm 1', ALARM_1),\r\n            new RPTimerAlarm('Alarm 2', ALARM_2),\r\n            new RPTimerAlarm('Alarm 3', ALARM_3),\r\n        ];\r\n        this.intRaw = 0;\r\n        this.intEnable = 0;\r\n        this.intForce = 0;\r\n        this.paused = false;\r\n        this.clock = rp2040.clock;\r\n    }\r\n    get intStatus() {\r\n        return (this.intRaw & this.intEnable) | this.intForce;\r\n    }\r\n    readUint32(offset) {\r\n        const time = this.clock.micros;\r\n        switch (offset) {\r\n            case TIMEHR:\r\n                return this.latchedTimeHigh;\r\n            case TIMELR:\r\n                this.latchedTimeHigh = Math.floor(time / Math.pow(2, 32));\r\n                return time >>> 0;\r\n            case TIMERAWH:\r\n                return Math.floor(time / Math.pow(2, 32));\r\n            case TIMERAWL:\r\n                return time >>> 0;\r\n            case ALARM0:\r\n                return this.alarms[0].targetMicros;\r\n            case ALARM1:\r\n                return this.alarms[1].targetMicros;\r\n            case ALARM2:\r\n                return this.alarms[2].targetMicros;\r\n            case ALARM3:\r\n                return this.alarms[3].targetMicros;\r\n            case PAUSE:\r\n                return this.paused ? 1 : 0;\r\n            case INTR:\r\n                return this.intRaw;\r\n            case INTE:\r\n                return this.intEnable;\r\n            case INTF:\r\n                return this.intForce;\r\n            case INTS:\r\n                return this.intStatus;\r\n            case ARMED:\r\n                return ((this.alarms[0].armed ? this.alarms[0].bitValue : 0) |\r\n                    (this.alarms[1].armed ? this.alarms[1].bitValue : 0) |\r\n                    (this.alarms[2].armed ? this.alarms[2].bitValue : 0) |\r\n                    (this.alarms[3].armed ? this.alarms[3].bitValue : 0));\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        switch (offset) {\r\n            case ALARM0:\r\n            case ALARM1:\r\n            case ALARM2:\r\n            case ALARM3: {\r\n                const alarmIndex = (offset - ALARM0) / 4;\r\n                const alarm = this.alarms[alarmIndex];\r\n                const delta = (value - this.clock.micros) >>> 0;\r\n                this.disarmAlarm(alarm);\r\n                alarm.armed = true;\r\n                alarm.targetMicros = value;\r\n                alarm.timer = this.clock.createTimer(delta, () => this.fireAlarm(alarmIndex));\r\n                break;\r\n            }\r\n            case ARMED:\r\n                for (const alarm of this.alarms) {\r\n                    if (this.rawWriteValue & alarm.bitValue) {\r\n                        this.disarmAlarm(alarm);\r\n                    }\r\n                }\r\n                break;\r\n            case PAUSE:\r\n                this.paused = !!(value & 1);\r\n                if (this.paused) {\r\n                    this.warn('Unimplemented Timer Pause');\r\n                }\r\n                // TODO actually pause the timer\r\n                break;\r\n            case INTR:\r\n                this.intRaw &= ~this.rawWriteValue;\r\n                this.checkInterrupts();\r\n                break;\r\n            case INTE:\r\n                this.intEnable = value & 0xf;\r\n                this.checkInterrupts();\r\n                break;\r\n            case INTF:\r\n                this.intForce = value & 0xf;\r\n                this.checkInterrupts();\r\n                break;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n    fireAlarm(index) {\r\n        const alarm = this.alarms[index];\r\n        this.disarmAlarm(alarm);\r\n        this.intRaw |= alarm.bitValue;\r\n        this.checkInterrupts();\r\n    }\r\n    checkInterrupts() {\r\n        const { intStatus } = this;\r\n        for (let i = 0; i < this.alarms.length; i++) {\r\n            this.rp2040.setInterrupt(timerInterrupts[i], !!(intStatus & (1 << i)));\r\n        }\r\n    }\r\n    disarmAlarm(alarm) {\r\n        if (alarm.timer) {\r\n            this.clock.deleteTimer(alarm.timer);\r\n            alarm.timer = null;\r\n        }\r\n        alarm.armed = false;\r\n    }\r\n}\r\nexports.RPTimer = RPTimer;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPUART = void 0;\r\nconst fifo_1 = require(\"../utils/fifo\");\r\nconst peripheral_1 = require(\"./peripheral\");\r\nconst UARTDR = 0x0;\r\nconst UARTFR = 0x18;\r\nconst UARTLCR_H = 0x2c;\r\nconst UARTCR = 0x30;\r\nconst UARTIMSC = 0x38;\r\nconst UARTIRIS = 0x3c;\r\nconst UARTIMIS = 0x40;\r\nconst UARTICR = 0x44;\r\n// UARTFR bits:\r\nconst TXFE = 1 << 7;\r\nconst RXFF = 1 << 6;\r\nconst RXFE = 1 << 4;\r\n// UARTLCR_H bits:\r\nconst FEN = 1 << 4;\r\n// UARTCR bits:\r\nconst RXE = 1 << 9;\r\nconst TXE = 1 << 8;\r\nconst UARTEN = 1 << 0;\r\n// Interrupt bits\r\nconst UARTRXINTR = 1 << 4;\r\nclass RPUART extends peripheral_1.BasePeripheral {\r\n    constructor(rp2040, name, irq) {\r\n        super(rp2040, name);\r\n        this.irq = irq;\r\n        this.ctrlRegister = RXE | TXE;\r\n        this.lineCtrlRegister = 0;\r\n        this.rxFIFO = new fifo_1.FIFO(32);\r\n        this.interruptMask = 0;\r\n        this.interruptStatus = 0;\r\n    }\r\n    get enabled() {\r\n        return !!(this.ctrlRegister & UARTEN);\r\n    }\r\n    get txEnabled() {\r\n        return !!(this.ctrlRegister & TXE);\r\n    }\r\n    get rxEnabled() {\r\n        return !!(this.ctrlRegister & RXE);\r\n    }\r\n    get fifosEnabled() {\r\n        return !!(this.lineCtrlRegister & FEN);\r\n    }\r\n    /**\r\n     * Number of bits per UART character\r\n     */\r\n    get wordLength() {\r\n        switch ((this.lineCtrlRegister >>> 5) & 0x3) {\r\n            case 0b00:\r\n                return 5;\r\n            case 0b01:\r\n                return 6;\r\n            case 0b10:\r\n                return 7;\r\n            case 0b11:\r\n                return 8;\r\n        }\r\n    }\r\n    get flags() {\r\n        return (this.rxFIFO.full ? RXFF : 0) | (this.rxFIFO.empty ? RXFE : 0) | TXFE;\r\n    }\r\n    checkInterrupts() {\r\n        this.rp2040.setInterrupt(this.irq, !!(this.interruptStatus & this.interruptMask));\r\n    }\r\n    feedByte(value) {\r\n        this.rxFIFO.push(value);\r\n        // TODO check if the FIFO has reached the threshold level\r\n        this.interruptStatus |= UARTRXINTR;\r\n        this.checkInterrupts();\r\n    }\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case UARTDR: {\r\n                const value = this.rxFIFO.pull();\r\n                if (!this.rxFIFO.empty) {\r\n                    this.interruptStatus |= UARTRXINTR;\r\n                    this.checkInterrupts();\r\n                }\r\n                return value;\r\n            }\r\n            case UARTFR:\r\n                return this.flags;\r\n            case UARTLCR_H:\r\n                return this.lineCtrlRegister;\r\n            case UARTCR:\r\n                return this.ctrlRegister;\r\n            case UARTIMSC:\r\n                return this.interruptMask;\r\n            case UARTIRIS:\r\n                return this.interruptStatus;\r\n            case UARTIMIS:\r\n                return this.interruptStatus & this.interruptMask;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        var _a;\r\n        switch (offset) {\r\n            case UARTDR:\r\n                (_a = this.onByte) === null || _a === void 0 ? void 0 : _a.call(this, value & 0xff);\r\n                break;\r\n            case UARTLCR_H:\r\n                this.lineCtrlRegister = value;\r\n                break;\r\n            case UARTCR:\r\n                this.ctrlRegister = value;\r\n                break;\r\n            case UARTIMSC:\r\n                this.interruptMask = value & 0x7ff;\r\n                this.checkInterrupts();\r\n                break;\r\n            case UARTICR:\r\n                this.interruptStatus &= ~this.rawWriteValue;\r\n                this.checkInterrupts();\r\n                break;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n}\r\nexports.RPUART = RPUART;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPUSBController = void 0;\r\nconst irq_1 = require(\"../irq\");\r\nconst peripheral_1 = require(\"./peripheral\");\r\n// USB DPSRAM Registers\r\nconst EP1_IN_CONTROL = 0x8;\r\nconst EP0_IN_BUFFER_CONTROL = 0x80;\r\nconst EP0_OUT_BUFFER_CONTROL = 0x84;\r\nconst EP15_OUT_BUFFER_CONTROL = 0xfc;\r\n// Endpoint Control bits\r\nconst USB_CTRL_DOUBLE_BUF = 1 << 30;\r\nconst USB_CTRL_INTERRUPT_PER_TRANSFER = 1 << 29;\r\n// Buffer Control bits\r\nconst USB_BUF_CTRL_AVAILABLE = 1 << 10;\r\nconst USB_BUF_CTRL_FULL = 1 << 15;\r\nconst USB_BUF_CTRL_LEN_MASK = 0x3ff;\r\n// Buffer1\r\nconst USB_BUF1_SHIFT = 16;\r\nconst USB_BUF1_OFFSET = 64;\r\n// USB Peripheral Register\r\nconst MAIN_CTRL = 0x40;\r\nconst SIE_STATUS = 0x50;\r\nconst BUFF_STATUS = 0x58;\r\nconst BUFF_CPU_SHOULD_HANDLE = 0x5c;\r\nconst USB_MUXING = 0x74;\r\nconst INTR = 0x8c;\r\nconst INTE = 0x90;\r\nconst INTF = 0x94;\r\nconst INTS = 0x98;\r\n// MAIN_CTRL bits\r\nconst SIM_TIMING = 1 << 31;\r\nconst HOST_NDEVICE = 1 << 1;\r\nconst CONTROLLER_EN = 1 << 0;\r\n// SIE_STATUS bits\r\nconst SIE_DATA_SEQ_ERROR = 1 << 31;\r\nconst SIE_ACK_REC = 1 << 30;\r\nconst SIE_STALL_REC = 1 << 29;\r\nconst SIE_NAK_REC = 1 << 28;\r\nconst SIE_RX_TIMEOUT = 1 << 27;\r\nconst SIE_RX_OVERFLOW = 1 << 26;\r\nconst SIE_BIT_STUFF_ERROR = 1 << 25;\r\nconst SIE_CRC_ERROR = 1 << 24;\r\nconst SIE_BUS_RESET = 1 << 19;\r\nconst SIE_TRANS_COMPLETE = 1 << 18;\r\nconst SIE_SETUP_REC = 1 << 17;\r\nconst SIE_CONNECTED = 1 << 16;\r\nconst SIE_RESUME = 1 << 11;\r\nconst SIE_VBUS_OVER_CURR = 1 << 10;\r\nconst SIE_SPEED = 1 << 9;\r\nconst SIE_SUSPENDED = 1 << 4;\r\nconst SIE_LINE_STATE_MASK = 0x3;\r\nconst SIE_LINE_STATE_SHIFT = 2;\r\nconst SIE_VBUS_DETECTED = 1 << 0;\r\n// USB_MUXING bits\r\nconst SOFTCON = 1 << 3;\r\nconst TO_DIGITAL_PAD = 1 << 2;\r\nconst TO_EXTPHY = 1 << 1;\r\nconst TO_PHY = 1 << 0;\r\n// INTR bits\r\nconst INTR_BUFF_STATUS = 1 << 4;\r\n// SIE Line states\r\nvar SIELineState;\r\n(function (SIELineState) {\r\n    SIELineState[SIELineState[\"SE0\"] = 0] = \"SE0\";\r\n    SIELineState[SIELineState[\"J\"] = 1] = \"J\";\r\n    SIELineState[SIELineState[\"K\"] = 2] = \"K\";\r\n    SIELineState[SIELineState[\"SE1\"] = 3] = \"SE1\";\r\n})(SIELineState || (SIELineState = {}));\r\nconst SIE_WRITECLEAR_MASK = SIE_DATA_SEQ_ERROR |\r\n    SIE_ACK_REC |\r\n    SIE_STALL_REC |\r\n    SIE_NAK_REC |\r\n    SIE_RX_TIMEOUT |\r\n    SIE_RX_OVERFLOW |\r\n    SIE_BIT_STUFF_ERROR |\r\n    SIE_CONNECTED |\r\n    SIE_CRC_ERROR |\r\n    SIE_BUS_RESET |\r\n    SIE_TRANS_COMPLETE |\r\n    SIE_SETUP_REC |\r\n    SIE_RESUME;\r\nclass RPUSBController extends peripheral_1.BasePeripheral {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.mainCtrl = 0;\r\n        this.intRaw = 0;\r\n        this.intEnable = 0;\r\n        this.intForce = 0;\r\n        this.sieStatus = 0;\r\n        this.buffStatus = 0;\r\n        this.readDelayMicroseconds = 1;\r\n        this.writeDelayMicroseconds = 1;\r\n    }\r\n    get intStatus() {\r\n        return (this.intRaw & this.intEnable) | this.intForce;\r\n    }\r\n    readUint32(offset) {\r\n        switch (offset) {\r\n            case MAIN_CTRL:\r\n                return this.mainCtrl;\r\n            case SIE_STATUS:\r\n                return this.sieStatus;\r\n            case BUFF_STATUS:\r\n                return this.buffStatus;\r\n            case BUFF_CPU_SHOULD_HANDLE:\r\n                return 0;\r\n            case INTR:\r\n                return this.intRaw;\r\n            case INTE:\r\n                return this.intEnable;\r\n            case INTF:\r\n                return this.intForce;\r\n            case INTS:\r\n                return this.intStatus;\r\n        }\r\n        return super.readUint32(offset);\r\n    }\r\n    writeUint32(offset, value) {\r\n        var _a, _b;\r\n        switch (offset) {\r\n            case MAIN_CTRL:\r\n                this.mainCtrl = value & (SIM_TIMING | CONTROLLER_EN | HOST_NDEVICE);\r\n                if (value & CONTROLLER_EN && !(value & HOST_NDEVICE)) {\r\n                    (_a = this.onUSBEnabled) === null || _a === void 0 ? void 0 : _a.call(this);\r\n                }\r\n                break;\r\n            case BUFF_STATUS:\r\n                this.buffStatus &= ~this.rawWriteValue;\r\n                this.buffStatusUpdated();\r\n                break;\r\n            case USB_MUXING:\r\n                // Workaround for busy wait in hw_enumeration_fix_force_ls_j() / hw_enumeration_fix_finish():\r\n                if (value & TO_DIGITAL_PAD && !(value & TO_PHY)) {\r\n                    this.sieStatus |= SIE_CONNECTED;\r\n                }\r\n                break;\r\n            case SIE_STATUS:\r\n                this.sieStatus &= ~(this.rawWriteValue & SIE_WRITECLEAR_MASK);\r\n                if (this.rawWriteValue & SIE_BUS_RESET) {\r\n                    (_b = this.onResetReceived) === null || _b === void 0 ? void 0 : _b.call(this);\r\n                    this.sieStatus &= ~(SIE_LINE_STATE_MASK << SIE_LINE_STATE_SHIFT);\r\n                    this.sieStatus |= (SIELineState.J << SIE_LINE_STATE_SHIFT) | SIE_CONNECTED;\r\n                }\r\n                this.sieStatusUpdated();\r\n                break;\r\n            case INTE:\r\n                this.intEnable = value & 0xfffff;\r\n                this.checkInterrupts();\r\n                break;\r\n            case INTF:\r\n                this.intForce = value & 0xfffff;\r\n                this.checkInterrupts();\r\n                break;\r\n            default:\r\n                super.writeUint32(offset, value);\r\n        }\r\n    }\r\n    readEndpointControlReg(endpoint, out) {\r\n        const controlRegOffset = EP1_IN_CONTROL + 8 * (endpoint - 1) + (out ? 4 : 0);\r\n        return this.rp2040.usbDPRAMView.getUint32(controlRegOffset, true);\r\n    }\r\n    getEndpointBufferOffset(endpoint, out) {\r\n        if (endpoint === 0) {\r\n            return 0x100;\r\n        }\r\n        return this.readEndpointControlReg(endpoint, out) & 0xffc0;\r\n    }\r\n    DPRAMUpdated(offset, value) {\r\n        var _a, _b, _c, _d;\r\n        if (value & USB_BUF_CTRL_AVAILABLE &&\r\n            offset >= EP0_IN_BUFFER_CONTROL &&\r\n            offset <= EP15_OUT_BUFFER_CONTROL) {\r\n            const endpoint = (offset - EP0_IN_BUFFER_CONTROL) >> 3;\r\n            const bufferOut = offset & 4 ? true : false;\r\n            let doubleBuffer = false;\r\n            let interrupt = true;\r\n            if (endpoint != 0) {\r\n                const control = this.readEndpointControlReg(endpoint, bufferOut);\r\n                doubleBuffer = !!(control & USB_CTRL_DOUBLE_BUF);\r\n                interrupt = !!(control & USB_CTRL_INTERRUPT_PER_TRANSFER);\r\n            }\r\n            const bufferLength = value & USB_BUF_CTRL_LEN_MASK;\r\n            const bufferOffset = this.getEndpointBufferOffset(endpoint, bufferOut);\r\n            this.debug(`Start USB transfer, endPoint=${endpoint}, direction=${bufferOut ? 'out' : 'in'} buffer=${bufferOffset.toString(16)} length=${bufferLength}`);\r\n            value &= ~USB_BUF_CTRL_AVAILABLE;\r\n            this.rp2040.usbDPRAMView.setUint32(offset, value, true);\r\n            if (bufferOut) {\r\n                (_a = this.onEndpointRead) === null || _a === void 0 ? void 0 : _a.call(this, endpoint, bufferLength);\r\n            }\r\n            else {\r\n                value &= ~USB_BUF_CTRL_FULL;\r\n                this.rp2040.usbDPRAMView.setUint32(offset, value, true);\r\n                const buffer = this.rp2040.usbDPRAM.slice(bufferOffset, bufferOffset + bufferLength);\r\n                if (interrupt || !doubleBuffer) {\r\n                    this.indicateBufferReady(endpoint, false);\r\n                }\r\n                if (this.writeDelayMicroseconds) {\r\n                    this.rp2040.clock.createTimer(this.writeDelayMicroseconds, () => {\r\n                        var _a;\r\n                        (_a = this.onEndpointWrite) === null || _a === void 0 ? void 0 : _a.call(this, endpoint, buffer);\r\n                    });\r\n                }\r\n                else {\r\n                    (_b = this.onEndpointWrite) === null || _b === void 0 ? void 0 : _b.call(this, endpoint, buffer);\r\n                }\r\n            }\r\n            if (doubleBuffer && (value >> USB_BUF1_SHIFT) & USB_BUF_CTRL_AVAILABLE) {\r\n                const bufferLength = (value >> USB_BUF1_SHIFT) & USB_BUF_CTRL_LEN_MASK;\r\n                const bufferOffset = this.getEndpointBufferOffset(endpoint, bufferOut) + USB_BUF1_OFFSET;\r\n                this.debug(`Start USB transfer, endPoint=${endpoint}, direction=${bufferOut ? 'out' : 'in'} buffer=${bufferOffset.toString(16)} length=${bufferLength}`);\r\n                value &= ~(USB_BUF_CTRL_AVAILABLE << USB_BUF1_SHIFT);\r\n                this.rp2040.usbDPRAMView.setUint32(offset, value, true);\r\n                if (bufferOut) {\r\n                    (_c = this.onEndpointRead) === null || _c === void 0 ? void 0 : _c.call(this, endpoint, bufferLength);\r\n                }\r\n                else {\r\n                    value &= ~(USB_BUF_CTRL_FULL << USB_BUF1_SHIFT);\r\n                    this.rp2040.usbDPRAMView.setUint32(offset, value, true);\r\n                    const buffer = this.rp2040.usbDPRAM.slice(bufferOffset, bufferOffset + bufferLength);\r\n                    this.indicateBufferReady(endpoint, false);\r\n                    if (this.writeDelayMicroseconds) {\r\n                        this.rp2040.clock.createTimer(this.writeDelayMicroseconds, () => {\r\n                            var _a;\r\n                            (_a = this.onEndpointWrite) === null || _a === void 0 ? void 0 : _a.call(this, endpoint, buffer);\r\n                        });\r\n                    }\r\n                    else {\r\n                        (_d = this.onEndpointWrite) === null || _d === void 0 ? void 0 : _d.call(this, endpoint, buffer);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    endpointReadDone(endpoint, buffer, delay = this.readDelayMicroseconds) {\r\n        if (delay) {\r\n            this.rp2040.clock.createTimer(delay, () => {\r\n                this.finishRead(endpoint, buffer);\r\n            });\r\n        }\r\n        else {\r\n            this.finishRead(endpoint, buffer);\r\n        }\r\n    }\r\n    finishRead(endpoint, buffer) {\r\n        const bufferOffset = this.getEndpointBufferOffset(endpoint, true);\r\n        const bufControlReg = EP0_OUT_BUFFER_CONTROL + endpoint * 8;\r\n        let bufControl = this.rp2040.usbDPRAMView.getUint32(bufControlReg, true);\r\n        const requestedLength = bufControl & USB_BUF_CTRL_LEN_MASK;\r\n        const newLength = Math.min(buffer.length, requestedLength);\r\n        bufControl |= USB_BUF_CTRL_FULL;\r\n        bufControl = (bufControl & ~USB_BUF_CTRL_LEN_MASK) | (newLength & USB_BUF_CTRL_LEN_MASK);\r\n        this.rp2040.usbDPRAMView.setUint32(bufControlReg, bufControl, true);\r\n        this.rp2040.usbDPRAM.set(buffer.subarray(0, newLength), bufferOffset);\r\n        this.indicateBufferReady(endpoint, true);\r\n    }\r\n    checkInterrupts() {\r\n        const { intStatus } = this;\r\n        this.rp2040.setInterrupt(irq_1.IRQ.USBCTRL, !!intStatus);\r\n    }\r\n    resetDevice() {\r\n        this.sieStatus |= SIE_BUS_RESET;\r\n        this.sieStatusUpdated();\r\n    }\r\n    sendSetupPacket(setupPacket) {\r\n        this.rp2040.usbDPRAM.set(setupPacket);\r\n        this.sieStatus |= SIE_SETUP_REC;\r\n        this.sieStatusUpdated();\r\n    }\r\n    indicateBufferReady(endpoint, out) {\r\n        this.buffStatus |= 1 << (endpoint * 2 + (out ? 1 : 0));\r\n        this.buffStatusUpdated();\r\n    }\r\n    buffStatusUpdated() {\r\n        if (this.buffStatus) {\r\n            this.intRaw |= INTR_BUFF_STATUS;\r\n        }\r\n        else {\r\n            this.intRaw &= ~INTR_BUFF_STATUS;\r\n        }\r\n        this.checkInterrupts();\r\n    }\r\n    sieStatusUpdated() {\r\n        const intRegisterMap = [\r\n            [SIE_SETUP_REC, 1 << 16],\r\n            [SIE_RESUME, 1 << 15],\r\n            [SIE_SUSPENDED, 1 << 14],\r\n            [SIE_CONNECTED, 1 << 13],\r\n            [SIE_BUS_RESET, 1 << 12],\r\n            [SIE_VBUS_DETECTED, 1 << 11],\r\n            [SIE_STALL_REC, 1 << 10],\r\n            [SIE_CRC_ERROR, 1 << 9],\r\n            [SIE_BIT_STUFF_ERROR, 1 << 8],\r\n            [SIE_RX_OVERFLOW, 1 << 7],\r\n            [SIE_RX_TIMEOUT, 1 << 6],\r\n            [SIE_DATA_SEQ_ERROR, 1 << 5],\r\n        ];\r\n        for (const [sieBit, intRawBit] of intRegisterMap) {\r\n            if (this.sieStatus & sieBit) {\r\n                this.intRaw |= intRawBit;\r\n            }\r\n            else {\r\n                this.intRaw &= ~intRawBit;\r\n            }\r\n        }\r\n        this.checkInterrupts();\r\n    }\r\n}\r\nexports.RPUSBController = RPUSBController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RP2040 = exports.SIO_START_ADDRESS = exports.DPRAM_START_ADDRESS = exports.APB_START_ADDRESS = exports.RAM_START_ADDRESS = exports.FLASH_START_ADDRESS = void 0;\r\nconst realtime_clock_1 = require(\"./clock/realtime-clock\");\r\nconst cortex_m0_core_1 = require(\"./cortex-m0-core\");\r\nconst gpio_pin_1 = require(\"./gpio-pin\");\r\nconst irq_1 = require(\"./irq\");\r\nconst adc_1 = require(\"./peripherals/adc\");\r\nconst clocks_1 = require(\"./peripherals/clocks\");\r\nconst dma_1 = require(\"./peripherals/dma\");\r\nconst i2c_1 = require(\"./peripherals/i2c\");\r\nconst io_1 = require(\"./peripherals/io\");\r\nconst pads_1 = require(\"./peripherals/pads\");\r\nconst peripheral_1 = require(\"./peripherals/peripheral\");\r\nconst pio_1 = require(\"./peripherals/pio\");\r\nconst ppb_1 = require(\"./peripherals/ppb\");\r\nconst pwm_1 = require(\"./peripherals/pwm\");\r\nconst reset_1 = require(\"./peripherals/reset\");\r\nconst rtc_1 = require(\"./peripherals/rtc\");\r\nconst spi_1 = require(\"./peripherals/spi\");\r\nconst ssi_1 = require(\"./peripherals/ssi\");\r\nconst syscfg_1 = require(\"./peripherals/syscfg\");\r\nconst sysinfo_1 = require(\"./peripherals/sysinfo\");\r\nconst timer_1 = require(\"./peripherals/timer\");\r\nconst uart_1 = require(\"./peripherals/uart\");\r\nconst usb_1 = require(\"./peripherals/usb\");\r\nconst sio_1 = require(\"./sio\");\r\nconst logging_1 = require(\"./utils/logging\");\r\nconst tbman_1 = require(\"./peripherals/tbman\");\r\nexports.FLASH_START_ADDRESS = 0x10000000;\r\nexports.RAM_START_ADDRESS = 0x20000000;\r\nexports.APB_START_ADDRESS = 0x40000000;\r\nexports.DPRAM_START_ADDRESS = 0x50100000;\r\nexports.SIO_START_ADDRESS = 0xd0000000;\r\nconst LOG_NAME = 'RP2040';\r\nconst KB = 1024;\r\nconst MB = 1024 * KB;\r\nconst MHz = 1000000;\r\nclass RP2040 {\r\n    constructor(clock = new realtime_clock_1.RealtimeClock()) {\r\n        this.clock = clock;\r\n        this.bootrom = new Uint32Array(4 * KB);\r\n        this.sram = new Uint8Array(264 * KB);\r\n        this.sramView = new DataView(this.sram.buffer);\r\n        this.flash = new Uint8Array(16 * MB);\r\n        this.flash16 = new Uint16Array(this.flash.buffer);\r\n        this.flashView = new DataView(this.flash.buffer);\r\n        this.usbDPRAM = new Uint8Array(4 * KB);\r\n        this.usbDPRAMView = new DataView(this.usbDPRAM.buffer);\r\n        this.core = new cortex_m0_core_1.CortexM0Core(this);\r\n        /* Clocks */\r\n        this.clkSys = 125 * MHz;\r\n        this.clkPeri = 125 * MHz;\r\n        this.ppb = new ppb_1.RPPPB(this, 'PPB');\r\n        this.sio = new sio_1.RPSIO(this);\r\n        this.uart = [new uart_1.RPUART(this, 'UART0', irq_1.IRQ.UART0), new uart_1.RPUART(this, 'UART1', irq_1.IRQ.UART1)];\r\n        this.i2c = [new i2c_1.RPI2C(this, 'I2C0', irq_1.IRQ.I2C0), new i2c_1.RPI2C(this, 'I2C1', irq_1.IRQ.I2C1)];\r\n        this.spi = [new spi_1.RPSPI(this, 'SPI0', irq_1.IRQ.SPI0), new spi_1.RPSPI(this, 'SPI1', irq_1.IRQ.SPI1)];\r\n        this.pwm = new pwm_1.RPPWM(this, 'PWM_BASE');\r\n        this.adc = new adc_1.RPADC(this, 'ADC');\r\n        this.gpio = [\r\n            new gpio_pin_1.GPIOPin(this, 0),\r\n            new gpio_pin_1.GPIOPin(this, 1),\r\n            new gpio_pin_1.GPIOPin(this, 2),\r\n            new gpio_pin_1.GPIOPin(this, 3),\r\n            new gpio_pin_1.GPIOPin(this, 4),\r\n            new gpio_pin_1.GPIOPin(this, 5),\r\n            new gpio_pin_1.GPIOPin(this, 6),\r\n            new gpio_pin_1.GPIOPin(this, 7),\r\n            new gpio_pin_1.GPIOPin(this, 8),\r\n            new gpio_pin_1.GPIOPin(this, 9),\r\n            new gpio_pin_1.GPIOPin(this, 10),\r\n            new gpio_pin_1.GPIOPin(this, 11),\r\n            new gpio_pin_1.GPIOPin(this, 12),\r\n            new gpio_pin_1.GPIOPin(this, 13),\r\n            new gpio_pin_1.GPIOPin(this, 14),\r\n            new gpio_pin_1.GPIOPin(this, 15),\r\n            new gpio_pin_1.GPIOPin(this, 16),\r\n            new gpio_pin_1.GPIOPin(this, 17),\r\n            new gpio_pin_1.GPIOPin(this, 18),\r\n            new gpio_pin_1.GPIOPin(this, 19),\r\n            new gpio_pin_1.GPIOPin(this, 20),\r\n            new gpio_pin_1.GPIOPin(this, 21),\r\n            new gpio_pin_1.GPIOPin(this, 22),\r\n            new gpio_pin_1.GPIOPin(this, 23),\r\n            new gpio_pin_1.GPIOPin(this, 24),\r\n            new gpio_pin_1.GPIOPin(this, 25),\r\n            new gpio_pin_1.GPIOPin(this, 26),\r\n            new gpio_pin_1.GPIOPin(this, 27),\r\n            new gpio_pin_1.GPIOPin(this, 28),\r\n            new gpio_pin_1.GPIOPin(this, 29),\r\n        ];\r\n        this.qspi = [\r\n            new gpio_pin_1.GPIOPin(this, 0, 'SCLK'),\r\n            new gpio_pin_1.GPIOPin(this, 1, 'SS'),\r\n            new gpio_pin_1.GPIOPin(this, 2, 'SD0'),\r\n            new gpio_pin_1.GPIOPin(this, 3, 'SD1'),\r\n            new gpio_pin_1.GPIOPin(this, 4, 'SD2'),\r\n            new gpio_pin_1.GPIOPin(this, 5, 'SD3'),\r\n        ];\r\n        this.dma = new dma_1.RPDMA(this, 'DMA');\r\n        this.pio = [\r\n            new pio_1.RPPIO(this, 'PIO0', irq_1.IRQ.PIO0_IRQ0, 0),\r\n            new pio_1.RPPIO(this, 'PIO1', irq_1.IRQ.PIO1_IRQ0, 1),\r\n        ];\r\n        this.usbCtrl = new usb_1.RPUSBController(this, 'USB');\r\n        this.stopped = true;\r\n        this.logger = new logging_1.ConsoleLogger(logging_1.LogLevel.Debug, true);\r\n        this.executeTimer = null;\r\n        this.peripherals = {\r\n            0x18000: new ssi_1.RPSSI(this, 'SSI'),\r\n            0x40000: new sysinfo_1.RP2040SysInfo(this, 'SYSINFO_BASE'),\r\n            0x40004: new syscfg_1.RP2040SysCfg(this, 'SYSCFG'),\r\n            0x40008: new clocks_1.RPClocks(this, 'CLOCKS_BASE'),\r\n            0x4000c: new reset_1.RPReset(this, 'RESETS_BASE'),\r\n            0x40010: new peripheral_1.UnimplementedPeripheral(this, 'PSM_BASE'),\r\n            0x40014: new io_1.RPIO(this, 'IO_BANK0_BASE'),\r\n            0x40018: new peripheral_1.UnimplementedPeripheral(this, 'IO_QSPI_BASE'),\r\n            0x4001c: new pads_1.RPPADS(this, 'PADS_BANK0_BASE', 'bank0'),\r\n            0x40020: new pads_1.RPPADS(this, 'PADS_QSPI_BASE', 'qspi'),\r\n            0x40024: new peripheral_1.UnimplementedPeripheral(this, 'XOSC_BASE'),\r\n            0x40028: new peripheral_1.UnimplementedPeripheral(this, 'PLL_SYS_BASE'),\r\n            0x4002c: new peripheral_1.UnimplementedPeripheral(this, 'PLL_USB_BASE'),\r\n            0x40030: new peripheral_1.UnimplementedPeripheral(this, 'BUSCTRL_BASE'),\r\n            0x40034: this.uart[0],\r\n            0x40038: this.uart[1],\r\n            0x4003c: this.spi[0],\r\n            0x40040: this.spi[1],\r\n            0x40044: this.i2c[0],\r\n            0x40048: this.i2c[1],\r\n            0x4004c: this.adc,\r\n            0x40050: this.pwm,\r\n            0x40054: new timer_1.RPTimer(this, 'TIMER_BASE'),\r\n            0x40058: new peripheral_1.UnimplementedPeripheral(this, 'WATCHDOG_BASE'),\r\n            0x4005c: new rtc_1.RP2040RTC(this, 'RTC_BASE'),\r\n            0x40060: new peripheral_1.UnimplementedPeripheral(this, 'ROSC_BASE'),\r\n            0x40064: new peripheral_1.UnimplementedPeripheral(this, 'VREG_AND_CHIP_RESET_BASE'),\r\n            0x4006c: new tbman_1.RPTBMAN(this, 'TBMAN_BASE'),\r\n            0x50000: this.dma,\r\n            0x50110: this.usbCtrl,\r\n            0x50200: this.pio[0],\r\n            0x50300: this.pio[1],\r\n        };\r\n        // Debugging\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        this.onBreak = (code) => {\r\n            // TODO: raise HardFault exception\r\n            // console.error('Breakpoint!', code);\r\n            this.stopped = true;\r\n        };\r\n        this.reset();\r\n    }\r\n    loadBootrom(bootromData) {\r\n        this.bootrom.set(bootromData);\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.core.reset();\r\n        this.pwm.reset();\r\n        this.flash.fill(0xff);\r\n    }\r\n    readUint32(address) {\r\n        address = address >>> 0; // round to 32-bits, unsigned\r\n        if (address & 0x3) {\r\n            this.logger.error(LOG_NAME, `read from address ${address.toString(16)}, which is not 32 bit aligned`);\r\n        }\r\n        const { bootrom } = this;\r\n        if (address < bootrom.length * 4) {\r\n            return bootrom[address / 4];\r\n        }\r\n        else if (address >= exports.FLASH_START_ADDRESS &&\r\n            address < exports.FLASH_START_ADDRESS + this.flash.length) {\r\n            return this.flashView.getUint32(address - exports.FLASH_START_ADDRESS, true);\r\n        }\r\n        else if (address >= exports.RAM_START_ADDRESS && address < exports.RAM_START_ADDRESS + this.sram.length) {\r\n            return this.sramView.getUint32(address - exports.RAM_START_ADDRESS, true);\r\n        }\r\n        else if (address >= exports.DPRAM_START_ADDRESS &&\r\n            address < exports.DPRAM_START_ADDRESS + this.usbDPRAM.length) {\r\n            return this.usbDPRAMView.getUint32(address - exports.DPRAM_START_ADDRESS, true);\r\n        }\r\n        else if (address >>> 12 === 0xe000e) {\r\n            return this.ppb.readUint32(address & 0xfff);\r\n        }\r\n        else if (address >= exports.SIO_START_ADDRESS && address < exports.SIO_START_ADDRESS + 0x10000000) {\r\n            return this.sio.readUint32(address - exports.SIO_START_ADDRESS);\r\n        }\r\n        const peripheral = this.findPeripheral(address);\r\n        if (peripheral) {\r\n            return peripheral.readUint32(address & 0x3fff);\r\n        }\r\n        this.logger.warn(LOG_NAME, `Read from invalid memory address: ${address.toString(16)}`);\r\n        return 0xffffffff;\r\n    }\r\n    findPeripheral(address) {\r\n        return this.peripherals[(address >>> 14) << 2];\r\n    }\r\n    /** We assume the address is 16-bit aligned */\r\n    readUint16(address) {\r\n        if (address >= exports.FLASH_START_ADDRESS && address < exports.FLASH_START_ADDRESS + this.flash.length) {\r\n            return this.flashView.getUint16(address - exports.FLASH_START_ADDRESS, true);\r\n        }\r\n        else if (address >= exports.RAM_START_ADDRESS && address < exports.RAM_START_ADDRESS + this.sram.length) {\r\n            return this.sramView.getUint16(address - exports.RAM_START_ADDRESS, true);\r\n        }\r\n        const value = this.readUint32(address & 0xfffffffc);\r\n        return address & 0x2 ? (value & 0xffff0000) >>> 16 : value & 0xffff;\r\n    }\r\n    readUint8(address) {\r\n        if (address >= exports.FLASH_START_ADDRESS && address < exports.FLASH_START_ADDRESS + this.flash.length) {\r\n            return this.flash[address - exports.FLASH_START_ADDRESS];\r\n        }\r\n        else if (address >= exports.RAM_START_ADDRESS && address < exports.RAM_START_ADDRESS + this.sram.length) {\r\n            return this.sram[address - exports.RAM_START_ADDRESS];\r\n        }\r\n        const value = this.readUint16(address & 0xfffffffe);\r\n        return (address & 0x1 ? (value & 0xff00) >>> 8 : value & 0xff) >>> 0;\r\n    }\r\n    writeUint32(address, value) {\r\n        address = address >>> 0;\r\n        const { bootrom } = this;\r\n        const peripheral = this.findPeripheral(address);\r\n        if (peripheral) {\r\n            const atomicType = (address & 0x3000) >> 12;\r\n            const offset = address & 0xfff;\r\n            peripheral.writeUint32Atomic(offset, value, atomicType);\r\n        }\r\n        else if (address < bootrom.length * 4) {\r\n            bootrom[address / 4] = value;\r\n        }\r\n        else if (address >= exports.FLASH_START_ADDRESS &&\r\n            address < exports.FLASH_START_ADDRESS + this.flash.length) {\r\n            this.flashView.setUint32(address - exports.FLASH_START_ADDRESS, value, true);\r\n        }\r\n        else if (address >= exports.RAM_START_ADDRESS && address < exports.RAM_START_ADDRESS + this.sram.length) {\r\n            this.sramView.setUint32(address - exports.RAM_START_ADDRESS, value, true);\r\n        }\r\n        else if (address >= exports.DPRAM_START_ADDRESS &&\r\n            address < exports.DPRAM_START_ADDRESS + this.usbDPRAM.length) {\r\n            const offset = address - exports.DPRAM_START_ADDRESS;\r\n            this.usbDPRAMView.setUint32(offset, value, true);\r\n            this.usbCtrl.DPRAMUpdated(offset, value);\r\n        }\r\n        else if (address >= exports.SIO_START_ADDRESS && address < exports.SIO_START_ADDRESS + 0x10000000) {\r\n            this.sio.writeUint32(address - exports.SIO_START_ADDRESS, value);\r\n        }\r\n        else if (address >>> 12 === 0xe000e) {\r\n            this.ppb.writeUint32(address & 0xfff, value);\r\n        }\r\n        else {\r\n            this.logger.warn(LOG_NAME, `Write to undefined address: ${address.toString(16)}`);\r\n        }\r\n    }\r\n    writeUint8(address, value) {\r\n        if (address >= exports.RAM_START_ADDRESS && address < exports.RAM_START_ADDRESS + this.sram.length) {\r\n            this.sram[address - exports.RAM_START_ADDRESS] = value;\r\n            return;\r\n        }\r\n        const alignedAddress = (address & 0xfffffffc) >>> 0;\r\n        const offset = address & 0x3;\r\n        const peripheral = this.findPeripheral(address);\r\n        if (peripheral) {\r\n            const atomicType = (alignedAddress & 0x3000) >> 12;\r\n            const offset = alignedAddress & 0xfff;\r\n            peripheral.writeUint32Atomic(offset, (value & 0xff) | ((value & 0xff) << 8) | ((value & 0xff) << 16) | ((value & 0xff) << 24), atomicType);\r\n            return;\r\n        }\r\n        const originalValue = this.readUint32(alignedAddress);\r\n        const newValue = new Uint32Array([originalValue]);\r\n        new DataView(newValue.buffer).setUint8(offset, value);\r\n        this.writeUint32(alignedAddress, newValue[0]);\r\n    }\r\n    writeUint16(address, value) {\r\n        // we assume that addess is 16-bit aligned.\r\n        // Ideally we should generate a fault if not!\r\n        if (address >= exports.RAM_START_ADDRESS && address < exports.RAM_START_ADDRESS + this.sram.length) {\r\n            this.sramView.setUint16(address - exports.RAM_START_ADDRESS, value, true);\r\n            return;\r\n        }\r\n        const alignedAddress = (address & 0xfffffffc) >>> 0;\r\n        const offset = address & 0x3;\r\n        const peripheral = this.findPeripheral(address);\r\n        if (peripheral) {\r\n            const atomicType = (alignedAddress & 0x3000) >> 12;\r\n            const offset = alignedAddress & 0xfff;\r\n            peripheral.writeUint32Atomic(offset, (value & 0xffff) | ((value & 0xffff) << 16), atomicType);\r\n            return;\r\n        }\r\n        const originalValue = this.readUint32(alignedAddress);\r\n        const newValue = new Uint32Array([originalValue]);\r\n        new DataView(newValue.buffer).setUint16(offset, value, true);\r\n        this.writeUint32(alignedAddress, newValue[0]);\r\n    }\r\n    get gpioValues() {\r\n        const { gpio } = this;\r\n        let result = 0;\r\n        for (let gpioIndex = 0; gpioIndex < gpio.length; gpioIndex++) {\r\n            if (gpio[gpioIndex].inputValue) {\r\n                result |= 1 << gpioIndex;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    setInterrupt(irq, value) {\r\n        this.core.setInterrupt(irq, value);\r\n    }\r\n    updateIOInterrupt() {\r\n        let interruptValue = false;\r\n        for (const pin of this.gpio) {\r\n            if (pin.irqValue) {\r\n                interruptValue = true;\r\n            }\r\n        }\r\n        this.setInterrupt(irq_1.IRQ.IO_BANK0, interruptValue);\r\n    }\r\n    step() {\r\n        this.core.executeInstruction();\r\n    }\r\n    execute() {\r\n        this.clock.resume();\r\n        this.executeTimer = null;\r\n        this.stopped = false;\r\n        for (let i = 0; i < 100000 && !this.stopped && !this.core.waiting; i++) {\r\n            this.core.executeInstruction();\r\n        }\r\n        if (!this.stopped) {\r\n            this.executeTimer = setTimeout(() => this.execute(), 0);\r\n        }\r\n    }\r\n    stop() {\r\n        this.stopped = true;\r\n        if (this.executeTimer != null) {\r\n            clearTimeout(this.executeTimer);\r\n            this.executeTimer = null;\r\n        }\r\n        this.clock.pause();\r\n    }\r\n    get executing() {\r\n        return !this.stopped;\r\n    }\r\n}\r\nexports.RP2040 = RP2040;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RPSIO = void 0;\r\nconst interpolator_1 = require(\"./interpolator\");\r\nconst CPUID = 0x000;\r\n// GPIO\r\nconst GPIO_IN = 0x004; // Input value for GPIO pins\r\nconst GPIO_HI_IN = 0x008; // Input value for QSPI pins\r\nconst GPIO_OUT = 0x010; // GPIO output value\r\nconst GPIO_OUT_SET = 0x014; // GPIO output value set\r\nconst GPIO_OUT_CLR = 0x018; // GPIO output value clear\r\nconst GPIO_OUT_XOR = 0x01c; // GPIO output value XOR\r\nconst GPIO_OE = 0x020; // GPIO output enable\r\nconst GPIO_OE_SET = 0x024; // GPIO output enable set\r\nconst GPIO_OE_CLR = 0x028; // GPIO output enable clear\r\nconst GPIO_OE_XOR = 0x02c; // GPIO output enable XOR\r\nconst GPIO_HI_OUT = 0x030; // QSPI output value\r\nconst GPIO_HI_OUT_SET = 0x034; // QSPI output value set\r\nconst GPIO_HI_OUT_CLR = 0x038; // QSPI output value clear\r\nconst GPIO_HI_OUT_XOR = 0x03c; // QSPI output value XOR\r\nconst GPIO_HI_OE = 0x040; // QSPI output enable\r\nconst GPIO_HI_OE_SET = 0x044; // QSPI output enable set\r\nconst GPIO_HI_OE_CLR = 0x048; // QSPI output enable clear\r\nconst GPIO_HI_OE_XOR = 0x04c; // QSPI output enable XOR\r\nconst GPIO_MASK = 0x3fffffff;\r\n//HARDWARE DIVIDER\r\nconst DIV_UDIVIDEND = 0x060; //  Divider unsigned dividend\r\nconst DIV_UDIVISOR = 0x064; //  Divider unsigned divisor\r\nconst DIV_SDIVIDEND = 0x068; //  Divider signed dividend\r\nconst DIV_SDIVISOR = 0x06c; //  Divider signed divisor\r\nconst DIV_QUOTIENT = 0x070; //  Divider result quotient\r\nconst DIV_REMAINDER = 0x074; //Divider result remainder\r\nconst DIV_CSR = 0x078;\r\n//INTERPOLATOR\r\nconst INTERP0_ACCUM0 = 0x080; // Read/write access to accumulator 0\r\nconst INTERP0_ACCUM1 = 0x084; // Read/write access to accumulator 1\r\nconst INTERP0_BASE0 = 0x088; // Read/write access to BASE0 register\r\nconst INTERP0_BASE1 = 0x08c; // Read/write access to BASE1 register\r\nconst INTERP0_BASE2 = 0x090; // Read/write access to BASE2 register\r\nconst INTERP0_POP_LANE0 = 0x094; // Read LANE0 result, and simultaneously write lane results to both accumulators (POP)\r\nconst INTERP0_POP_LANE1 = 0x098; // Read LANE1 result, and simultaneously write lane results to both accumulators (POP)\r\nconst INTERP0_POP_FULL = 0x09c; // Read FULL result, and simultaneously write lane results to both accumulators (POP)\r\nconst INTERP0_PEEK_LANE0 = 0x0a0; // Read LANE0 result, without altering any internal state (PEEK)\r\nconst INTERP0_PEEK_LANE1 = 0x0a4; // Read LANE1 result, without altering any internal state (PEEK)\r\nconst INTERP0_PEEK_FULL = 0x0a8; // Read FULL result, without altering any internal state (PEEK)\r\nconst INTERP0_CTRL_LANE0 = 0x0ac; // Control register for lane 0\r\nconst INTERP0_CTRL_LANE1 = 0x0b0; // Control register for lane 1\r\nconst INTERP0_ACCUM0_ADD = 0x0b4; // Values written here are atomically added to ACCUM0\r\nconst INTERP0_ACCUM1_ADD = 0x0b8; // Values written here are atomically added to ACCUM1\r\nconst INTERP0_BASE_1AND0 = 0x0bc; // On write, the lower 16 bits go to BASE0, upper bits to BASE1 simultaneously\r\nconst INTERP1_ACCUM0 = 0x0c0; // Read/write access to accumulator 0\r\nconst INTERP1_ACCUM1 = 0x0c4; // Read/write access to accumulator 1\r\nconst INTERP1_BASE0 = 0x0c8; // Read/write access to BASE0 register\r\nconst INTERP1_BASE1 = 0x0cc; // Read/write access to BASE1 register\r\nconst INTERP1_BASE2 = 0x0d0; // Read/write access to BASE2 register\r\nconst INTERP1_POP_LANE0 = 0x0d4; // Read LANE0 result, and simultaneously write lane results to both accumulators (POP)\r\nconst INTERP1_POP_LANE1 = 0x0d8; // Read LANE1 result, and simultaneously write lane results to both accumulators (POP)\r\nconst INTERP1_POP_FULL = 0x0dc; // Read FULL result, and simultaneously write lane results to both accumulators (POP)\r\nconst INTERP1_PEEK_LANE0 = 0x0e0; // Read LANE0 result, without altering any internal state (PEEK)\r\nconst INTERP1_PEEK_LANE1 = 0x0e4; // Read LANE1 result, without altering any internal state (PEEK)\r\nconst INTERP1_PEEK_FULL = 0x0e8; // Read FULL result, without altering any internal state (PEEK)\r\nconst INTERP1_CTRL_LANE0 = 0x0ec; // Control register for lane 0\r\nconst INTERP1_CTRL_LANE1 = 0x0f0; // Control register for lane 1\r\nconst INTERP1_ACCUM0_ADD = 0x0f4; // Values written here are atomically added to ACCUM0\r\nconst INTERP1_ACCUM1_ADD = 0x0f8; // Values written here are atomically added to ACCUM1\r\nconst INTERP1_BASE_1AND0 = 0x0fc; // On write, the lower 16 bits go to BASE0, upper bits to BASE1 simultaneously\r\n//SPINLOCK\r\nconst SPINLOCK_ST = 0x5c;\r\nconst SPINLOCK0 = 0x100;\r\nconst SPINLOCK31 = 0x17c;\r\nclass RPSIO {\r\n    constructor(rp2040) {\r\n        this.rp2040 = rp2040;\r\n        this.gpioValue = 0;\r\n        this.gpioOutputEnable = 0;\r\n        this.qspiGpioValue = 0;\r\n        this.qspiGpioOutputEnable = 0;\r\n        this.divDividend = 0;\r\n        this.divDivisor = 1;\r\n        this.divQuotient = 0;\r\n        this.divRemainder = 0;\r\n        this.divCSR = 0;\r\n        this.spinLock = 0;\r\n        this.interp0 = new interpolator_1.Interpolator(0);\r\n        this.interp1 = new interpolator_1.Interpolator(1);\r\n    }\r\n    updateHardwareDivider(signed) {\r\n        if (this.divDivisor == 0) {\r\n            this.divQuotient = this.divDividend > 0 ? -1 : 1;\r\n            this.divRemainder = this.divDividend;\r\n        }\r\n        else {\r\n            if (signed) {\r\n                this.divQuotient = (this.divDividend | 0) / (this.divDivisor | 0);\r\n                this.divRemainder = (this.divDividend | 0) % (this.divDivisor | 0);\r\n            }\r\n            else {\r\n                this.divQuotient = (this.divDividend >>> 0) / (this.divDivisor >>> 0);\r\n                this.divRemainder = (this.divDividend >>> 0) % (this.divDivisor >>> 0);\r\n            }\r\n        }\r\n        this.divCSR = 0b11;\r\n        this.rp2040.core.cycles += 8;\r\n    }\r\n    readUint32(offset) {\r\n        if (offset >= SPINLOCK0 && offset <= SPINLOCK31) {\r\n            const bitIndexMask = 1 << ((offset - SPINLOCK0) / 4);\r\n            if (this.spinLock & bitIndexMask) {\r\n                return 0;\r\n            }\r\n            else {\r\n                this.spinLock |= bitIndexMask;\r\n                return bitIndexMask;\r\n            }\r\n        }\r\n        switch (offset) {\r\n            case GPIO_IN:\r\n                return this.rp2040.gpioValues;\r\n            case GPIO_HI_IN: {\r\n                const { qspi } = this.rp2040;\r\n                let result = 0;\r\n                for (let qspiIndex = 0; qspiIndex < qspi.length; qspiIndex++) {\r\n                    if (qspi[qspiIndex].inputValue) {\r\n                        result |= 1 << qspiIndex;\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n            case GPIO_OUT:\r\n                return this.gpioValue;\r\n            case GPIO_OE:\r\n                return this.gpioOutputEnable;\r\n            case GPIO_HI_OUT:\r\n                return this.qspiGpioValue;\r\n            case GPIO_HI_OE:\r\n                return this.qspiGpioOutputEnable;\r\n            case GPIO_OUT_SET:\r\n            case GPIO_OUT_CLR:\r\n            case GPIO_OUT_XOR:\r\n            case GPIO_OE_SET:\r\n            case GPIO_OE_CLR:\r\n            case GPIO_OE_XOR:\r\n            case GPIO_HI_OUT_SET:\r\n            case GPIO_HI_OUT_CLR:\r\n            case GPIO_HI_OUT_XOR:\r\n            case GPIO_HI_OE_SET:\r\n            case GPIO_HI_OE_CLR:\r\n            case GPIO_HI_OE_XOR:\r\n                return 0; // TODO verify with silicone\r\n            case CPUID:\r\n                // Returns the current CPU core id (always 0 for now)\r\n                return 0;\r\n            case SPINLOCK_ST:\r\n                return this.spinLock;\r\n            case DIV_UDIVIDEND:\r\n                return this.divDividend;\r\n            case DIV_SDIVIDEND:\r\n                return this.divDividend;\r\n            case DIV_UDIVISOR:\r\n                return this.divDivisor;\r\n            case DIV_SDIVISOR:\r\n                return this.divDivisor;\r\n            case DIV_QUOTIENT:\r\n                this.divCSR &= ~0b10;\r\n                return this.divQuotient;\r\n            case DIV_REMAINDER:\r\n                return this.divRemainder;\r\n            case DIV_CSR:\r\n                return this.divCSR;\r\n            case INTERP0_ACCUM0:\r\n                return this.interp0.accum0;\r\n            case INTERP0_ACCUM1:\r\n                return this.interp0.accum1;\r\n            case INTERP0_BASE0:\r\n                return this.interp0.base0;\r\n            case INTERP0_BASE1:\r\n                return this.interp0.base1;\r\n            case INTERP0_BASE2:\r\n                return this.interp0.base2;\r\n            case INTERP0_CTRL_LANE0:\r\n                return this.interp0.ctrl0;\r\n            case INTERP0_CTRL_LANE1:\r\n                return this.interp0.ctrl1;\r\n            case INTERP0_PEEK_LANE0:\r\n                return this.interp0.result0;\r\n            case INTERP0_PEEK_LANE1:\r\n                return this.interp0.result1;\r\n            case INTERP0_PEEK_FULL:\r\n                return this.interp0.result2;\r\n            case INTERP0_POP_LANE0: {\r\n                const value = this.interp0.result0;\r\n                this.interp0.writeback();\r\n                return value;\r\n            }\r\n            case INTERP0_POP_LANE1: {\r\n                const value = this.interp0.result1;\r\n                this.interp0.writeback();\r\n                return value;\r\n            }\r\n            case INTERP0_POP_FULL: {\r\n                const value = this.interp0.result2;\r\n                this.interp0.writeback();\r\n                return value;\r\n            }\r\n            case INTERP0_ACCUM0_ADD:\r\n                return this.interp0.smresult0;\r\n            case INTERP0_ACCUM1_ADD:\r\n                return this.interp0.smresult1;\r\n            case INTERP1_ACCUM0:\r\n                return this.interp1.accum0;\r\n            case INTERP1_ACCUM1:\r\n                return this.interp1.accum1;\r\n            case INTERP1_BASE0:\r\n                return this.interp1.base0;\r\n            case INTERP1_BASE1:\r\n                return this.interp1.base1;\r\n            case INTERP1_BASE2:\r\n                return this.interp1.base2;\r\n            case INTERP1_CTRL_LANE0:\r\n                return this.interp1.ctrl0;\r\n            case INTERP1_CTRL_LANE1:\r\n                return this.interp1.ctrl1;\r\n            case INTERP1_PEEK_LANE0:\r\n                return this.interp1.result0;\r\n            case INTERP1_PEEK_LANE1:\r\n                return this.interp1.result1;\r\n            case INTERP1_PEEK_FULL:\r\n                return this.interp1.result2;\r\n            case INTERP1_POP_LANE0: {\r\n                const value = this.interp1.result0;\r\n                this.interp1.writeback();\r\n                return value;\r\n            }\r\n            case INTERP1_POP_LANE1: {\r\n                const value = this.interp1.result1;\r\n                this.interp1.writeback();\r\n                return value;\r\n            }\r\n            case INTERP1_POP_FULL: {\r\n                const value = this.interp1.result2;\r\n                this.interp1.writeback();\r\n                return value;\r\n            }\r\n            case INTERP1_ACCUM0_ADD:\r\n                return this.interp1.smresult0;\r\n            case INTERP1_ACCUM1_ADD:\r\n                return this.interp1.smresult1;\r\n        }\r\n        console.warn(`Read from invalid SIO address: ${offset.toString(16)}`);\r\n        return 0xffffffff;\r\n    }\r\n    writeUint32(offset, value) {\r\n        if (offset >= SPINLOCK0 && offset <= SPINLOCK31) {\r\n            const bitIndexMask = ~(1 << ((offset - SPINLOCK0) / 4));\r\n            this.spinLock &= bitIndexMask;\r\n            return;\r\n        }\r\n        const prevGpioValue = this.gpioValue;\r\n        const prevGpioOutputEnable = this.gpioOutputEnable;\r\n        switch (offset) {\r\n            case GPIO_OUT:\r\n                this.gpioValue = value & GPIO_MASK;\r\n                break;\r\n            case GPIO_OUT_SET:\r\n                this.gpioValue |= value & GPIO_MASK;\r\n                break;\r\n            case GPIO_OUT_CLR:\r\n                this.gpioValue &= ~value;\r\n                break;\r\n            case GPIO_OUT_XOR:\r\n                this.gpioValue ^= value & GPIO_MASK;\r\n                break;\r\n            case GPIO_OE:\r\n                this.gpioOutputEnable = value & GPIO_MASK;\r\n                break;\r\n            case GPIO_OE_SET:\r\n                this.gpioOutputEnable |= value & GPIO_MASK;\r\n                break;\r\n            case GPIO_OE_CLR:\r\n                this.gpioOutputEnable &= ~value;\r\n                break;\r\n            case GPIO_OE_XOR:\r\n                this.gpioOutputEnable ^= value & GPIO_MASK;\r\n                break;\r\n            case GPIO_HI_OUT:\r\n                this.qspiGpioValue = value & GPIO_MASK;\r\n                break;\r\n            case GPIO_HI_OUT_SET:\r\n                this.qspiGpioValue |= value & GPIO_MASK;\r\n                break;\r\n            case GPIO_HI_OUT_CLR:\r\n                this.qspiGpioValue &= ~value;\r\n                break;\r\n            case GPIO_HI_OUT_XOR:\r\n                this.qspiGpioValue ^= value & GPIO_MASK;\r\n                break;\r\n            case GPIO_HI_OE:\r\n                this.qspiGpioOutputEnable = value & GPIO_MASK;\r\n                break;\r\n            case GPIO_HI_OE_SET:\r\n                this.qspiGpioOutputEnable |= value & GPIO_MASK;\r\n                break;\r\n            case GPIO_HI_OE_CLR:\r\n                this.qspiGpioOutputEnable &= ~value;\r\n                break;\r\n            case GPIO_HI_OE_XOR:\r\n                this.qspiGpioOutputEnable ^= value & GPIO_MASK;\r\n                break;\r\n            case DIV_UDIVIDEND:\r\n                this.divDividend = value;\r\n                this.updateHardwareDivider(false);\r\n                break;\r\n            case DIV_SDIVIDEND:\r\n                this.divDividend = value;\r\n                this.updateHardwareDivider(true);\r\n                break;\r\n            case DIV_UDIVISOR:\r\n                this.divDivisor = value;\r\n                this.updateHardwareDivider(false);\r\n                break;\r\n            case DIV_SDIVISOR:\r\n                this.divDivisor = value;\r\n                this.updateHardwareDivider(true);\r\n                break;\r\n            case DIV_QUOTIENT:\r\n                this.divQuotient = value;\r\n                this.divCSR = 0b11;\r\n                break;\r\n            case DIV_REMAINDER:\r\n                this.divRemainder = value;\r\n                this.divCSR = 0b11;\r\n                break;\r\n            case INTERP0_ACCUM0:\r\n                this.interp0.accum0 = value;\r\n                this.interp0.update();\r\n                break;\r\n            case INTERP0_ACCUM1:\r\n                this.interp0.accum1 = value;\r\n                this.interp0.update();\r\n                break;\r\n            case INTERP0_BASE0:\r\n                this.interp0.base0 = value;\r\n                this.interp0.update();\r\n                break;\r\n            case INTERP0_BASE1:\r\n                this.interp0.base1 = value;\r\n                this.interp0.update();\r\n                break;\r\n            case INTERP0_BASE2:\r\n                this.interp0.base2 = value;\r\n                this.interp0.update();\r\n                break;\r\n            case INTERP0_CTRL_LANE0:\r\n                this.interp0.ctrl0 = value;\r\n                this.interp0.update();\r\n                break;\r\n            case INTERP0_CTRL_LANE1:\r\n                this.interp0.ctrl1 = value;\r\n                this.interp0.update();\r\n                break;\r\n            case INTERP0_ACCUM0_ADD:\r\n                this.interp0.accum0 += value;\r\n                this.interp0.update();\r\n                break;\r\n            case INTERP0_ACCUM1_ADD:\r\n                this.interp0.accum1 += value;\r\n                this.interp0.update();\r\n                break;\r\n            case INTERP0_BASE_1AND0:\r\n                this.interp0.setBase01(value);\r\n                break;\r\n            case INTERP1_ACCUM0:\r\n                this.interp1.accum0 = value;\r\n                this.interp1.update();\r\n                break;\r\n            case INTERP1_ACCUM1:\r\n                this.interp1.accum1 = value;\r\n                this.interp1.update();\r\n                break;\r\n            case INTERP1_BASE0:\r\n                this.interp1.base0 = value;\r\n                this.interp1.update();\r\n                break;\r\n            case INTERP1_BASE1:\r\n                this.interp1.base1 = value;\r\n                this.interp1.update();\r\n                break;\r\n            case INTERP1_BASE2:\r\n                this.interp1.base2 = value;\r\n                this.interp1.update();\r\n                break;\r\n            case INTERP1_CTRL_LANE0:\r\n                this.interp1.ctrl0 = value;\r\n                this.interp1.update();\r\n                break;\r\n            case INTERP1_CTRL_LANE1:\r\n                this.interp1.ctrl1 = value;\r\n                this.interp1.update();\r\n                break;\r\n            case INTERP1_ACCUM0_ADD:\r\n                this.interp1.accum0 += value;\r\n                this.interp1.update();\r\n                break;\r\n            case INTERP1_ACCUM1_ADD:\r\n                this.interp1.accum1 += value;\r\n                this.interp1.update();\r\n                break;\r\n            case INTERP1_BASE_1AND0:\r\n                this.interp1.setBase01(value);\r\n                break;\r\n            default:\r\n                console.warn(`Write to invalid SIO address: ${offset.toString(16)}, value=${value.toString(16)}`);\r\n        }\r\n        const pinsToUpdate = (this.gpioValue ^ prevGpioValue) | (this.gpioOutputEnable ^ prevGpioOutputEnable);\r\n        if (pinsToUpdate) {\r\n            const { gpio } = this.rp2040;\r\n            for (let gpioIndex = 0; gpioIndex < gpio.length; gpioIndex++) {\r\n                if (pinsToUpdate & (1 << gpioIndex)) {\r\n                    gpio[gpioIndex].checkForUpdates();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.RPSIO = RPSIO;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.USBCDC = exports.extractEndpointNumbers = void 0;\r\nconst fifo_1 = require(\"../utils/fifo\");\r\nconst interfaces_1 = require(\"./interfaces\");\r\nconst setup_1 = require(\"./setup\");\r\n// CDC stuff\r\nconst CDC_REQUEST_SET_CONTROL_LINE_STATE = 0x22;\r\nconst CDC_DTR = 1 << 0;\r\nconst CDC_RTS = 1 << 1;\r\nconst CDC_DATA_CLASS = 10;\r\nconst ENDPOINT_BULK = 2;\r\nconst TX_FIFO_SIZE = 512;\r\nconst ENDPOINT_ZERO = 0;\r\nconst CONFIGURATION_DESCRIPTOR_SIZE = 9;\r\nfunction extractEndpointNumbers(descriptors) {\r\n    let index = 0;\r\n    let foundInterface = false;\r\n    const result = {\r\n        in: -1,\r\n        out: -1,\r\n    };\r\n    while (index < descriptors.length) {\r\n        const len = descriptors[index];\r\n        if (len < 2 || descriptors.length < index + len) {\r\n            break;\r\n        }\r\n        const type = descriptors[index + 1];\r\n        if (type === interfaces_1.DescriptorType.Interface && len === 9) {\r\n            const numEndpoints = descriptors[index + 4];\r\n            const interfaceClass = descriptors[index + 5];\r\n            foundInterface = numEndpoints === 2 && interfaceClass === CDC_DATA_CLASS;\r\n        }\r\n        if (foundInterface && type === interfaces_1.DescriptorType.Endpoint && len === 7) {\r\n            const address = descriptors[index + 2];\r\n            const attributes = descriptors[index + 3];\r\n            if ((attributes & 0x3) === ENDPOINT_BULK) {\r\n                if (address & 0x80) {\r\n                    result.in = address & 0xf;\r\n                }\r\n                else {\r\n                    result.out = address & 0xf;\r\n                }\r\n            }\r\n        }\r\n        index += descriptors[index];\r\n    }\r\n    return result;\r\n}\r\nexports.extractEndpointNumbers = extractEndpointNumbers;\r\nclass USBCDC {\r\n    constructor(usb) {\r\n        this.usb = usb;\r\n        this.txFIFO = new fifo_1.FIFO(TX_FIFO_SIZE);\r\n        this.initialized = false;\r\n        this.descriptorsSize = null;\r\n        this.descriptors = [];\r\n        this.outEndpoint = -1;\r\n        this.inEndpoint = -1;\r\n        this.usb.onUSBEnabled = () => {\r\n            this.usb.resetDevice();\r\n        };\r\n        this.usb.onResetReceived = () => {\r\n            this.usb.sendSetupPacket(setup_1.setDeviceAddressPacket(1));\r\n        };\r\n        this.usb.onEndpointWrite = (endpoint, buffer) => {\r\n            var _a, _b;\r\n            if (endpoint === ENDPOINT_ZERO && buffer.length === 0) {\r\n                if (this.descriptorsSize == null) {\r\n                    this.usb.sendSetupPacket(setup_1.getDescriptorPacket(interfaces_1.DescriptorType.Configration, CONFIGURATION_DESCRIPTOR_SIZE));\r\n                }\r\n                // Acknowledgement\r\n                else if (!this.initialized) {\r\n                    this.cdcSetControlLineState();\r\n                    (_a = this.onDeviceConnected) === null || _a === void 0 ? void 0 : _a.call(this);\r\n                }\r\n            }\r\n            if (endpoint === ENDPOINT_ZERO && buffer.length > 1) {\r\n                if (buffer.length === CONFIGURATION_DESCRIPTOR_SIZE &&\r\n                    buffer[1] === interfaces_1.DescriptorType.Configration &&\r\n                    this.descriptorsSize == null) {\r\n                    this.descriptorsSize = (buffer[3] << 8) | buffer[2];\r\n                    this.usb.sendSetupPacket(setup_1.getDescriptorPacket(interfaces_1.DescriptorType.Configration, this.descriptorsSize));\r\n                }\r\n                else if (this.descriptorsSize != null && this.descriptors.length < this.descriptorsSize) {\r\n                    this.descriptors.push(...buffer);\r\n                }\r\n                if (this.descriptorsSize === this.descriptors.length) {\r\n                    const endpoints = extractEndpointNumbers(this.descriptors);\r\n                    this.inEndpoint = endpoints.in;\r\n                    this.outEndpoint = endpoints.out;\r\n                    // Now configure the device\r\n                    this.usb.sendSetupPacket(setup_1.setDeviceConfigurationPacket(1));\r\n                }\r\n            }\r\n            if (endpoint === this.inEndpoint) {\r\n                (_b = this.onSerialData) === null || _b === void 0 ? void 0 : _b.call(this, buffer);\r\n            }\r\n        };\r\n        this.usb.onEndpointRead = (endpoint, size) => {\r\n            if (endpoint === this.outEndpoint) {\r\n                const buffer = new Uint8Array(Math.min(size, this.txFIFO.itemCount));\r\n                for (let i = 0; i < buffer.length; i++) {\r\n                    buffer[i] = this.txFIFO.pull();\r\n                }\r\n                this.usb.endpointReadDone(this.outEndpoint, buffer);\r\n            }\r\n        };\r\n    }\r\n    cdcSetControlLineState(value = CDC_DTR | CDC_RTS, interfaceNumber = 0) {\r\n        this.usb.sendSetupPacket(setup_1.createSetupPacket({\r\n            dataDirection: interfaces_1.DataDirection.HostToDevice,\r\n            type: interfaces_1.SetupType.Class,\r\n            recipient: interfaces_1.SetupRecipient.Device,\r\n            bRequest: CDC_REQUEST_SET_CONTROL_LINE_STATE,\r\n            wValue: value,\r\n            wIndex: interfaceNumber,\r\n            wLength: 0,\r\n        }));\r\n        this.initialized = true;\r\n    }\r\n    sendSerialByte(data) {\r\n        this.txFIFO.push(data);\r\n    }\r\n}\r\nexports.USBCDC = USBCDC;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DescriptorType = exports.SetupRequest = exports.SetupRecipient = exports.SetupType = exports.DataDirection = void 0;\r\nvar DataDirection;\r\n(function (DataDirection) {\r\n    DataDirection[DataDirection[\"HostToDevice\"] = 0] = \"HostToDevice\";\r\n    DataDirection[DataDirection[\"DeviceToHost\"] = 1] = \"DeviceToHost\";\r\n})(DataDirection = exports.DataDirection || (exports.DataDirection = {}));\r\nvar SetupType;\r\n(function (SetupType) {\r\n    SetupType[SetupType[\"Standard\"] = 0] = \"Standard\";\r\n    SetupType[SetupType[\"Class\"] = 1] = \"Class\";\r\n    SetupType[SetupType[\"Vendor\"] = 2] = \"Vendor\";\r\n    SetupType[SetupType[\"Reserved\"] = 3] = \"Reserved\";\r\n})(SetupType = exports.SetupType || (exports.SetupType = {}));\r\nvar SetupRecipient;\r\n(function (SetupRecipient) {\r\n    SetupRecipient[SetupRecipient[\"Device\"] = 0] = \"Device\";\r\n    SetupRecipient[SetupRecipient[\"Interface\"] = 1] = \"Interface\";\r\n    SetupRecipient[SetupRecipient[\"Endpoint\"] = 2] = \"Endpoint\";\r\n    SetupRecipient[SetupRecipient[\"Other\"] = 3] = \"Other\";\r\n})(SetupRecipient = exports.SetupRecipient || (exports.SetupRecipient = {}));\r\nvar SetupRequest;\r\n(function (SetupRequest) {\r\n    SetupRequest[SetupRequest[\"GetStatus\"] = 0] = \"GetStatus\";\r\n    SetupRequest[SetupRequest[\"ClearFeature\"] = 1] = \"ClearFeature\";\r\n    SetupRequest[SetupRequest[\"Reserved1\"] = 2] = \"Reserved1\";\r\n    SetupRequest[SetupRequest[\"SetFeature\"] = 3] = \"SetFeature\";\r\n    SetupRequest[SetupRequest[\"Reserved2\"] = 4] = \"Reserved2\";\r\n    SetupRequest[SetupRequest[\"SetAddress\"] = 5] = \"SetAddress\";\r\n    SetupRequest[SetupRequest[\"GetDescriptor\"] = 6] = \"GetDescriptor\";\r\n    SetupRequest[SetupRequest[\"SetDescriptor\"] = 7] = \"SetDescriptor\";\r\n    SetupRequest[SetupRequest[\"GetConfiguration\"] = 8] = \"GetConfiguration\";\r\n    SetupRequest[SetupRequest[\"SetDeviceConfiguration\"] = 9] = \"SetDeviceConfiguration\";\r\n    SetupRequest[SetupRequest[\"GetInterface\"] = 10] = \"GetInterface\";\r\n    SetupRequest[SetupRequest[\"SetInterface\"] = 11] = \"SetInterface\";\r\n    SetupRequest[SetupRequest[\"SynchFrame\"] = 12] = \"SynchFrame\";\r\n})(SetupRequest = exports.SetupRequest || (exports.SetupRequest = {}));\r\nvar DescriptorType;\r\n(function (DescriptorType) {\r\n    DescriptorType[DescriptorType[\"Device\"] = 1] = \"Device\";\r\n    DescriptorType[DescriptorType[\"Configration\"] = 2] = \"Configration\";\r\n    DescriptorType[DescriptorType[\"String\"] = 3] = \"String\";\r\n    DescriptorType[DescriptorType[\"Interface\"] = 4] = \"Interface\";\r\n    DescriptorType[DescriptorType[\"Endpoint\"] = 5] = \"Endpoint\";\r\n})(DescriptorType = exports.DescriptorType || (exports.DescriptorType = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.setDeviceConfigurationPacket = exports.getDescriptorPacket = exports.setDeviceAddressPacket = exports.createSetupPacket = void 0;\r\nconst interfaces_1 = require(\"./interfaces\");\r\nfunction createSetupPacket(params) {\r\n    const setupPacket = new Uint8Array(8);\r\n    setupPacket[0] = (params.dataDirection << 7) | (params.type << 5) | params.recipient;\r\n    setupPacket[1] = params.bRequest;\r\n    setupPacket[2] = params.wValue & 0xff;\r\n    setupPacket[3] = (params.wValue >> 8) & 0xff;\r\n    setupPacket[4] = params.wIndex & 0xff;\r\n    setupPacket[5] = (params.wIndex >> 8) & 0xff;\r\n    setupPacket[6] = params.wLength & 0xff;\r\n    setupPacket[7] = (params.wLength >> 8) & 0xff;\r\n    return setupPacket;\r\n}\r\nexports.createSetupPacket = createSetupPacket;\r\nfunction setDeviceAddressPacket(address) {\r\n    return createSetupPacket({\r\n        dataDirection: interfaces_1.DataDirection.HostToDevice,\r\n        type: interfaces_1.SetupType.Standard,\r\n        recipient: interfaces_1.SetupRecipient.Device,\r\n        bRequest: interfaces_1.SetupRequest.SetAddress,\r\n        wValue: address,\r\n        wIndex: 0,\r\n        wLength: 0,\r\n    });\r\n}\r\nexports.setDeviceAddressPacket = setDeviceAddressPacket;\r\nfunction getDescriptorPacket(type, length, index = 0) {\r\n    return createSetupPacket({\r\n        dataDirection: interfaces_1.DataDirection.DeviceToHost,\r\n        type: interfaces_1.SetupType.Standard,\r\n        recipient: interfaces_1.SetupRecipient.Device,\r\n        bRequest: interfaces_1.SetupRequest.GetDescriptor,\r\n        wValue: type << 8,\r\n        wIndex: index,\r\n        wLength: length,\r\n    });\r\n}\r\nexports.getDescriptorPacket = getDescriptorPacket;\r\nfunction setDeviceConfigurationPacket(configurationNumber) {\r\n    return createSetupPacket({\r\n        dataDirection: interfaces_1.DataDirection.HostToDevice,\r\n        type: interfaces_1.SetupType.Standard,\r\n        recipient: interfaces_1.SetupRecipient.Device,\r\n        bRequest: interfaces_1.SetupRequest.SetDeviceConfiguration,\r\n        wValue: configurationNumber,\r\n        wIndex: 0,\r\n        wLength: 0,\r\n    });\r\n}\r\nexports.setDeviceConfigurationPacket = setDeviceConfigurationPacket;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.u32 = exports.s32 = exports.bit = void 0;\r\nfunction bit(n) {\r\n    return 1 << n;\r\n}\r\nexports.bit = bit;\r\nfunction s32(n) {\r\n    return n | 0;\r\n}\r\nexports.s32 = s32;\r\nfunction u32(n) {\r\n    return n >>> 0;\r\n}\r\nexports.u32 = u32;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FIFO = void 0;\r\nclass FIFO {\r\n    constructor(size) {\r\n        this.start = 0;\r\n        this.used = 0;\r\n        this.buffer = new Uint32Array(size);\r\n    }\r\n    get size() {\r\n        return this.buffer.length;\r\n    }\r\n    get itemCount() {\r\n        return this.used;\r\n    }\r\n    push(value) {\r\n        const { length } = this.buffer;\r\n        const { start, used } = this;\r\n        if (this.used < length) {\r\n            this.buffer[(start + used) % length] = value;\r\n            this.used++;\r\n        }\r\n    }\r\n    pull() {\r\n        const { start, used } = this;\r\n        const { length } = this.buffer;\r\n        if (used) {\r\n            this.start = (start + 1) % length;\r\n            this.used--;\r\n            return this.buffer[start];\r\n        }\r\n        return 0;\r\n    }\r\n    peek() {\r\n        return this.used ? this.buffer[this.start] : 0;\r\n    }\r\n    reset() {\r\n        this.used = 0;\r\n    }\r\n    get empty() {\r\n        return this.used == 0;\r\n    }\r\n    get full() {\r\n        return this.used === this.buffer.length;\r\n    }\r\n    get items() {\r\n        const { start, used, buffer } = this;\r\n        const { length } = buffer;\r\n        const result = [];\r\n        for (let i = 0; i < used; i++) {\r\n            result[i] = buffer[(start + i) % length];\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexports.FIFO = FIFO;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ConsoleLogger = exports.LogLevel = void 0;\r\nconst time_1 = require(\"./time\");\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"Debug\"] = 0] = \"Debug\";\r\n    LogLevel[LogLevel[\"Info\"] = 1] = \"Info\";\r\n    LogLevel[LogLevel[\"Warn\"] = 2] = \"Warn\";\r\n    LogLevel[LogLevel[\"Error\"] = 3] = \"Error\";\r\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\r\nclass ConsoleLogger {\r\n    constructor(currentLogLevel, throwOnError = true) {\r\n        this.currentLogLevel = currentLogLevel;\r\n        this.throwOnError = throwOnError;\r\n    }\r\n    aboveLogLevel(logLevel) {\r\n        return logLevel >= this.currentLogLevel ? true : false;\r\n    }\r\n    formatMessage(componentName, message) {\r\n        const currentTime = time_1.formatTime(new Date());\r\n        return `${currentTime} [${componentName}] ${message}`;\r\n    }\r\n    debug(componetName, message) {\r\n        if (this.aboveLogLevel(LogLevel.Debug)) {\r\n            console.debug(this.formatMessage(componetName, message));\r\n        }\r\n    }\r\n    warn(componetName, message) {\r\n        if (this.aboveLogLevel(LogLevel.Warn)) {\r\n            console.warn(this.formatMessage(componetName, message));\r\n        }\r\n    }\r\n    error(componentName, message) {\r\n        if (this.aboveLogLevel(LogLevel.Error)) {\r\n            console.error(this.formatMessage(componentName, message));\r\n            if (this.throwOnError) {\r\n                throw new Error(`[${componentName}] ${message}`);\r\n            }\r\n        }\r\n    }\r\n    info(componentName, message) {\r\n        if (this.aboveLogLevel(LogLevel.Info)) {\r\n            console.info(this.formatMessage(componentName, message));\r\n        }\r\n    }\r\n}\r\nexports.ConsoleLogger = ConsoleLogger;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.formatTime = exports.getCurrentMicroseconds = void 0;\r\nfunction getCurrentMicroseconds() {\r\n    if (typeof performance != 'undefined') {\r\n        return Math.floor(performance.now() * 1000);\r\n    }\r\n    else {\r\n        return Math.floor(eval('require')('perf_hooks').performance.now() * 1000);\r\n    }\r\n}\r\nexports.getCurrentMicroseconds = getCurrentMicroseconds;\r\nfunction leftPad(value, minLength, padChar = ' ') {\r\n    if (value.length < minLength) {\r\n        value = padChar + value;\r\n    }\r\n    return value;\r\n}\r\nfunction rightPad(value, minLength, padChar = ' ') {\r\n    if (value.length < minLength) {\r\n        value += padChar;\r\n    }\r\n    return value;\r\n}\r\nfunction formatTime(date) {\r\n    const hours = leftPad(date.getHours().toString(), 2, '0');\r\n    const minutes = leftPad(date.getMinutes().toString(), 2, '0');\r\n    const seconds = leftPad(date.getSeconds().toString(), 2, '0');\r\n    const milliseconds = rightPad(date.getMilliseconds().toString(), 3);\r\n    return `${hours}:${minutes}:${seconds}.${milliseconds}`;\r\n}\r\nexports.formatTime = formatTime;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Timer32PeriodicAlarm = exports.Timer32 = exports.TimerMode = void 0;\r\nvar TimerMode;\r\n(function (TimerMode) {\r\n    TimerMode[TimerMode[\"Increment\"] = 0] = \"Increment\";\r\n    TimerMode[TimerMode[\"Decrement\"] = 1] = \"Decrement\";\r\n    TimerMode[TimerMode[\"ZigZag\"] = 2] = \"ZigZag\";\r\n})(TimerMode = exports.TimerMode || (exports.TimerMode = {}));\r\nclass Timer32 {\r\n    constructor(clock, baseFreq) {\r\n        this.clock = clock;\r\n        this.baseFreq = baseFreq;\r\n        this.baseValue = 0;\r\n        this.baseMicros = 0;\r\n        this.topValue = 0xffffffff;\r\n        this.prescalerValue = 1;\r\n        this.timerMode = TimerMode.Increment;\r\n        this.enabled = true;\r\n        this.listeners = [];\r\n    }\r\n    reset() {\r\n        this.baseMicros = this.clock.micros;\r\n        this.baseValue = 0;\r\n        this.updated();\r\n    }\r\n    set(value, zigZagDown = false) {\r\n        this.baseValue = zigZagDown ? this.topValue * 2 - value : value;\r\n        this.baseMicros = this.clock.micros;\r\n        this.updated();\r\n    }\r\n    /**\r\n     * Advances the counter by the given amount. Note that this will\r\n     * decrease the counter if the timer is running in Decrement mode.\r\n     *\r\n     * @param delta The value to add to the counter. Can be negative.\r\n     */\r\n    advance(delta) {\r\n        this.baseValue += delta;\r\n    }\r\n    get rawCounter() {\r\n        const { baseFreq, prescalerValue, baseMicros, baseValue, enabled, timerMode } = this;\r\n        if (!baseFreq || !prescalerValue || !enabled) {\r\n            return this.baseValue;\r\n        }\r\n        const zigzag = timerMode == TimerMode.ZigZag;\r\n        const ticks = ((this.clock.micros - baseMicros) / 1e6) * (baseFreq / prescalerValue);\r\n        const topModulo = zigzag ? this.topValue * 2 : this.topValue + 1;\r\n        const delta = timerMode == TimerMode.Decrement ? topModulo - (ticks % topModulo) : ticks;\r\n        let currentValue = Math.round(baseValue + delta);\r\n        if (this.topValue != 0xffffffff) {\r\n            currentValue %= topModulo;\r\n        }\r\n        return currentValue;\r\n    }\r\n    get counter() {\r\n        let currentValue = this.rawCounter;\r\n        if (this.timerMode == TimerMode.ZigZag && currentValue > this.topValue) {\r\n            currentValue = this.topValue * 2 - currentValue;\r\n        }\r\n        return currentValue >>> 0;\r\n    }\r\n    get top() {\r\n        return this.topValue;\r\n    }\r\n    set top(value) {\r\n        const { counter } = this;\r\n        this.topValue = value;\r\n        this.set(counter <= this.topValue ? counter : 0);\r\n    }\r\n    get frequency() {\r\n        return this.baseFreq;\r\n    }\r\n    set frequency(value) {\r\n        this.baseValue = this.counter;\r\n        this.baseMicros = this.clock.micros;\r\n        this.baseFreq = value;\r\n        this.updated();\r\n    }\r\n    get prescaler() {\r\n        return this.prescalerValue;\r\n    }\r\n    set prescaler(value) {\r\n        this.baseValue = this.counter;\r\n        this.baseMicros = this.clock.micros;\r\n        this.enabled = this.prescalerValue !== 0;\r\n        this.prescalerValue = value;\r\n        this.updated();\r\n    }\r\n    toMicros(cycles) {\r\n        const { baseFreq, prescalerValue } = this;\r\n        return (cycles * 1e6) / (baseFreq / prescalerValue);\r\n    }\r\n    get enable() {\r\n        return this.enabled;\r\n    }\r\n    set enable(value) {\r\n        if (value !== this.enabled) {\r\n            if (value) {\r\n                this.baseMicros = this.clock.micros;\r\n            }\r\n            else {\r\n                this.baseValue = this.counter;\r\n            }\r\n            this.enabled = value;\r\n            this.updated();\r\n        }\r\n    }\r\n    get mode() {\r\n        return this.timerMode;\r\n    }\r\n    set mode(value) {\r\n        if (this.timerMode !== value) {\r\n            const { counter } = this;\r\n            this.timerMode = value;\r\n            this.set(counter);\r\n        }\r\n    }\r\n    updated() {\r\n        for (const listener of this.listeners) {\r\n            listener();\r\n        }\r\n    }\r\n}\r\nexports.Timer32 = Timer32;\r\nclass Timer32PeriodicAlarm {\r\n    constructor(timer, callback) {\r\n        this.timer = timer;\r\n        this.callback = callback;\r\n        this.targetValue = 0;\r\n        this.enabled = false;\r\n        this.handleAlarm = () => {\r\n            this.callback();\r\n            if (this.enabled && this.timer.enable) {\r\n                this.schedule();\r\n            }\r\n        };\r\n        this.update = () => {\r\n            this.cancel();\r\n            if (this.enabled && this.timer.enable) {\r\n                this.schedule();\r\n            }\r\n        };\r\n        timer.listeners.push(this.update);\r\n    }\r\n    get enable() {\r\n        return this.enabled;\r\n    }\r\n    set enable(value) {\r\n        if (value !== this.enabled) {\r\n            this.enabled = value;\r\n            if (value && this.timer.enable) {\r\n                this.schedule();\r\n            }\r\n            else {\r\n                this.cancel();\r\n            }\r\n        }\r\n    }\r\n    get target() {\r\n        return this.targetValue;\r\n    }\r\n    set target(value) {\r\n        if (value === this.targetValue) {\r\n            return;\r\n        }\r\n        this.targetValue = value;\r\n        if (this.enabled && this.timer.enable) {\r\n            this.cancel();\r\n            this.schedule();\r\n        }\r\n    }\r\n    schedule() {\r\n        const { timer, targetValue } = this;\r\n        const { top, mode, rawCounter } = timer;\r\n        let cycleDelta = targetValue - rawCounter;\r\n        if (mode === TimerMode.ZigZag && cycleDelta < 0) {\r\n            if (cycleDelta < -top) {\r\n                cycleDelta += 2 * top;\r\n            }\r\n            else {\r\n                cycleDelta = top * 2 - targetValue - rawCounter;\r\n            }\r\n        }\r\n        if (top != 0xffffffff) {\r\n            if (cycleDelta < 0) {\r\n                cycleDelta += top + 1;\r\n            }\r\n            if (targetValue > top) {\r\n                // Skip alarm\r\n                return;\r\n            }\r\n        }\r\n        if (mode === TimerMode.Decrement) {\r\n            cycleDelta = top - cycleDelta;\r\n        }\r\n        const cyclesToAlarm = cycleDelta >>> 0;\r\n        const microsToAlarm = timer.toMicros(cyclesToAlarm);\r\n        this.clockTimer = this.timer.clock.createTimer(microsToAlarm, this.handleAlarm);\r\n    }\r\n    cancel() {\r\n        if (this.clockTimer) {\r\n            this.timer.clock.deleteTimer(this.clockTimer);\r\n            this.clockTimer = undefined;\r\n        }\r\n    }\r\n}\r\nexports.Timer32PeriodicAlarm = Timer32PeriodicAlarm;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(3109);\n",""],"names":[],"sourceRoot":""}